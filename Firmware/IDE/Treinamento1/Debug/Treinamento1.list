
Treinamento1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800243c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b70  2000000c  08002448  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000b7c  08002448  00020b7c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000149d5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c59  00000000  00000000  00034a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d54  00000000  00000000  00037663  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c18  00000000  00000000  0003f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d20  00000000  00000000  0003ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006852  00000000  00000000  00040cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000043d0  00000000  00000000  00047542  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b912  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e7c  00000000  00000000  0004b990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080023cc 	.word	0x080023cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080023cc 	.word	0x080023cc

08000150 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000150:	f100 0308 	add.w	r3, r0, #8
 8000154:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000156:	f04f 32ff 	mov.w	r2, #4294967295
 800015a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800015c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800015e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000160:	2300      	movs	r3, #0
 8000162:	6003      	str	r3, [r0, #0]
 8000164:	4770      	bx	lr

08000166 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000166:	2300      	movs	r3, #0
 8000168:	6103      	str	r3, [r0, #16]
 800016a:	4770      	bx	lr

0800016c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800016c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800016e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000170:	689a      	ldr	r2, [r3, #8]
 8000172:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000174:	689a      	ldr	r2, [r3, #8]
 8000176:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000178:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800017a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800017c:	6803      	ldr	r3, [r0, #0]
 800017e:	3301      	adds	r3, #1
 8000180:	6003      	str	r3, [r0, #0]
 8000182:	4770      	bx	lr

08000184 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000184:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000186:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000188:	f1b5 3fff 	cmp.w	r5, #4294967295
 800018c:	d002      	beq.n	8000194 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800018e:	f100 0208 	add.w	r2, r0, #8
 8000192:	e002      	b.n	800019a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8000194:	6902      	ldr	r2, [r0, #16]
 8000196:	e004      	b.n	80001a2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000198:	461a      	mov	r2, r3
 800019a:	6853      	ldr	r3, [r2, #4]
 800019c:	681c      	ldr	r4, [r3, #0]
 800019e:	42a5      	cmp	r5, r4
 80001a0:	d2fa      	bcs.n	8000198 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80001a2:	6853      	ldr	r3, [r2, #4]
 80001a4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80001a6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80001a8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80001aa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80001ac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80001ae:	6803      	ldr	r3, [r0, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	6003      	str	r3, [r0, #0]
}
 80001b4:	bc30      	pop	{r4, r5}
 80001b6:	4770      	bx	lr

080001b8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80001b8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001ba:	6842      	ldr	r2, [r0, #4]
 80001bc:	6881      	ldr	r1, [r0, #8]
 80001be:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c0:	6882      	ldr	r2, [r0, #8]
 80001c2:	6841      	ldr	r1, [r0, #4]
 80001c4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001c6:	685a      	ldr	r2, [r3, #4]
 80001c8:	4290      	cmp	r0, r2
 80001ca:	d006      	beq.n	80001da <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80001cc:	2200      	movs	r2, #0
 80001ce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	3a01      	subs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001da:	6882      	ldr	r2, [r0, #8]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	e7f5      	b.n	80001cc <uxListRemove+0x14>

080001e0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80001e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <prvTaskExitError+0x3c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ee:	d008      	beq.n	8000202 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80001f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001f4:	f383 8811 	msr	BASEPRI, r3
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f3bf 8f4f 	dsb	sy
 8000200:	e7fe      	b.n	8000200 <prvTaskExitError+0x20>
 8000202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000206:	f383 8811 	msr	BASEPRI, r3
 800020a:	f3bf 8f6f 	isb	sy
 800020e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000212:	9b01      	ldr	r3, [sp, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d0fc      	beq.n	8000212 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000218:	b002      	add	sp, #8
 800021a:	4770      	bx	lr
 800021c:	20000000 	.word	0x20000000

08000220 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <prvPortStartFirstTask+0x1c>)
 8000222:	6800      	ldr	r0, [r0, #0]
 8000224:	6800      	ldr	r0, [r0, #0]
 8000226:	f380 8808 	msr	MSP, r0
 800022a:	b662      	cpsie	i
 800022c:	b661      	cpsie	f
 800022e:	f3bf 8f4f 	dsb	sy
 8000232:	f3bf 8f6f 	isb	sy
 8000236:	df00      	svc	0
 8000238:	bf00      	nop
 800023a:	0000      	.short	0x0000
 800023c:	e000ed08 	.word	0xe000ed08

08000240 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000244:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000248:	f021 0101 	bic.w	r1, r1, #1
 800024c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <pxPortInitialiseStack+0x20>)
 8000252:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000256:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800025a:	3840      	subs	r0, #64	; 0x40
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	080001e1 	.word	0x080001e1
	...

08000270 <SVC_Handler>:
	__asm volatile (
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <pxCurrentTCBConst2>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	6808      	ldr	r0, [r1, #0]
 8000276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800027a:	f380 8809 	msr	PSP, r0
 800027e:	f3bf 8f6f 	isb	sy
 8000282:	f04f 0000 	mov.w	r0, #0
 8000286:	f380 8811 	msr	BASEPRI, r0
 800028a:	f04e 0e0d 	orr.w	lr, lr, #13
 800028e:	4770      	bx	lr

08000290 <pxCurrentTCBConst2>:
 8000290:	20000030 	.word	0x20000030

08000294 <vPortEnterCritical>:
 8000294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000298:	f383 8811 	msr	BASEPRI, r3
 800029c:	f3bf 8f6f 	isb	sy
 80002a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <vPortEnterCritical+0x3c>)
 80002a6:	6813      	ldr	r3, [r2, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d10d      	bne.n	80002cc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <vPortEnterCritical+0x40>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80002b8:	d008      	beq.n	80002cc <vPortEnterCritical+0x38>
 80002ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002be:	f383 8811 	msr	BASEPRI, r3
 80002c2:	f3bf 8f6f 	isb	sy
 80002c6:	f3bf 8f4f 	dsb	sy
 80002ca:	e7fe      	b.n	80002ca <vPortEnterCritical+0x36>
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <vPortExitCritical+0x28>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	b943      	cbnz	r3, 80002f0 <vPortExitCritical+0x18>
 80002de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e2:	f383 8811 	msr	BASEPRI, r3
 80002e6:	f3bf 8f6f 	isb	sy
 80002ea:	f3bf 8f4f 	dsb	sy
 80002ee:	e7fe      	b.n	80002ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a03      	ldr	r2, [pc, #12]	; (8000300 <vPortExitCritical+0x28>)
 80002f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80002f6:	b90b      	cbnz	r3, 80002fc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002f8:	f383 8811 	msr	BASEPRI, r3
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000000 	.word	0x20000000
	...

08000310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000310:	f3ef 8009 	mrs	r0, PSP
 8000314:	f3bf 8f6f 	isb	sy
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <pxCurrentTCBConst>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000320:	6010      	str	r0, [r2, #0]
 8000322:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000326:	f04f 0050 	mov.w	r0, #80	; 0x50
 800032a:	f380 8811 	msr	BASEPRI, r0
 800032e:	f000 fe11 	bl	8000f54 <vTaskSwitchContext>
 8000332:	f04f 0000 	mov.w	r0, #0
 8000336:	f380 8811 	msr	BASEPRI, r0
 800033a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	6808      	ldr	r0, [r1, #0]
 8000342:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000346:	f380 8809 	msr	PSP, r0
 800034a:	f3bf 8f6f 	isb	sy
 800034e:	4770      	bx	lr

08000350 <pxCurrentTCBConst>:
 8000350:	20000030 	.word	0x20000030

08000354 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000354:	b508      	push	{r3, lr}
	__asm volatile
 8000356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035a:	f383 8811 	msr	BASEPRI, r3
 800035e:	f3bf 8f6f 	isb	sy
 8000362:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000366:	f000 fccf 	bl	8000d08 <xTaskIncrementTick>
 800036a:	b118      	cbz	r0, 8000374 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800036c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000370:	4b02      	ldr	r3, [pc, #8]	; (800037c <SysTick_Handler+0x28>)
 8000372:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000374:	2300      	movs	r3, #0
 8000376:	f383 8811 	msr	BASEPRI, r3
 800037a:	bd08      	pop	{r3, pc}
 800037c:	e000ed04 	.word	0xe000ed04

08000380 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <vPortSetupTimerInterrupt+0x24>)
 8000382:	2300      	movs	r3, #0
 8000384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000386:	4908      	ldr	r1, [pc, #32]	; (80003a8 <vPortSetupTimerInterrupt+0x28>)
 8000388:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <vPortSetupTimerInterrupt+0x2c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4908      	ldr	r1, [pc, #32]	; (80003b0 <vPortSetupTimerInterrupt+0x30>)
 8000390:	fba1 1303 	umull	r1, r3, r1, r3
 8000394:	099b      	lsrs	r3, r3, #6
 8000396:	3b01      	subs	r3, #1
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <vPortSetupTimerInterrupt+0x34>)
 800039a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800039c:	2307      	movs	r3, #7
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010
 80003a8:	e000e018 	.word	0xe000e018
 80003ac:	20000008 	.word	0x20000008
 80003b0:	10624dd3 	.word	0x10624dd3
 80003b4:	e000e014 	.word	0xe000e014

080003b8 <xPortStartScheduler>:
{
 80003b8:	b510      	push	{r4, lr}
 80003ba:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <xPortStartScheduler+0xa4>)
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80003c4:	22ff      	movs	r2, #255	; 0xff
 80003c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80003d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80003d8:	4a21      	ldr	r2, [pc, #132]	; (8000460 <xPortStartScheduler+0xa8>)
 80003da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80003dc:	2207      	movs	r2, #7
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <xPortStartScheduler+0xac>)
 80003e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003e2:	e009      	b.n	80003f8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80003e4:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <xPortStartScheduler+0xac>)
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80003ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000400:	d1f0      	bne.n	80003e4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <xPortStartScheduler+0xac>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b03      	cmp	r3, #3
 8000408:	d008      	beq.n	800041c <xPortStartScheduler+0x64>
	__asm volatile
 800040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800040e:	f383 8811 	msr	BASEPRI, r3
 8000412:	f3bf 8f6f 	isb	sy
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	e7fe      	b.n	800041a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800041c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800041e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000422:	4a10      	ldr	r2, [pc, #64]	; (8000464 <xPortStartScheduler+0xac>)
 8000424:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000426:	9b01      	ldr	r3, [sp, #4]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4a0c      	ldr	r2, [pc, #48]	; (800045c <xPortStartScheduler+0xa4>)
 800042c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <xPortStartScheduler+0xb0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000436:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800043e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8000440:	f7ff ff9e 	bl	8000380 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000444:	2400      	movs	r4, #0
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <xPortStartScheduler+0xb4>)
 8000448:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800044a:	f7ff fee9 	bl	8000220 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800044e:	f000 fd81 	bl	8000f54 <vTaskSwitchContext>
	prvTaskExitError();
 8000452:	f7ff fec5 	bl	80001e0 <prvTaskExitError>
}
 8000456:	4620      	mov	r0, r4
 8000458:	b002      	add	sp, #8
 800045a:	bd10      	pop	{r4, pc}
 800045c:	e000e400 	.word	0xe000e400
 8000460:	20000028 	.word	0x20000028
 8000464:	2000002c 	.word	0x2000002c
 8000468:	e000ed20 	.word	0xe000ed20
 800046c:	20000000 	.word	0x20000000

08000470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000470:	b510      	push	{r4, lr}
 8000472:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000474:	f7ff ff0e 	bl	8000294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000478:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800047a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800047c:	429a      	cmp	r2, r3
 800047e:	d004      	beq.n	800048a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8000480:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8000482:	f7ff ff29 	bl	80002d8 <vPortExitCritical>

	return xReturn;
}
 8000486:	4620      	mov	r0, r4
 8000488:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800048a:	2401      	movs	r4, #1
 800048c:	e7f9      	b.n	8000482 <prvIsQueueFull+0x12>

0800048e <prvIsQueueEmpty>:
{
 800048e:	b510      	push	{r4, lr}
 8000490:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8000492:	f7ff feff 	bl	8000294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000498:	b123      	cbz	r3, 80004a4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800049a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800049c:	f7ff ff1c 	bl	80002d8 <vPortExitCritical>
}
 80004a0:	4620      	mov	r0, r4
 80004a2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80004a4:	2401      	movs	r4, #1
 80004a6:	e7f9      	b.n	800049c <prvIsQueueEmpty+0xe>

080004a8 <prvCopyDataToQueue>:
{
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4604      	mov	r4, r0
 80004ac:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80004ae:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80004b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80004b2:	b94a      	cbnz	r2, 80004c8 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80004b4:	6803      	ldr	r3, [r0, #0]
 80004b6:	bb53      	cbnz	r3, 800050e <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80004b8:	6880      	ldr	r0, [r0, #8]
 80004ba:	f000 fea9 	bl	8001210 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	60a3      	str	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80004c2:	3501      	adds	r5, #1
 80004c4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80004c8:	b96e      	cbnz	r6, 80004e6 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80004ca:	6840      	ldr	r0, [r0, #4]
 80004cc:	f001 ff6a 	bl	80023a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80004d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004d2:	6863      	ldr	r3, [r4, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80004d8:	68a2      	ldr	r2, [r4, #8]
 80004da:	4293      	cmp	r3, r2
 80004dc:	d319      	bcc.n	8000512 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80004de:	6823      	ldr	r3, [r4, #0]
 80004e0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80004e2:	2000      	movs	r0, #0
 80004e4:	e7ed      	b.n	80004c2 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80004e6:	68c0      	ldr	r0, [r0, #12]
 80004e8:	f001 ff5c 	bl	80023a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80004ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004ee:	425b      	negs	r3, r3
 80004f0:	68e2      	ldr	r2, [r4, #12]
 80004f2:	441a      	add	r2, r3
 80004f4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80004f6:	6821      	ldr	r1, [r4, #0]
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d202      	bcs.n	8000502 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80004fc:	68a2      	ldr	r2, [r4, #8]
 80004fe:	4413      	add	r3, r2
 8000500:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8000502:	2e02      	cmp	r6, #2
 8000504:	d107      	bne.n	8000516 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000506:	b145      	cbz	r5, 800051a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8000508:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800050a:	2000      	movs	r0, #0
 800050c:	e7d9      	b.n	80004c2 <prvCopyDataToQueue+0x1a>
 800050e:	2000      	movs	r0, #0
 8000510:	e7d7      	b.n	80004c2 <prvCopyDataToQueue+0x1a>
 8000512:	2000      	movs	r0, #0
 8000514:	e7d5      	b.n	80004c2 <prvCopyDataToQueue+0x1a>
 8000516:	2000      	movs	r0, #0
 8000518:	e7d3      	b.n	80004c2 <prvCopyDataToQueue+0x1a>
 800051a:	2000      	movs	r0, #0
 800051c:	e7d1      	b.n	80004c2 <prvCopyDataToQueue+0x1a>

0800051e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800051e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000520:	b172      	cbz	r2, 8000540 <prvCopyDataFromQueue+0x22>
{
 8000522:	b510      	push	{r4, lr}
 8000524:	4603      	mov	r3, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000526:	68c4      	ldr	r4, [r0, #12]
 8000528:	4414      	add	r4, r2
 800052a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800052c:	6880      	ldr	r0, [r0, #8]
 800052e:	4284      	cmp	r4, r0
 8000530:	d301      	bcc.n	8000536 <prvCopyDataFromQueue+0x18>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	60d8      	str	r0, [r3, #12]
 8000536:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000538:	68d9      	ldr	r1, [r3, #12]
 800053a:	f001 ff33 	bl	80023a4 <memcpy>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	4770      	bx	lr

08000542 <prvUnlockQueue>:
{
 8000542:	b538      	push	{r3, r4, r5, lr}
 8000544:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8000546:	f7ff fea5 	bl	8000294 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800054a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800054e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000550:	e001      	b.n	8000556 <prvUnlockQueue+0x14>
			--cTxLock;
 8000552:	3c01      	subs	r4, #1
 8000554:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000556:	2c00      	cmp	r4, #0
 8000558:	dd0a      	ble.n	8000570 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800055a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800055c:	b143      	cbz	r3, 8000570 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800055e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8000562:	f000 fdbd 	bl	80010e0 <xTaskRemoveFromEventList>
 8000566:	2800      	cmp	r0, #0
 8000568:	d0f3      	beq.n	8000552 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800056a:	f000 fe4b 	bl	8001204 <vTaskMissedYield>
 800056e:	e7f0      	b.n	8000552 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8000570:	23ff      	movs	r3, #255	; 0xff
 8000572:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8000576:	f7ff feaf 	bl	80002d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800057a:	f7ff fe8b 	bl	8000294 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800057e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8000582:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000584:	e001      	b.n	800058a <prvUnlockQueue+0x48>
				--cRxLock;
 8000586:	3c01      	subs	r4, #1
 8000588:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800058a:	2c00      	cmp	r4, #0
 800058c:	dd0a      	ble.n	80005a4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800058e:	692b      	ldr	r3, [r5, #16]
 8000590:	b143      	cbz	r3, 80005a4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000592:	f105 0010 	add.w	r0, r5, #16
 8000596:	f000 fda3 	bl	80010e0 <xTaskRemoveFromEventList>
 800059a:	2800      	cmp	r0, #0
 800059c:	d0f3      	beq.n	8000586 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800059e:	f000 fe31 	bl	8001204 <vTaskMissedYield>
 80005a2:	e7f0      	b.n	8000586 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80005a4:	23ff      	movs	r3, #255	; 0xff
 80005a6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80005aa:	f7ff fe95 	bl	80002d8 <vPortExitCritical>
 80005ae:	bd38      	pop	{r3, r4, r5, pc}

080005b0 <xQueueGenericReset>:
{
 80005b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80005b2:	b330      	cbz	r0, 8000602 <xQueueGenericReset+0x52>
 80005b4:	4604      	mov	r4, r0
 80005b6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80005b8:	f7ff fe6c 	bl	8000294 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005bc:	6821      	ldr	r1, [r4, #0]
 80005be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80005c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005c2:	fb03 1002 	mla	r0, r3, r2, r1
 80005c6:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80005c8:	2000      	movs	r0, #0
 80005ca:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80005cc:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005ce:	3a01      	subs	r2, #1
 80005d0:	fb02 1303 	mla	r3, r2, r3, r1
 80005d4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80005dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80005e0:	b9c5      	cbnz	r5, 8000614 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005e2:	6923      	ldr	r3, [r4, #16]
 80005e4:	b1f3      	cbz	r3, 8000624 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005e6:	f104 0010 	add.w	r0, r4, #16
 80005ea:	f000 fd79 	bl	80010e0 <xTaskRemoveFromEventList>
 80005ee:	b1c8      	cbz	r0, 8000624 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 80005f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <xQueueGenericReset+0x7c>)
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	e010      	b.n	8000624 <xQueueGenericReset+0x74>
 8000602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000606:	f383 8811 	msr	BASEPRI, r3
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	e7fe      	b.n	8000612 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000614:	f104 0010 	add.w	r0, r4, #16
 8000618:	f7ff fd9a 	bl	8000150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800061c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000620:	f7ff fd96 	bl	8000150 <vListInitialise>
	taskEXIT_CRITICAL();
 8000624:	f7ff fe58 	bl	80002d8 <vPortExitCritical>
}
 8000628:	2001      	movs	r0, #1
 800062a:	bd38      	pop	{r3, r4, r5, pc}
 800062c:	e000ed04 	.word	0xe000ed04

08000630 <prvInitialiseNewQueue>:
{
 8000630:	b510      	push	{r4, lr}
 8000632:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8000634:	460c      	mov	r4, r1
 8000636:	b939      	cbnz	r1, 8000648 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000638:	601b      	str	r3, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800063a:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800063c:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb5 	bl	80005b0 <xQueueGenericReset>
 8000646:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e7f6      	b.n	800063a <prvInitialiseNewQueue+0xa>

0800064c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800064c:	b940      	cbnz	r0, 8000660 <xQueueGenericCreateStatic+0x14>
 800064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000652:	f383 8811 	msr	BASEPRI, r3
 8000656:	f3bf 8f6f 	isb	sy
 800065a:	f3bf 8f4f 	dsb	sy
 800065e:	e7fe      	b.n	800065e <xQueueGenericCreateStatic+0x12>
	{
 8000660:	b510      	push	{r4, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8000666:	b163      	cbz	r3, 8000682 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000668:	b1a2      	cbz	r2, 8000694 <xQueueGenericCreateStatic+0x48>
 800066a:	b1a9      	cbz	r1, 8000698 <xQueueGenericCreateStatic+0x4c>
 800066c:	2001      	movs	r0, #1
 800066e:	b9a8      	cbnz	r0, 800069c <xQueueGenericCreateStatic+0x50>
 8000670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000674:	f383 8811 	msr	BASEPRI, r3
 8000678:	f3bf 8f6f 	isb	sy
 800067c:	f3bf 8f4f 	dsb	sy
 8000680:	e7fe      	b.n	8000680 <xQueueGenericCreateStatic+0x34>
 8000682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	e7fe      	b.n	8000692 <xQueueGenericCreateStatic+0x46>
 8000694:	2001      	movs	r0, #1
 8000696:	e7ea      	b.n	800066e <xQueueGenericCreateStatic+0x22>
 8000698:	2000      	movs	r0, #0
 800069a:	e7e8      	b.n	800066e <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800069c:	b90a      	cbnz	r2, 80006a2 <xQueueGenericCreateStatic+0x56>
 800069e:	b101      	cbz	r1, 80006a2 <xQueueGenericCreateStatic+0x56>
 80006a0:	2000      	movs	r0, #0
 80006a2:	b940      	cbnz	r0, 80006b6 <xQueueGenericCreateStatic+0x6a>
 80006a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a8:	f383 8811 	msr	BASEPRI, r3
 80006ac:	f3bf 8f6f 	isb	sy
 80006b0:	f3bf 8f4f 	dsb	sy
 80006b4:	e7fe      	b.n	80006b4 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80006b6:	2048      	movs	r0, #72	; 0x48
 80006b8:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80006ba:	9803      	ldr	r0, [sp, #12]
 80006bc:	2848      	cmp	r0, #72	; 0x48
 80006be:	d008      	beq.n	80006d2 <xQueueGenericCreateStatic+0x86>
 80006c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c4:	f383 8811 	msr	BASEPRI, r3
 80006c8:	f3bf 8f6f 	isb	sy
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	e7fe      	b.n	80006d0 <xQueueGenericCreateStatic+0x84>
 80006d2:	4620      	mov	r0, r4
 80006d4:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80006d6:	9b03      	ldr	r3, [sp, #12]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80006d8:	9400      	str	r4, [sp, #0]
 80006da:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80006de:	f7ff ffa7 	bl	8000630 <prvInitialiseNewQueue>
	}
 80006e2:	4620      	mov	r0, r4
 80006e4:	b004      	add	sp, #16
 80006e6:	bd10      	pop	{r4, pc}

080006e8 <xQueueGenericSend>:
{
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80006ee:	b160      	cbz	r0, 800070a <xQueueGenericSend+0x22>
 80006f0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006f2:	b199      	cbz	r1, 800071c <xQueueGenericSend+0x34>
 80006f4:	2201      	movs	r2, #1
 80006f6:	b9ba      	cbnz	r2, 8000728 <xQueueGenericSend+0x40>
 80006f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fc:	f383 8811 	msr	BASEPRI, r3
 8000700:	f3bf 8f6f 	isb	sy
 8000704:	f3bf 8f4f 	dsb	sy
 8000708:	e7fe      	b.n	8000708 <xQueueGenericSend+0x20>
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	e7fe      	b.n	800071a <xQueueGenericSend+0x32>
 800071c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800071e:	b90a      	cbnz	r2, 8000724 <xQueueGenericSend+0x3c>
 8000720:	2201      	movs	r2, #1
 8000722:	e7e8      	b.n	80006f6 <xQueueGenericSend+0xe>
 8000724:	2200      	movs	r2, #0
 8000726:	e7e6      	b.n	80006f6 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000728:	2b02      	cmp	r3, #2
 800072a:	d009      	beq.n	8000740 <xQueueGenericSend+0x58>
 800072c:	b96a      	cbnz	r2, 800074a <xQueueGenericSend+0x62>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	e7fe      	b.n	800073e <xQueueGenericSend+0x56>
 8000740:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000742:	2801      	cmp	r0, #1
 8000744:	d0f2      	beq.n	800072c <xQueueGenericSend+0x44>
 8000746:	2200      	movs	r2, #0
 8000748:	e7f0      	b.n	800072c <xQueueGenericSend+0x44>
 800074a:	461d      	mov	r5, r3
 800074c:	460e      	mov	r6, r1
 800074e:	2700      	movs	r7, #0
 8000750:	e039      	b.n	80007c6 <xQueueGenericSend+0xde>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000752:	462a      	mov	r2, r5
 8000754:	4631      	mov	r1, r6
 8000756:	4620      	mov	r0, r4
 8000758:	f7ff fea6 	bl	80004a8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800075c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800075e:	b18b      	cbz	r3, 8000784 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000760:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000764:	f000 fcbc 	bl	80010e0 <xTaskRemoveFromEventList>
 8000768:	b138      	cbz	r0, 800077a <xQueueGenericSend+0x92>
							queueYIELD_IF_USING_PREEMPTION();
 800076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076e:	4b39      	ldr	r3, [pc, #228]	; (8000854 <xQueueGenericSend+0x16c>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	f3bf 8f4f 	dsb	sy
 8000776:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800077a:	f7ff fdad 	bl	80002d8 <vPortExitCritical>
				return pdPASS;
 800077e:	2001      	movs	r0, #1
}
 8000780:	b005      	add	sp, #20
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8000784:	2800      	cmp	r0, #0
 8000786:	d0f8      	beq.n	800077a <xQueueGenericSend+0x92>
						queueYIELD_IF_USING_PREEMPTION();
 8000788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <xQueueGenericSend+0x16c>)
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	f3bf 8f6f 	isb	sy
 8000798:	e7ef      	b.n	800077a <xQueueGenericSend+0x92>
					taskEXIT_CRITICAL();
 800079a:	f7ff fd9d 	bl	80002d8 <vPortExitCritical>
					return errQUEUE_FULL;
 800079e:	2000      	movs	r0, #0
 80007a0:	e7ee      	b.n	8000780 <xQueueGenericSend+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80007a2:	a802      	add	r0, sp, #8
 80007a4:	f000 fce2 	bl	800116c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80007a8:	2701      	movs	r7, #1
 80007aa:	e019      	b.n	80007e0 <xQueueGenericSend+0xf8>
		prvLockQueue( pxQueue );
 80007ac:	2300      	movs	r3, #0
 80007ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80007b2:	e021      	b.n	80007f8 <xQueueGenericSend+0x110>
 80007b4:	2300      	movs	r3, #0
 80007b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80007ba:	e023      	b.n	8000804 <xQueueGenericSend+0x11c>
				prvUnlockQueue( pxQueue );
 80007bc:	4620      	mov	r0, r4
 80007be:	f7ff fec0 	bl	8000542 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80007c2:	f000 fb21 	bl	8000e08 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80007c6:	f7ff fd65 	bl	8000294 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80007ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d3bf      	bcc.n	8000752 <xQueueGenericSend+0x6a>
 80007d2:	2d02      	cmp	r5, #2
 80007d4:	d0bd      	beq.n	8000752 <xQueueGenericSend+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80007d6:	9b01      	ldr	r3, [sp, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0de      	beq.n	800079a <xQueueGenericSend+0xb2>
				else if( xEntryTimeSet == pdFALSE )
 80007dc:	2f00      	cmp	r7, #0
 80007de:	d0e0      	beq.n	80007a2 <xQueueGenericSend+0xba>
		taskEXIT_CRITICAL();
 80007e0:	f7ff fd7a 	bl	80002d8 <vPortExitCritical>
		vTaskSuspendAll();
 80007e4:	f000 fa88 	bl	8000cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80007e8:	f7ff fd54 	bl	8000294 <vPortEnterCritical>
 80007ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f6:	d0d9      	beq.n	80007ac <xQueueGenericSend+0xc4>
 80007f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000802:	d0d7      	beq.n	80007b4 <xQueueGenericSend+0xcc>
 8000804:	f7ff fd68 	bl	80002d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000808:	a901      	add	r1, sp, #4
 800080a:	a802      	add	r0, sp, #8
 800080c:	f000 fcba 	bl	8001184 <xTaskCheckForTimeOut>
 8000810:	b9c8      	cbnz	r0, 8000846 <xQueueGenericSend+0x15e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000812:	4620      	mov	r0, r4
 8000814:	f7ff fe2c 	bl	8000470 <prvIsQueueFull>
 8000818:	2800      	cmp	r0, #0
 800081a:	d0cf      	beq.n	80007bc <xQueueGenericSend+0xd4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800081c:	9901      	ldr	r1, [sp, #4]
 800081e:	f104 0010 	add.w	r0, r4, #16
 8000822:	f000 fc45 	bl	80010b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000826:	4620      	mov	r0, r4
 8000828:	f7ff fe8b 	bl	8000542 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800082c:	f000 faec 	bl	8000e08 <xTaskResumeAll>
 8000830:	2800      	cmp	r0, #0
 8000832:	d1c8      	bne.n	80007c6 <xQueueGenericSend+0xde>
					portYIELD_WITHIN_API();
 8000834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <xQueueGenericSend+0x16c>)
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	f3bf 8f6f 	isb	sy
 8000844:	e7bf      	b.n	80007c6 <xQueueGenericSend+0xde>
			prvUnlockQueue( pxQueue );
 8000846:	4620      	mov	r0, r4
 8000848:	f7ff fe7b 	bl	8000542 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800084c:	f000 fadc 	bl	8000e08 <xTaskResumeAll>
			return errQUEUE_FULL;
 8000850:	2000      	movs	r0, #0
 8000852:	e795      	b.n	8000780 <xQueueGenericSend+0x98>
 8000854:	e000ed04 	.word	0xe000ed04

08000858 <xQueueReceive>:
{
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800085e:	b160      	cbz	r0, 800087a <xQueueReceive+0x22>
 8000860:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000862:	b199      	cbz	r1, 800088c <xQueueReceive+0x34>
 8000864:	2301      	movs	r3, #1
 8000866:	b9bb      	cbnz	r3, 8000898 <xQueueReceive+0x40>
 8000868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086c:	f383 8811 	msr	BASEPRI, r3
 8000870:	f3bf 8f6f 	isb	sy
 8000874:	f3bf 8f4f 	dsb	sy
 8000878:	e7fe      	b.n	8000878 <xQueueReceive+0x20>
 800087a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087e:	f383 8811 	msr	BASEPRI, r3
 8000882:	f3bf 8f6f 	isb	sy
 8000886:	f3bf 8f4f 	dsb	sy
 800088a:	e7fe      	b.n	800088a <xQueueReceive+0x32>
 800088c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800088e:	b90b      	cbnz	r3, 8000894 <xQueueReceive+0x3c>
 8000890:	2301      	movs	r3, #1
 8000892:	e7e8      	b.n	8000866 <xQueueReceive+0xe>
 8000894:	2300      	movs	r3, #0
 8000896:	e7e6      	b.n	8000866 <xQueueReceive+0xe>
 8000898:	460e      	mov	r6, r1
 800089a:	2700      	movs	r7, #0
 800089c:	e03a      	b.n	8000914 <xQueueReceive+0xbc>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800089e:	4631      	mov	r1, r6
 80008a0:	4620      	mov	r0, r4
 80008a2:	f7ff fe3c 	bl	800051e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80008a6:	3d01      	subs	r5, #1
 80008a8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008aa:	6923      	ldr	r3, [r4, #16]
 80008ac:	b163      	cbz	r3, 80008c8 <xQueueReceive+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008ae:	f104 0010 	add.w	r0, r4, #16
 80008b2:	f000 fc15 	bl	80010e0 <xTaskRemoveFromEventList>
 80008b6:	b138      	cbz	r0, 80008c8 <xQueueReceive+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 80008b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008bc:	4b35      	ldr	r3, [pc, #212]	; (8000994 <xQueueReceive+0x13c>)
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	f3bf 8f4f 	dsb	sy
 80008c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80008c8:	f7ff fd06 	bl	80002d8 <vPortExitCritical>
				return pdPASS;
 80008cc:	2001      	movs	r0, #1
}
 80008ce:	b005      	add	sp, #20
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80008d2:	f7ff fd01 	bl	80002d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80008d6:	2000      	movs	r0, #0
 80008d8:	e7f9      	b.n	80008ce <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80008da:	a802      	add	r0, sp, #8
 80008dc:	f000 fc46 	bl	800116c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80008e0:	2701      	movs	r7, #1
 80008e2:	e021      	b.n	8000928 <xQueueReceive+0xd0>
		prvLockQueue( pxQueue );
 80008e4:	2300      	movs	r3, #0
 80008e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80008ea:	e029      	b.n	8000940 <xQueueReceive+0xe8>
 80008ec:	2300      	movs	r3, #0
 80008ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80008f2:	e02b      	b.n	800094c <xQueueReceive+0xf4>
				prvUnlockQueue( pxQueue );
 80008f4:	4620      	mov	r0, r4
 80008f6:	f7ff fe24 	bl	8000542 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80008fa:	f000 fa85 	bl	8000e08 <xTaskResumeAll>
 80008fe:	e009      	b.n	8000914 <xQueueReceive+0xbc>
			prvUnlockQueue( pxQueue );
 8000900:	4620      	mov	r0, r4
 8000902:	f7ff fe1e 	bl	8000542 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000906:	f000 fa7f 	bl	8000e08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800090a:	4620      	mov	r0, r4
 800090c:	f7ff fdbf 	bl	800048e <prvIsQueueEmpty>
 8000910:	2800      	cmp	r0, #0
 8000912:	d13d      	bne.n	8000990 <xQueueReceive+0x138>
		taskENTER_CRITICAL();
 8000914:	f7ff fcbe 	bl	8000294 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000918:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800091a:	2d00      	cmp	r5, #0
 800091c:	d1bf      	bne.n	800089e <xQueueReceive+0x46>
				if( xTicksToWait == ( TickType_t ) 0 )
 800091e:	9b01      	ldr	r3, [sp, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0d6      	beq.n	80008d2 <xQueueReceive+0x7a>
				else if( xEntryTimeSet == pdFALSE )
 8000924:	2f00      	cmp	r7, #0
 8000926:	d0d8      	beq.n	80008da <xQueueReceive+0x82>
		taskEXIT_CRITICAL();
 8000928:	f7ff fcd6 	bl	80002d8 <vPortExitCritical>
		vTaskSuspendAll();
 800092c:	f000 f9e4 	bl	8000cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000930:	f7ff fcb0 	bl	8000294 <vPortEnterCritical>
 8000934:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000938:	b25b      	sxtb	r3, r3
 800093a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093e:	d0d1      	beq.n	80008e4 <xQueueReceive+0x8c>
 8000940:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000944:	b25b      	sxtb	r3, r3
 8000946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094a:	d0cf      	beq.n	80008ec <xQueueReceive+0x94>
 800094c:	f7ff fcc4 	bl	80002d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000950:	a901      	add	r1, sp, #4
 8000952:	a802      	add	r0, sp, #8
 8000954:	f000 fc16 	bl	8001184 <xTaskCheckForTimeOut>
 8000958:	2800      	cmp	r0, #0
 800095a:	d1d1      	bne.n	8000900 <xQueueReceive+0xa8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800095c:	4620      	mov	r0, r4
 800095e:	f7ff fd96 	bl	800048e <prvIsQueueEmpty>
 8000962:	2800      	cmp	r0, #0
 8000964:	d0c6      	beq.n	80008f4 <xQueueReceive+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000966:	9901      	ldr	r1, [sp, #4]
 8000968:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800096c:	f000 fba0 	bl	80010b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000970:	4620      	mov	r0, r4
 8000972:	f7ff fde6 	bl	8000542 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000976:	f000 fa47 	bl	8000e08 <xTaskResumeAll>
 800097a:	2800      	cmp	r0, #0
 800097c:	d1ca      	bne.n	8000914 <xQueueReceive+0xbc>
					portYIELD_WITHIN_API();
 800097e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <xQueueReceive+0x13c>)
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	f3bf 8f4f 	dsb	sy
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	e7c1      	b.n	8000914 <xQueueReceive+0xbc>
				return errQUEUE_EMPTY;
 8000990:	2000      	movs	r0, #0
 8000992:	e79c      	b.n	80008ce <xQueueReceive+0x76>
 8000994:	e000ed04 	.word	0xe000ed04

08000998 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <prvIdleTask+0x1c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d9fb      	bls.n	8000998 <prvIdleTask>
			{
				taskYIELD();
 80009a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <prvIdleTask+0x20>)
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	f3bf 8f4f 	dsb	sy
 80009ac:	f3bf 8f6f 	isb	sy
 80009b0:	e7f2      	b.n	8000998 <prvIdleTask>
 80009b2:	bf00      	nop
 80009b4:	2000003c 	.word	0x2000003c
 80009b8:	e000ed04 	.word	0xe000ed04

080009bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <prvResetNextTaskUnblockTime+0x24>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	b13b      	cbz	r3, 80009d4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <prvResetNextTaskUnblockTime+0x24>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <prvResetNextTaskUnblockTime+0x28>)
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <prvResetNextTaskUnblockTime+0x28>)
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000034 	.word	0x20000034
 80009e4:	20000140 	.word	0x20000140

080009e8 <prvInitialiseNewTask>:
{
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	4681      	mov	r9, r0
 80009ee:	469a      	mov	sl, r3
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80009f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80009f8:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80009fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80009fe:	3a01      	subs	r2, #1
 8000a00:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000a04:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	d136      	bne.n	8000a7a <prvInitialiseNewTask+0x92>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000a12:	e00b      	b.n	8000a2c <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a14:	5cd0      	ldrb	r0, [r2, r3]
 8000a16:	18e1      	adds	r1, r4, r3
 8000a18:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8000a1c:	5cd1      	ldrb	r1, [r2, r3]
 8000a1e:	b111      	cbz	r1, 8000a26 <prvInitialiseNewTask+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a20:	3301      	adds	r3, #1
 8000a22:	2b09      	cmp	r3, #9
 8000a24:	d9f6      	bls.n	8000a14 <prvInitialiseNewTask+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a26:	2300      	movs	r3, #0
 8000a28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a2c:	2e09      	cmp	r6, #9
 8000a2e:	d900      	bls.n	8000a32 <prvInitialiseNewTask+0x4a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a30:	2609      	movs	r6, #9
	pxNewTCB->uxPriority = uxPriority;
 8000a32:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8000a34:	6426      	str	r6, [r4, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8000a36:	2500      	movs	r5, #0
 8000a38:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a3a:	1d20      	adds	r0, r4, #4
 8000a3c:	f7ff fb93 	bl	8000166 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a40:	f104 0018 	add.w	r0, r4, #24
 8000a44:	f7ff fb8f 	bl	8000166 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a48:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a4a:	f1c6 060a 	rsb	r6, r6, #10
 8000a4e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a50:	6264      	str	r4, [r4, #36]	; 0x24
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8000a52:	462b      	mov	r3, r5
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d913      	bls.n	8000a80 <prvInitialiseNewTask+0x98>
		pxNewTCB->ulNotifiedValue = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65e3      	str	r3, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000a5c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a60:	4652      	mov	r2, sl
 8000a62:	4649      	mov	r1, r9
 8000a64:	4638      	mov	r0, r7
 8000a66:	f7ff fbeb 	bl	8000240 <pxPortInitialiseStack>
 8000a6a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8000a6c:	f1b8 0f00 	cmp.w	r8, #0
 8000a70:	d001      	beq.n	8000a76 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a72:	f8c8 4000 	str.w	r4, [r8]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	460a      	mov	r2, r1
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e7d0      	b.n	8000a22 <prvInitialiseNewTask+0x3a>
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8000a80:	f103 0212 	add.w	r2, r3, #18
 8000a84:	2100      	movs	r1, #0
 8000a86:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	e7e2      	b.n	8000a54 <prvInitialiseNewTask+0x6c>
	...

08000a90 <prvInitialiseTaskLists>:
{
 8000a90:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a92:	2400      	movs	r4, #0
 8000a94:	2c09      	cmp	r4, #9
 8000a96:	d912      	bls.n	8000abe <prvInitialiseTaskLists+0x2e>
	vListInitialise( &xDelayedTaskList1 );
 8000a98:	4d0d      	ldr	r5, [pc, #52]	; (8000ad0 <prvInitialiseTaskLists+0x40>)
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	f7ff fb58 	bl	8000150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000aa0:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <prvInitialiseTaskLists+0x44>)
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f7ff fb54 	bl	8000150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <prvInitialiseTaskLists+0x48>)
 8000aaa:	f7ff fb51 	bl	8000150 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <prvInitialiseTaskLists+0x4c>)
 8000ab0:	f7ff fb4e 	bl	8000150 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <prvInitialiseTaskLists+0x50>)
 8000ab6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <prvInitialiseTaskLists+0x54>)
 8000aba:	601c      	str	r4, [r3, #0]
 8000abc:	bd38      	pop	{r3, r4, r5, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000abe:	2014      	movs	r0, #20
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <prvInitialiseTaskLists+0x58>)
 8000ac2:	fb00 3004 	mla	r0, r0, r4, r3
 8000ac6:	f7ff fb43 	bl	8000150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000aca:	3401      	adds	r4, #1
 8000acc:	e7e2      	b.n	8000a94 <prvInitialiseTaskLists+0x4>
 8000ace:	bf00      	nop
 8000ad0:	20000118 	.word	0x20000118
 8000ad4:	2000012c 	.word	0x2000012c
 8000ad8:	20000148 	.word	0x20000148
 8000adc:	20000160 	.word	0x20000160
 8000ae0:	20000034 	.word	0x20000034
 8000ae4:	20000038 	.word	0x20000038
 8000ae8:	2000003c 	.word	0x2000003c

08000aec <prvAddNewTaskToReadyList>:
{
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8000af0:	f7ff fbd0 	bl	8000294 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8000af4:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <prvAddNewTaskToReadyList+0x8c>)
 8000af6:	6813      	ldr	r3, [r2, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <prvAddNewTaskToReadyList+0x90>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d12c      	bne.n	8000b5e <prvAddNewTaskToReadyList+0x72>
			pxCurrentTCB = pxNewTCB;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <prvAddNewTaskToReadyList+0x90>)
 8000b06:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000b08:	6813      	ldr	r3, [r2, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d101      	bne.n	8000b12 <prvAddNewTaskToReadyList+0x26>
				prvInitialiseTaskLists();
 8000b0e:	f7ff ffbf 	bl	8000a90 <prvInitialiseTaskLists>
		uxTaskNumber++;
 8000b12:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <prvAddNewTaskToReadyList+0x94>)
 8000b14:	6813      	ldr	r3, [r2, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8000b1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <prvAddNewTaskToReadyList+0x98>)
 8000b1e:	6812      	ldr	r2, [r2, #0]
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d901      	bls.n	8000b28 <prvAddNewTaskToReadyList+0x3c>
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <prvAddNewTaskToReadyList+0x98>)
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	1d21      	adds	r1, r4, #4
 8000b2a:	2014      	movs	r0, #20
 8000b2c:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <prvAddNewTaskToReadyList+0x9c>)
 8000b2e:	fb00 2003 	mla	r0, r0, r3, r2
 8000b32:	f7ff fb1b 	bl	800016c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8000b36:	f7ff fbcf 	bl	80002d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <prvAddNewTaskToReadyList+0xa0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b16b      	cbz	r3, 8000b5c <prvAddNewTaskToReadyList+0x70>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <prvAddNewTaskToReadyList+0x90>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <prvAddNewTaskToReadyList+0x70>
			taskYIELD_IF_USING_PREEMPTION();
 8000b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <prvAddNewTaskToReadyList+0xa4>)
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	bd10      	pop	{r4, pc}
			if( xSchedulerRunning == pdFALSE )
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <prvAddNewTaskToReadyList+0xa0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1d5      	bne.n	8000b12 <prvAddNewTaskToReadyList+0x26>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <prvAddNewTaskToReadyList+0x90>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d8cf      	bhi.n	8000b12 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8000b72:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <prvAddNewTaskToReadyList+0x90>)
 8000b74:	601c      	str	r4, [r3, #0]
 8000b76:	e7cc      	b.n	8000b12 <prvAddNewTaskToReadyList+0x26>
 8000b78:	20000104 	.word	0x20000104
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000110 	.word	0x20000110
 8000b84:	20000114 	.word	0x20000114
 8000b88:	2000003c 	.word	0x2000003c
 8000b8c:	2000015c 	.word	0x2000015c
 8000b90:	e000ed04 	.word	0xe000ed04

08000b94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	4604      	mov	r4, r0
 8000b98:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <prvAddCurrentTaskToDelayedList+0x64>)
 8000b9c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <prvAddCurrentTaskToDelayedList+0x68>)
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	3004      	adds	r0, #4
 8000ba4:	f7ff fb08 	bl	80001b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000ba8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000bac:	d013      	beq.n	8000bd6 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8000bae:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <prvAddCurrentTaskToDelayedList+0x68>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8000bb6:	42a5      	cmp	r5, r4
 8000bb8:	d816      	bhi.n	8000be8 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <prvAddCurrentTaskToDelayedList+0x6c>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <prvAddCurrentTaskToDelayedList+0x68>)
 8000bc0:	6819      	ldr	r1, [r3, #0]
 8000bc2:	3104      	adds	r1, #4
 8000bc4:	f7ff fade 	bl	8000184 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <prvAddCurrentTaskToDelayedList+0x70>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d201      	bcs.n	8000bd4 <prvAddCurrentTaskToDelayedList+0x40>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <prvAddCurrentTaskToDelayedList+0x70>)
 8000bd2:	601c      	str	r4, [r3, #0]
 8000bd4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e9      	beq.n	8000bae <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <prvAddCurrentTaskToDelayedList+0x68>)
 8000bdc:	6819      	ldr	r1, [r3, #0]
 8000bde:	3104      	adds	r1, #4
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <prvAddCurrentTaskToDelayedList+0x74>)
 8000be2:	f7ff fac3 	bl	800016c <vListInsertEnd>
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <prvAddCurrentTaskToDelayedList+0x78>)
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <prvAddCurrentTaskToDelayedList+0x68>)
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	3104      	adds	r1, #4
 8000bf2:	f7ff fac7 	bl	8000184 <vListInsert>
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	20000174 	.word	0x20000174
 8000bfc:	20000030 	.word	0x20000030
 8000c00:	20000034 	.word	0x20000034
 8000c04:	20000140 	.word	0x20000140
 8000c08:	20000160 	.word	0x20000160
 8000c0c:	20000038 	.word	0x20000038

08000c10 <xTaskCreateStatic>:
	{
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000c16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8000c18:	b175      	cbz	r5, 8000c38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000c1a:	b1b4      	cbz	r4, 8000c4a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8000c1c:	2664      	movs	r6, #100	; 0x64
 8000c1e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000c20:	9e04      	ldr	r6, [sp, #16]
 8000c22:	2e64      	cmp	r6, #100	; 0x64
 8000c24:	d01a      	beq.n	8000c5c <xTaskCreateStatic+0x4c>
 8000c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2a:	f383 8811 	msr	BASEPRI, r3
 8000c2e:	f3bf 8f6f 	isb	sy
 8000c32:	f3bf 8f4f 	dsb	sy
 8000c36:	e7fe      	b.n	8000c36 <xTaskCreateStatic+0x26>
 8000c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3c:	f383 8811 	msr	BASEPRI, r3
 8000c40:	f3bf 8f6f 	isb	sy
 8000c44:	f3bf 8f4f 	dsb	sy
 8000c48:	e7fe      	b.n	8000c48 <xTaskCreateStatic+0x38>
 8000c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4e:	f383 8811 	msr	BASEPRI, r3
 8000c52:	f3bf 8f6f 	isb	sy
 8000c56:	f3bf 8f4f 	dsb	sy
 8000c5a:	e7fe      	b.n	8000c5a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000c5c:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000c5e:	6325      	str	r5, [r4, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000c60:	2500      	movs	r5, #0
 8000c62:	9503      	str	r5, [sp, #12]
 8000c64:	9402      	str	r4, [sp, #8]
 8000c66:	ad05      	add	r5, sp, #20
 8000c68:	9501      	str	r5, [sp, #4]
 8000c6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000c6c:	9500      	str	r5, [sp, #0]
 8000c6e:	f7ff febb 	bl	80009e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000c72:	4620      	mov	r0, r4
 8000c74:	f7ff ff3a 	bl	8000aec <prvAddNewTaskToReadyList>
	}
 8000c78:	9805      	ldr	r0, [sp, #20]
 8000c7a:	b006      	add	sp, #24
 8000c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c80 <vTaskStartScheduler>:
{
 8000c80:	b510      	push	{r4, lr}
 8000c82:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8000c84:	2400      	movs	r4, #0
 8000c86:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8000c88:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8000c8a:	aa07      	add	r2, sp, #28
 8000c8c:	a906      	add	r1, sp, #24
 8000c8e:	a805      	add	r0, sp, #20
 8000c90:	f000 fb3c 	bl	800130c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8000c94:	9b05      	ldr	r3, [sp, #20]
 8000c96:	9302      	str	r3, [sp, #8]
 8000c98:	9b06      	ldr	r3, [sp, #24]
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	9400      	str	r4, [sp, #0]
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	9a07      	ldr	r2, [sp, #28]
 8000ca2:	4910      	ldr	r1, [pc, #64]	; (8000ce4 <vTaskStartScheduler+0x64>)
 8000ca4:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <vTaskStartScheduler+0x68>)
 8000ca6:	f7ff ffb3 	bl	8000c10 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8000caa:	b118      	cbz	r0, 8000cb4 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8000cac:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 8000cae:	b91b      	cbnz	r3, 8000cb8 <vTaskStartScheduler+0x38>
}
 8000cb0:	b008      	add	sp, #32
 8000cb2:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e7fa      	b.n	8000cae <vTaskStartScheduler+0x2e>
 8000cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	f3bf 8f6f 	isb	sy
 8000cc4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <vTaskStartScheduler+0x6c>)
 8000cce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <vTaskStartScheduler+0x70>)
 8000cd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <vTaskStartScheduler+0x74>)
 8000cda:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8000cdc:	f7ff fb6c 	bl	80003b8 <xPortStartScheduler>
 8000ce0:	e7e6      	b.n	8000cb0 <vTaskStartScheduler+0x30>
 8000ce2:	bf00      	nop
 8000ce4:	080023f8 	.word	0x080023f8
 8000ce8:	08000999 	.word	0x08000999
 8000cec:	20000140 	.word	0x20000140
 8000cf0:	2000015c 	.word	0x2000015c
 8000cf4:	20000174 	.word	0x20000174

08000cf8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8000cf8:	4a02      	ldr	r2, [pc, #8]	; (8000d04 <vTaskSuspendAll+0xc>)
 8000cfa:	6813      	ldr	r3, [r2, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000010c 	.word	0x2000010c

08000d08 <xTaskIncrementTick>:
{
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d0a:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <xTaskIncrementTick+0xd4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d159      	bne.n	8000dc6 <xTaskIncrementTick+0xbe>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <xTaskIncrementTick+0xd8>)
 8000d14:	681c      	ldr	r4, [r3, #0]
 8000d16:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8000d18:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d1a:	b9c4      	cbnz	r4, 8000d4e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <xTaskIncrementTick+0xdc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b143      	cbz	r3, 8000d36 <xTaskIncrementTick+0x2e>
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	e7fe      	b.n	8000d34 <xTaskIncrementTick+0x2c>
 8000d36:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <xTaskIncrementTick+0xdc>)
 8000d38:	6811      	ldr	r1, [r2, #0]
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <xTaskIncrementTick+0xe0>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	6010      	str	r0, [r2, #0]
 8000d40:	6019      	str	r1, [r3, #0]
 8000d42:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <xTaskIncrementTick+0xe4>)
 8000d44:	6813      	ldr	r3, [r2, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	f7ff fe37 	bl	80009bc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <xTaskIncrementTick+0xe8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	429c      	cmp	r4, r3
 8000d54:	d22d      	bcs.n	8000db2 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 8000d56:	2600      	movs	r6, #0
 8000d58:	e03a      	b.n	8000dd0 <xTaskIncrementTick+0xc8>
							xSwitchRequired = pdTRUE;
 8000d5a:	2601      	movs	r6, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <xTaskIncrementTick+0xdc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	b343      	cbz	r3, 8000db6 <xTaskIncrementTick+0xae>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <xTaskIncrementTick+0xdc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d6c:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8000d6e:	429c      	cmp	r4, r3
 8000d70:	d326      	bcc.n	8000dc0 <xTaskIncrementTick+0xb8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d72:	1d2f      	adds	r7, r5, #4
 8000d74:	4638      	mov	r0, r7
 8000d76:	f7ff fa1f 	bl	80001b8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d7c:	b11b      	cbz	r3, 8000d86 <xTaskIncrementTick+0x7e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d7e:	f105 0018 	add.w	r0, r5, #24
 8000d82:	f7ff fa19 	bl	80001b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000d86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <xTaskIncrementTick+0xec>)
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d901      	bls.n	8000d94 <xTaskIncrementTick+0x8c>
 8000d90:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <xTaskIncrementTick+0xec>)
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d98:	009a      	lsls	r2, r3, #2
 8000d9a:	4639      	mov	r1, r7
 8000d9c:	4816      	ldr	r0, [pc, #88]	; (8000df8 <xTaskIncrementTick+0xf0>)
 8000d9e:	4410      	add	r0, r2
 8000da0:	f7ff f9e4 	bl	800016c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000da4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <xTaskIncrementTick+0xf4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d2d4      	bcs.n	8000d5a <xTaskIncrementTick+0x52>
 8000db0:	e7d4      	b.n	8000d5c <xTaskIncrementTick+0x54>
 8000db2:	2600      	movs	r6, #0
 8000db4:	e7d2      	b.n	8000d5c <xTaskIncrementTick+0x54>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000db6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <xTaskIncrementTick+0xe8>)
 8000dbc:	601a      	str	r2, [r3, #0]
					break;
 8000dbe:	e007      	b.n	8000dd0 <xTaskIncrementTick+0xc8>
						xNextTaskUnblockTime = xItemValue;
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <xTaskIncrementTick+0xe8>)
 8000dc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000dc4:	e004      	b.n	8000dd0 <xTaskIncrementTick+0xc8>
		++uxPendedTicks;
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <xTaskIncrementTick+0xf8>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8000dce:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <xTaskIncrementTick+0xfc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	b103      	cbz	r3, 8000dd8 <xTaskIncrementTick+0xd0>
			xSwitchRequired = pdTRUE;
 8000dd6:	2601      	movs	r6, #1
}
 8000dd8:	4630      	mov	r0, r6
 8000dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ddc:	2000010c 	.word	0x2000010c
 8000de0:	20000174 	.word	0x20000174
 8000de4:	20000034 	.word	0x20000034
 8000de8:	20000038 	.word	0x20000038
 8000dec:	20000144 	.word	0x20000144
 8000df0:	20000140 	.word	0x20000140
 8000df4:	20000114 	.word	0x20000114
 8000df8:	2000003c 	.word	0x2000003c
 8000dfc:	20000030 	.word	0x20000030
 8000e00:	20000108 	.word	0x20000108
 8000e04:	20000178 	.word	0x20000178

08000e08 <xTaskResumeAll>:
{
 8000e08:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8000e0a:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <xTaskResumeAll+0xd8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b943      	cbnz	r3, 8000e22 <xTaskResumeAll+0x1a>
 8000e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	f3bf 8f6f 	isb	sy
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	e7fe      	b.n	8000e20 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8000e22:	f7ff fa37 	bl	8000294 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <xTaskResumeAll+0xd8>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	3a01      	subs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d150      	bne.n	8000ed6 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <xTaskResumeAll+0xdc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	b923      	cbnz	r3, 8000e44 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8000e3a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8000e3c:	f7ff fa4c 	bl	80002d8 <vPortExitCritical>
}
 8000e40:	4620      	mov	r0, r4
 8000e42:	bd38      	pop	{r3, r4, r5, pc}
 8000e44:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <xTaskResumeAll+0xe0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b31b      	cbz	r3, 8000e94 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <xTaskResumeAll+0xe0>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e52:	f104 0018 	add.w	r0, r4, #24
 8000e56:	f7ff f9af 	bl	80001b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e5a:	1d25      	adds	r5, r4, #4
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	f7ff f9ab 	bl	80001b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000e62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e64:	4a21      	ldr	r2, [pc, #132]	; (8000eec <xTaskResumeAll+0xe4>)
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d901      	bls.n	8000e70 <xTaskResumeAll+0x68>
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <xTaskResumeAll+0xe4>)
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e74:	009a      	lsls	r2, r3, #2
 8000e76:	4629      	mov	r1, r5
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <xTaskResumeAll+0xe8>)
 8000e7a:	4410      	add	r0, r2
 8000e7c:	f7ff f976 	bl	800016c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <xTaskResumeAll+0xec>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3dc      	bcc.n	8000e46 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <xTaskResumeAll+0xf0>)
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e7d8      	b.n	8000e46 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8000e94:	b10c      	cbz	r4, 8000e9a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8000e96:	f7ff fd91 	bl	80009bc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <xTaskResumeAll+0xf4>)
 8000e9c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000e9e:	b974      	cbnz	r4, 8000ebe <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <xTaskResumeAll+0xf0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b1cb      	cbz	r3, 8000eda <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8000ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <xTaskResumeAll+0xf8>)
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	f3bf 8f4f 	dsb	sy
 8000eb2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8000eb6:	2401      	movs	r4, #1
 8000eb8:	e7c0      	b.n	8000e3c <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000eba:	3c01      	subs	r4, #1
 8000ebc:	d007      	beq.n	8000ece <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8000ebe:	f7ff ff23 	bl	8000d08 <xTaskIncrementTick>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d0f9      	beq.n	8000eba <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <xTaskResumeAll+0xf0>)
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	e7f5      	b.n	8000eba <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <xTaskResumeAll+0xf4>)
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e7e4      	b.n	8000ea0 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e7b0      	b.n	8000e3c <xTaskResumeAll+0x34>
 8000eda:	2400      	movs	r4, #0
 8000edc:	e7ae      	b.n	8000e3c <xTaskResumeAll+0x34>
 8000ede:	bf00      	nop
 8000ee0:	2000010c 	.word	0x2000010c
 8000ee4:	20000104 	.word	0x20000104
 8000ee8:	20000148 	.word	0x20000148
 8000eec:	20000114 	.word	0x20000114
 8000ef0:	2000003c 	.word	0x2000003c
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	20000178 	.word	0x20000178
 8000efc:	20000108 	.word	0x20000108
 8000f00:	e000ed04 	.word	0xe000ed04

08000f04 <vTaskDelay>:
	{
 8000f04:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000f06:	b1a8      	cbz	r0, 8000f34 <vTaskDelay+0x30>
 8000f08:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <vTaskDelay+0x48>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b143      	cbz	r3, 8000f22 <vTaskDelay+0x1e>
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	e7fe      	b.n	8000f20 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8000f22:	f7ff fee9 	bl	8000cf8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000f26:	2100      	movs	r1, #0
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f7ff fe33 	bl	8000b94 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8000f2e:	f7ff ff6b 	bl	8000e08 <xTaskResumeAll>
 8000f32:	e000      	b.n	8000f36 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8000f34:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8000f36:	b938      	cbnz	r0, 8000f48 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8000f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <vTaskDelay+0x4c>)
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000010c 	.word	0x2000010c
 8000f50:	e000ed04 	.word	0xe000ed04

08000f54 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <vTaskSwitchContext+0x84>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	b96b      	cbnz	r3, 8000f76 <vTaskSwitchContext+0x22>
		xYieldPending = pdFALSE;
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <vTaskSwitchContext+0x88>)
 8000f5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <vTaskSwitchContext+0x8c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000f68:	008a      	lsls	r2, r1, #2
 8000f6a:	491e      	ldr	r1, [pc, #120]	; (8000fe4 <vTaskSwitchContext+0x90>)
 8000f6c:	588a      	ldr	r2, [r1, r2]
 8000f6e:	b97a      	cbnz	r2, 8000f90 <vTaskSwitchContext+0x3c>
 8000f70:	b12b      	cbz	r3, 8000f7e <vTaskSwitchContext+0x2a>
 8000f72:	3b01      	subs	r3, #1
 8000f74:	e7f6      	b.n	8000f64 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8000f76:	2201      	movs	r2, #1
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <vTaskSwitchContext+0x88>)
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f82:	f383 8811 	msr	BASEPRI, r3
 8000f86:	f3bf 8f6f 	isb	sy
 8000f8a:	f3bf 8f4f 	dsb	sy
 8000f8e:	e7fe      	b.n	8000f8e <vTaskSwitchContext+0x3a>
{
 8000f90:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f92:	4608      	mov	r0, r1
 8000f94:	009a      	lsls	r2, r3, #2
 8000f96:	18d4      	adds	r4, r2, r3
 8000f98:	00a1      	lsls	r1, r4, #2
 8000f9a:	4401      	add	r1, r0
 8000f9c:	684c      	ldr	r4, [r1, #4]
 8000f9e:	6864      	ldr	r4, [r4, #4]
 8000fa0:	604c      	str	r4, [r1, #4]
 8000fa2:	441a      	add	r2, r3
 8000fa4:	0091      	lsls	r1, r2, #2
 8000fa6:	3108      	adds	r1, #8
 8000fa8:	4408      	add	r0, r1
 8000faa:	4284      	cmp	r4, r0
 8000fac:	d00c      	beq.n	8000fc8 <vTaskSwitchContext+0x74>
 8000fae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000fb2:	0091      	lsls	r1, r2, #2
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <vTaskSwitchContext+0x90>)
 8000fb6:	440a      	add	r2, r1
 8000fb8:	6852      	ldr	r2, [r2, #4]
 8000fba:	68d1      	ldr	r1, [r2, #12]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <vTaskSwitchContext+0x94>)
 8000fbe:	6011      	str	r1, [r2, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <vTaskSwitchContext+0x8c>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bc10      	pop	{r4}
 8000fc6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fc8:	6860      	ldr	r0, [r4, #4]
 8000fca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000fce:	0091      	lsls	r1, r2, #2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <vTaskSwitchContext+0x90>)
 8000fd2:	440a      	add	r2, r1
 8000fd4:	6050      	str	r0, [r2, #4]
 8000fd6:	e7ea      	b.n	8000fae <vTaskSwitchContext+0x5a>
 8000fd8:	2000010c 	.word	0x2000010c
 8000fdc:	20000178 	.word	0x20000178
 8000fe0:	20000114 	.word	0x20000114
 8000fe4:	2000003c 	.word	0x2000003c
 8000fe8:	20000030 	.word	0x20000030

08000fec <vTaskSuspend>:
	{
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8000ff0:	f7ff f950 	bl	8000294 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000ff4:	b1e4      	cbz	r4, 8001030 <vTaskSuspend+0x44>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ff6:	1d25      	adds	r5, r4, #4
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f7ff f8dd 	bl	80001b8 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001000:	b11b      	cbz	r3, 800100a <vTaskSuspend+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001002:	f104 0018 	add.w	r0, r4, #24
 8001006:	f7ff f8d7 	bl	80001b8 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800100a:	4629      	mov	r1, r5
 800100c:	4822      	ldr	r0, [pc, #136]	; (8001098 <vTaskSuspend+0xac>)
 800100e:	f7ff f8ad 	bl	800016c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001012:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00c      	beq.n	8001036 <vTaskSuspend+0x4a>
		taskEXIT_CRITICAL();
 800101c:	f7ff f95c 	bl	80002d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <vTaskSuspend+0xb0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b95b      	cbnz	r3, 800103e <vTaskSuspend+0x52>
		if( pxTCB == pxCurrentTCB )
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <vTaskSuspend+0xb4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429c      	cmp	r4, r3
 800102c:	d00e      	beq.n	800104c <vTaskSuspend+0x60>
 800102e:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <vTaskSuspend+0xb4>)
 8001032:	681c      	ldr	r4, [r3, #0]
 8001034:	e7df      	b.n	8000ff6 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001036:	2300      	movs	r3, #0
 8001038:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800103c:	e7ee      	b.n	800101c <vTaskSuspend+0x30>
			taskENTER_CRITICAL();
 800103e:	f7ff f929 	bl	8000294 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8001042:	f7ff fcbb 	bl	80009bc <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8001046:	f7ff f947 	bl	80002d8 <vPortExitCritical>
 800104a:	e7ec      	b.n	8001026 <vTaskSuspend+0x3a>
			if( xSchedulerRunning != pdFALSE )
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <vTaskSuspend+0xb0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b1a3      	cbz	r3, 800107c <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <vTaskSuspend+0xb8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b143      	cbz	r3, 800106a <vTaskSuspend+0x7e>
 8001058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105c:	f383 8811 	msr	BASEPRI, r3
 8001060:	f3bf 8f6f 	isb	sy
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	e7fe      	b.n	8001068 <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
 800106a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <vTaskSuspend+0xbc>)
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	f3bf 8f4f 	dsb	sy
 8001076:	f3bf 8f6f 	isb	sy
 800107a:	bd38      	pop	{r3, r4, r5, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <vTaskSuspend+0xac>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <vTaskSuspend+0xc0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d103      	bne.n	8001090 <vTaskSuspend+0xa4>
					pxCurrentTCB = NULL;
 8001088:	2200      	movs	r2, #0
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <vTaskSuspend+0xb4>)
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	bd38      	pop	{r3, r4, r5, pc}
					vTaskSwitchContext();
 8001090:	f7ff ff60 	bl	8000f54 <vTaskSwitchContext>
	}
 8001094:	e7cb      	b.n	800102e <vTaskSuspend+0x42>
 8001096:	bf00      	nop
 8001098:	20000160 	.word	0x20000160
 800109c:	2000015c 	.word	0x2000015c
 80010a0:	20000030 	.word	0x20000030
 80010a4:	2000010c 	.word	0x2000010c
 80010a8:	e000ed04 	.word	0xe000ed04
 80010ac:	20000104 	.word	0x20000104

080010b0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80010b0:	b940      	cbnz	r0, 80010c4 <vTaskPlaceOnEventList+0x14>
 80010b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b6:	f383 8811 	msr	BASEPRI, r3
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	e7fe      	b.n	80010c2 <vTaskPlaceOnEventList+0x12>
{
 80010c4:	b510      	push	{r4, lr}
 80010c6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <vTaskPlaceOnEventList+0x2c>)
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	3118      	adds	r1, #24
 80010ce:	f7ff f859 	bl	8000184 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80010d2:	2101      	movs	r1, #1
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff fd5d 	bl	8000b94 <prvAddCurrentTaskToDelayedList>
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	20000030 	.word	0x20000030

080010e0 <xTaskRemoveFromEventList>:
{
 80010e0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010e2:	68c3      	ldr	r3, [r0, #12]
 80010e4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80010e6:	b324      	cbz	r4, 8001132 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80010e8:	f104 0518 	add.w	r5, r4, #24
 80010ec:	4628      	mov	r0, r5
 80010ee:	f7ff f863 	bl	80001b8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <xTaskRemoveFromEventList+0x74>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	bb2b      	cbnz	r3, 8001144 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80010f8:	1d25      	adds	r5, r4, #4
 80010fa:	4628      	mov	r0, r5
 80010fc:	f7ff f85c 	bl	80001b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001102:	4a15      	ldr	r2, [pc, #84]	; (8001158 <xTaskRemoveFromEventList+0x78>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4293      	cmp	r3, r2
 8001108:	d901      	bls.n	800110e <xTaskRemoveFromEventList+0x2e>
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <xTaskRemoveFromEventList+0x78>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001112:	009a      	lsls	r2, r3, #2
 8001114:	4629      	mov	r1, r5
 8001116:	4811      	ldr	r0, [pc, #68]	; (800115c <xTaskRemoveFromEventList+0x7c>)
 8001118:	4410      	add	r0, r2
 800111a:	f7ff f827 	bl	800016c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800111e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <xTaskRemoveFromEventList+0x80>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	429a      	cmp	r2, r3
 8001128:	d911      	bls.n	800114e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800112a:	2001      	movs	r0, #1
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <xTaskRemoveFromEventList+0x84>)
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	bd38      	pop	{r3, r4, r5, pc}
 8001132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001136:	f383 8811 	msr	BASEPRI, r3
 800113a:	f3bf 8f6f 	isb	sy
 800113e:	f3bf 8f4f 	dsb	sy
 8001142:	e7fe      	b.n	8001142 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001144:	4629      	mov	r1, r5
 8001146:	4808      	ldr	r0, [pc, #32]	; (8001168 <xTaskRemoveFromEventList+0x88>)
 8001148:	f7ff f810 	bl	800016c <vListInsertEnd>
 800114c:	e7e7      	b.n	800111e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800114e:	2000      	movs	r0, #0
}
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop
 8001154:	2000010c 	.word	0x2000010c
 8001158:	20000114 	.word	0x20000114
 800115c:	2000003c 	.word	0x2000003c
 8001160:	20000030 	.word	0x20000030
 8001164:	20000178 	.word	0x20000178
 8001168:	20000148 	.word	0x20000148

0800116c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <vTaskInternalSetTimeOutState+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <vTaskInternalSetTimeOutState+0x14>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6043      	str	r3, [r0, #4]
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000144 	.word	0x20000144
 8001180:	20000174 	.word	0x20000174

08001184 <xTaskCheckForTimeOut>:
{
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8001186:	b1e0      	cbz	r0, 80011c2 <xTaskCheckForTimeOut+0x3e>
 8001188:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800118a:	b319      	cbz	r1, 80011d4 <xTaskCheckForTimeOut+0x50>
 800118c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800118e:	f7ff f881 	bl	8000294 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <xTaskCheckForTimeOut+0x78>)
 8001194:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001196:	6869      	ldr	r1, [r5, #4]
 8001198:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d028      	beq.n	80011f4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80011a2:	682f      	ldr	r7, [r5, #0]
 80011a4:	4e16      	ldr	r6, [pc, #88]	; (8001200 <xTaskCheckForTimeOut+0x7c>)
 80011a6:	6836      	ldr	r6, [r6, #0]
 80011a8:	42b7      	cmp	r7, r6
 80011aa:	d001      	beq.n	80011b0 <xTaskCheckForTimeOut+0x2c>
 80011ac:	4288      	cmp	r0, r1
 80011ae:	d223      	bcs.n	80011f8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d318      	bcc.n	80011e6 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80011b8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80011ba:	f7ff f88d 	bl	80002d8 <vPortExitCritical>
}
 80011be:	4620      	mov	r0, r4
 80011c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	f3bf 8f6f 	isb	sy
 80011ce:	f3bf 8f4f 	dsb	sy
 80011d2:	e7fe      	b.n	80011d2 <xTaskCheckForTimeOut+0x4e>
 80011d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d8:	f383 8811 	msr	BASEPRI, r3
 80011dc:	f3bf 8f6f 	isb	sy
 80011e0:	f3bf 8f4f 	dsb	sy
 80011e4:	e7fe      	b.n	80011e4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80011ea:	4628      	mov	r0, r5
 80011ec:	f7ff ffbe 	bl	800116c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80011f0:	2400      	movs	r4, #0
 80011f2:	e7e2      	b.n	80011ba <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
 80011f4:	2400      	movs	r4, #0
 80011f6:	e7e0      	b.n	80011ba <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 80011f8:	2401      	movs	r4, #1
 80011fa:	e7de      	b.n	80011ba <xTaskCheckForTimeOut+0x36>
 80011fc:	20000174 	.word	0x20000174
 8001200:	20000144 	.word	0x20000144

08001204 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8001204:	2201      	movs	r2, #1
 8001206:	4b01      	ldr	r3, [pc, #4]	; (800120c <vTaskMissedYield+0x8>)
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	4770      	bx	lr
 800120c:	20000178 	.word	0x20000178

08001210 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8001210:	2800      	cmp	r0, #0
 8001212:	d039      	beq.n	8001288 <xTaskPriorityDisinherit+0x78>
	{
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <xTaskPriorityDisinherit+0x84>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	4290      	cmp	r0, r2
 800121e:	d008      	beq.n	8001232 <xTaskPriorityDisinherit+0x22>
 8001220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	e7fe      	b.n	8001230 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8001232:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001234:	b942      	cbnz	r2, 8001248 <xTaskPriorityDisinherit+0x38>
 8001236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123a:	f383 8811 	msr	BASEPRI, r3
 800123e:	f3bf 8f6f 	isb	sy
 8001242:	f3bf 8f4f 	dsb	sy
 8001246:	e7fe      	b.n	8001246 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8001248:	3a01      	subs	r2, #1
 800124a:	6442      	str	r2, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800124c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800124e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001250:	4288      	cmp	r0, r1
 8001252:	d01b      	beq.n	800128c <xTaskPriorityDisinherit+0x7c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001254:	b9e2      	cbnz	r2, 8001290 <xTaskPriorityDisinherit+0x80>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001256:	1d25      	adds	r5, r4, #4
 8001258:	4628      	mov	r0, r5
 800125a:	f7fe ffad 	bl	80001b8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800125e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001260:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001262:	f1c3 020a 	rsb	r2, r3, #10
 8001266:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <xTaskPriorityDisinherit+0x88>)
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <xTaskPriorityDisinherit+0x64>
 8001270:	4a09      	ldr	r2, [pc, #36]	; (8001298 <xTaskPriorityDisinherit+0x88>)
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001278:	009a      	lsls	r2, r3, #2
 800127a:	4629      	mov	r1, r5
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <xTaskPriorityDisinherit+0x8c>)
 800127e:	4410      	add	r0, r2
 8001280:	f7fe ff74 	bl	800016c <vListInsertEnd>
					xReturn = pdTRUE;
 8001284:	2001      	movs	r0, #1
 8001286:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8001288:	2000      	movs	r0, #0
 800128a:	4770      	bx	lr
 800128c:	2000      	movs	r0, #0
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	2000      	movs	r0, #0
	}
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	20000030 	.word	0x20000030
 8001298:	20000114 	.word	0x20000114
 800129c:	2000003c 	.word	0x2000003c

080012a0 <app_run>:
		break;
	}
	return result;
}
void app_run(void)
{
 80012a0:	b500      	push	{lr}
 80012a2:	b085      	sub	sp, #20
    /* Create the task without using any dynamic memory allocation. */
    xTask1Handle = xTaskCreateStatic(
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <app_run+0x44>)
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <app_run+0x48>)
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	490d      	ldr	r1, [pc, #52]	; (80012ec <app_run+0x4c>)
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <app_run+0x50>)
 80012b8:	f7ff fcaa 	bl	8000c10 <xTaskCreateStatic>
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <app_run+0x54>)
 80012be:	6018      	str	r0, [r3, #0]
                  (void *) NULL,         /* Parameter passed into the task. */
                  TASK1_PRIORITY,        /* Priority at which the task is created. */
                  xTask1Stack,           /* Array to use as the task's stack. */
                  &xTask1Buffer);        /* Variable to hold the task's data structure. */
    /* Create the task without using any dynamic memory allocation. */
    xDecodificationTaskHandle = xTaskCreateStatic(
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <app_run+0x58>)
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <app_run+0x5c>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2302      	movs	r3, #2
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	490b      	ldr	r1, [pc, #44]	; (8001300 <app_run+0x60>)
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <app_run+0x64>)
 80012d4:	f7ff fc9c 	bl	8000c10 <xTaskCreateStatic>
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <app_run+0x68>)
 80012da:	6018      	str	r0, [r3, #0]
                  (void *) NULL,         /* Parameter passed into the task. */
				  DECODIFICATION_TASK_PRIORITY,        /* Priority at which the task is created. */
                  xDecodificationTaskStack,           /* Array to use as the task's stack. */
                  &xDecodificationTaskBuffer);        /* Variable to hold the task's data structure. */

    vTaskStartScheduler();
 80012dc:	f7ff fcd0 	bl	8000c80 <vTaskStartScheduler>
 80012e0:	e7fe      	b.n	80012e0 <app_run+0x40>
 80012e2:	bf00      	nop
 80012e4:	20000460 	.word	0x20000460
 80012e8:	200006c4 	.word	0x200006c4
 80012ec:	08002400 	.word	0x08002400
 80012f0:	080013fd 	.word	0x080013fd
 80012f4:	200003e4 	.word	0x200003e4
 80012f8:	200008c4 	.word	0x200008c4
 80012fc:	200004c4 	.word	0x200004c4
 8001300:	08002408 	.word	0x08002408
 8001304:	08001359 	.word	0x08001359
 8001308:	2000037c 	.word	0x2000037c

0800130c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <vApplicationGetIdleTaskMemory+0x10>)
 800130e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <vApplicationGetIdleTaskMemory+0x14>)
 8001312:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000380 	.word	0x20000380
 8001320:	2000017c 	.word	0x2000017c

08001324 <envia_dados_decodificador>:
QueueHandle_t decoderQueueHandle;

uint8_t dataReceived;

uint8_t envia_dados_decodificador(uint8_t dado)
{
 8001324:	b500      	push	{lr}
 8001326:	b083      	sub	sp, #12
 8001328:	f88d 0007 	strb.w	r0, [sp, #7]
	uint8_t result = FALSE;
	if(decoderQueueHandle != NULL){
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <envia_dados_decodificador+0x30>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	b158      	cbz	r0, 800134a <envia_dados_decodificador+0x26>
		if(xQueueSend(decoderQueueHandle,(void *)&dado,(TickType_t)0) == pdTRUE){
 8001332:	2300      	movs	r3, #0
 8001334:	461a      	mov	r2, r3
 8001336:	f10d 0107 	add.w	r1, sp, #7
 800133a:	f7ff f9d5 	bl	80006e8 <xQueueGenericSend>
 800133e:	2801      	cmp	r0, #1
 8001340:	d005      	beq.n	800134e <envia_dados_decodificador+0x2a>
	uint8_t result = FALSE;
 8001342:	2000      	movs	r0, #0
			result = TRUE;
		}
	}
	return result;
}
 8001344:	b003      	add	sp, #12
 8001346:	f85d fb04 	ldr.w	pc, [sp], #4
	uint8_t result = FALSE;
 800134a:	2000      	movs	r0, #0
 800134c:	e7fa      	b.n	8001344 <envia_dados_decodificador+0x20>
			result = TRUE;
 800134e:	2001      	movs	r0, #1
 8001350:	e7f8      	b.n	8001344 <envia_dados_decodificador+0x20>
 8001352:	bf00      	nop
 8001354:	20000a34 	.word	0x20000a34

08001358 <decodification_task>:
void decodification_task(void *args)
{
 8001358:	b500      	push	{lr}
 800135a:	b083      	sub	sp, #12
    /* Create a queue capable of containing 10 uint8_t values. */
	decoderQueueHandle = xQueueCreateStatic( DECODER_QUEUE_LENGTH,
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <decodification_task+0x84>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <decodification_task+0x88>)
 8001364:	2101      	movs	r1, #1
 8001366:	200a      	movs	r0, #10
 8001368:	f7ff f970 	bl	800064c <xQueueGenericCreateStatic>
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <decodification_task+0x8c>)
 800136e:	6018      	str	r0, [r3, #0]
											 DECODER_ITEM_SIZE,
											 decoderQueueStorageArea,
											 &decoderStaticQueue );
    /* decoderQueueStorageArea was not NULL so decoderQueueHandle should not be NULL. */
    configASSERT( decoderQueueHandle );
 8001370:	b958      	cbnz	r0, 800138a <decodification_task+0x32>
 8001372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001376:	f383 8811 	msr	BASEPRI, r3
 800137a:	f3bf 8f6f 	isb	sy
 800137e:	f3bf 8f4f 	dsb	sy
 8001382:	e7fe      	b.n	8001382 <decodification_task+0x2a>
                        30,
                        30,
                        20);
            }
	    }
        vTaskDelay(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f7ff fdbd 	bl	8000f04 <vTaskDelay>
	    if(xQueueReceive(decoderQueueHandle,&dataReceived,(TickType_t)10) == pdTRUE){
 800138a:	220a      	movs	r2, #10
 800138c:	4916      	ldr	r1, [pc, #88]	; (80013e8 <decodification_task+0x90>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <decodification_task+0x8c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f7ff fa61 	bl	8000858 <xQueueReceive>
 8001396:	2801      	cmp	r0, #1
 8001398:	d1f4      	bne.n	8001384 <decodification_task+0x2c>
            exec_decodificador_avirede(dataReceived);
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <decodification_task+0x90>)
 800139c:	7818      	ldrb	r0, [r3, #0]
 800139e:	f000 f949 	bl	8001634 <exec_decodificador_avirede>
            if(frame_decodificado() == TRUE){
 80013a2:	f000 f941 	bl	8001628 <frame_decodificado>
 80013a6:	2801      	cmp	r0, #1
 80013a8:	d1ec      	bne.n	8001384 <decodification_task+0x2c>
                modeloDecodificado = recebe_modelo_frame();
 80013aa:	f000 f91f 	bl	80015ec <recebe_modelo_frame>
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <decodification_task+0x94>)
 80013b0:	7018      	strb	r0, [r3, #0]
                idDecodificado = recebe_id_frame();
 80013b2:	f000 f921 	bl	80015f8 <recebe_id_frame>
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <decodification_task+0x98>)
 80013b8:	7018      	strb	r0, [r3, #0]
                nDadosDecodificado = recebe_dados_frame((uint8_t *)dadosDecodificados);
 80013ba:	480e      	ldr	r0, [pc, #56]	; (80013f4 <decodification_task+0x9c>)
 80013bc:	f000 f922 	bl	8001604 <recebe_dados_frame>
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <decodification_task+0xa0>)
 80013c2:	7018      	strb	r0, [r3, #0]
                bsp_led_requisita(
 80013c4:	2314      	movs	r3, #20
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	231e      	movs	r3, #30
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013d0:	4611      	mov	r1, r2
 80013d2:	2002      	movs	r0, #2
 80013d4:	f000 f82c 	bl	8001430 <bsp_led_requisita>
 80013d8:	e7d4      	b.n	8001384 <decodification_task+0x2c>
 80013da:	bf00      	nop
 80013dc:	200003e8 	.word	0x200003e8
 80013e0:	20000928 	.word	0x20000928
 80013e4:	20000a34 	.word	0x20000a34
 80013e8:	20000a33 	.word	0x20000a33
 80013ec:	20000431 	.word	0x20000431
 80013f0:	20000430 	.word	0x20000430
 80013f4:	20000934 	.word	0x20000934
 80013f8:	20000432 	.word	0x20000432

080013fc <task_1>:
 */
#include "task1.h"

TaskHandle_t taskToSuspend = NULL;
void task_1(void *args)
{
 80013fc:	b500      	push	{lr}
 80013fe:	b083      	sub	sp, #12
   while(1){
	    envia_dados_decodificador(12);
 8001400:	200c      	movs	r0, #12
 8001402:	f7ff ff8f 	bl	8001324 <envia_dados_decodificador>
        bsp_led_fsm_run();
 8001406:	f000 f869 	bl	80014dc <bsp_led_fsm_run>
        bsp_led_requisita(
 800140a:	2303      	movs	r3, #3
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2396      	movs	r3, #150	; 0x96
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	231e      	movs	r3, #30
 8001414:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001418:	4611      	mov	r1, r2
 800141a:	2001      	movs	r0, #1
 800141c:	f000 f808 	bl	8001430 <bsp_led_requisita>
                500,
                500,
                30,
                150,
                3);
        vTaskSuspend(taskToSuspend);
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <task_1+0x30>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f7ff fde2 	bl	8000fec <vTaskSuspend>
 8001428:	e7ea      	b.n	8001400 <task_1+0x4>
 800142a:	bf00      	nop
 800142c:	20000434 	.word	0x20000434

08001430 <bsp_led_requisita>:
        uint32_t atrasoAntes,
        uint32_t atrasoDepois,
        uint32_t tempoLigado,
        uint32_t tempoDesligado,
        uint8_t ciclos)
{
 8001430:	b430      	push	{r4, r5}
 8001432:	4605      	mov	r5, r0
    uint8_t resultado = FALSE;

    if(emFuncionamento == TRUE){
 8001434:	4c10      	ldr	r4, [pc, #64]	; (8001478 <bsp_led_requisita+0x48>)
 8001436:	7820      	ldrb	r0, [r4, #0]
 8001438:	2801      	cmp	r0, #1
 800143a:	d004      	beq.n	8001446 <bsp_led_requisita+0x16>
        if(prioridade > pPrioridade){
            resultado = TRUE;
        }
    }else{
        resultado = TRUE;
 800143c:	2001      	movs	r0, #1
    }

    if(resultado == TRUE){
 800143e:	2801      	cmp	r0, #1
 8001440:	d007      	beq.n	8001452 <bsp_led_requisita+0x22>

        emFuncionamento = TRUE;
    }

    return resultado;
}
 8001442:	bc30      	pop	{r4, r5}
 8001444:	4770      	bx	lr
        if(prioridade > pPrioridade){
 8001446:	4c0d      	ldr	r4, [pc, #52]	; (800147c <bsp_led_requisita+0x4c>)
 8001448:	7824      	ldrb	r4, [r4, #0]
 800144a:	42ac      	cmp	r4, r5
 800144c:	d3f7      	bcc.n	800143e <bsp_led_requisita+0xe>
    uint8_t resultado = FALSE;
 800144e:	2000      	movs	r0, #0
 8001450:	e7f5      	b.n	800143e <bsp_led_requisita+0xe>
        pPrioridade = prioridade;
 8001452:	4c0a      	ldr	r4, [pc, #40]	; (800147c <bsp_led_requisita+0x4c>)
 8001454:	7025      	strb	r5, [r4, #0]
        pAtrasoAntes = atrasoAntes;
 8001456:	4c0a      	ldr	r4, [pc, #40]	; (8001480 <bsp_led_requisita+0x50>)
 8001458:	6021      	str	r1, [r4, #0]
        pAtrasoDepois = atrasoDepois;
 800145a:	490a      	ldr	r1, [pc, #40]	; (8001484 <bsp_led_requisita+0x54>)
 800145c:	600a      	str	r2, [r1, #0]
        pTempoLigado = tempoLigado;
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <bsp_led_requisita+0x58>)
 8001460:	6013      	str	r3, [r2, #0]
        pTempoDesligado = tempoDesligado;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <bsp_led_requisita+0x5c>)
 8001464:	9a02      	ldr	r2, [sp, #8]
 8001466:	601a      	str	r2, [r3, #0]
        pCiclos = ciclos;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <bsp_led_requisita+0x60>)
 800146a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800146e:	701a      	strb	r2, [r3, #0]
        emFuncionamento = TRUE;
 8001470:	2201      	movs	r2, #1
 8001472:	4b01      	ldr	r3, [pc, #4]	; (8001478 <bsp_led_requisita+0x48>)
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e7e4      	b.n	8001442 <bsp_led_requisita+0x12>
 8001478:	20000438 	.word	0x20000438
 800147c:	20000449 	.word	0x20000449
 8001480:	20000440 	.word	0x20000440
 8001484:	20000444 	.word	0x20000444
 8001488:	20000450 	.word	0x20000450
 800148c:	2000044c 	.word	0x2000044c
 8001490:	20000448 	.word	0x20000448

08001494 <liga_led>:

uint32_t marcoDeTempo = 0;

void liga_led(void)
{
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 8001494:	4a02      	ldr	r2, [pc, #8]	; (80014a0 <liga_led+0xc>)
 8001496:	6913      	ldr	r3, [r2, #16]
 8001498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800149c:	6113      	str	r3, [r2, #16]
 800149e:	4770      	bx	lr
 80014a0:	40011000 	.word	0x40011000

080014a4 <desliga_led>:
}

void desliga_led(void)
{
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 80014a4:	4a02      	ldr	r2, [pc, #8]	; (80014b0 <desliga_led+0xc>)
 80014a6:	6913      	ldr	r3, [r2, #16]
 80014a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ac:	6113      	str	r3, [r2, #16]
 80014ae:	4770      	bx	lr
 80014b0:	40011000 	.word	0x40011000

080014b4 <configura_led>:
}

void configura_led(void)
{
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <configura_led+0x20>)
 80014b6:	6993      	ldr	r3, [r2, #24]
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	6193      	str	r3, [r2, #24]
    GPIOC->CRH &= ~(uint32_t)GPIO_CRH_CNF13;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <configura_led+0x24>)
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80014c6:	605a      	str	r2, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13_1;
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40011000 	.word	0x40011000

080014dc <bsp_led_fsm_run>:
}

void bsp_led_fsm_run(void)
{
 80014dc:	b508      	push	{r3, lr}
    switch(estado){
 80014de:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <bsp_led_fsm_run+0xf0>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	d86e      	bhi.n	80015c4 <bsp_led_fsm_run+0xe8>
 80014e6:	e8df f003 	tbb	[pc, r3]
 80014ea:	0a04      	.short	0x0a04
 80014ec:	3a2e2418 	.word	0x3a2e2418
 80014f0:	5e44      	.short	0x5e44
        case ESTADO_CONFIGURANDO:
        	configura_led();
 80014f2:	f7ff ffdf 	bl	80014b4 <configura_led>
            estado = ESTADO_AGUARDA_REQUISICAO;
 80014f6:	2201      	movs	r2, #1
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <bsp_led_fsm_run+0xf0>)
 80014fa:	701a      	strb	r2, [r3, #0]
            break;
 80014fc:	bd08      	pop	{r3, pc}

        case ESTADO_AGUARDA_REQUISICAO:
            if(emFuncionamento == TRUE){
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <bsp_led_fsm_run+0xf4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d161      	bne.n	80015ca <bsp_led_fsm_run+0xee>
                desliga_led();
 8001506:	f7ff ffcd 	bl	80014a4 <desliga_led>
                marcoDeTempo = get_current_time();
 800150a:	f000 f91f 	bl	800174c <get_current_time>
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 8001510:	6018      	str	r0, [r3, #0]
                estado = ESTADO_AGUARDA_T_ANTES;
 8001512:	2202      	movs	r2, #2
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <bsp_led_fsm_run+0xf0>)
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	bd08      	pop	{r3, pc}
            }
            break;

        case ESTADO_AGUARDA_T_ANTES:
            if(elapsed_time(marcoDeTempo) >= pAtrasoAntes){
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f000 f91b 	bl	8001758 <elapsed_time>
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <bsp_led_fsm_run+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4298      	cmp	r0, r3
 8001528:	d34f      	bcc.n	80015ca <bsp_led_fsm_run+0xee>
                estado = ESTADO_LIGAR_LED;
 800152a:	2203      	movs	r2, #3
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <bsp_led_fsm_run+0xf0>)
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	bd08      	pop	{r3, pc}
            }
            break;

        case ESTADO_LIGAR_LED:
            liga_led();
 8001532:	f7ff ffaf 	bl	8001494 <liga_led>
            marcoDeTempo = get_current_time();
 8001536:	f000 f909 	bl	800174c <get_current_time>
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 800153c:	6018      	str	r0, [r3, #0]
            estado = ESTADO_AGUARDA_T_LIGADO;
 800153e:	2204      	movs	r2, #4
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <bsp_led_fsm_run+0xf0>)
 8001542:	701a      	strb	r2, [r3, #0]
            break;
 8001544:	bd08      	pop	{r3, pc}

        case ESTADO_AGUARDA_T_LIGADO:
            if(elapsed_time(marcoDeTempo) >= pTempoLigado){
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f000 f905 	bl	8001758 <elapsed_time>
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <bsp_led_fsm_run+0x100>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4298      	cmp	r0, r3
 8001554:	d339      	bcc.n	80015ca <bsp_led_fsm_run+0xee>
                estado = ESTADO_DESLIGA_LED;
 8001556:	2205      	movs	r2, #5
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <bsp_led_fsm_run+0xf0>)
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	bd08      	pop	{r3, pc}
            }
            break;

        case ESTADO_DESLIGA_LED:
            desliga_led();
 800155e:	f7ff ffa1 	bl	80014a4 <desliga_led>
            marcoDeTempo = get_current_time();
 8001562:	f000 f8f3 	bl	800174c <get_current_time>
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 8001568:	6018      	str	r0, [r3, #0]
            estado = ESTADO_AGUARDA_T_DESLIGADO;
 800156a:	2206      	movs	r2, #6
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <bsp_led_fsm_run+0xf0>)
 800156e:	701a      	strb	r2, [r3, #0]
            break;
 8001570:	bd08      	pop	{r3, pc}

        case ESTADO_AGUARDA_T_DESLIGADO:
            if(elapsed_time(marcoDeTempo) >= pTempoDesligado){
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	f000 f8ef 	bl	8001758 <elapsed_time>
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <bsp_led_fsm_run+0x104>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4298      	cmp	r0, r3
 8001580:	d323      	bcc.n	80015ca <bsp_led_fsm_run+0xee>
                pCiclos--;
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <bsp_led_fsm_run+0x108>)
 8001584:	7813      	ldrb	r3, [r2, #0]
 8001586:	3b01      	subs	r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	7013      	strb	r3, [r2, #0]
                if(pCiclos > 0){
 800158c:	b11b      	cbz	r3, 8001596 <bsp_led_fsm_run+0xba>
                    estado = ESTADO_LIGAR_LED;
 800158e:	2203      	movs	r2, #3
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <bsp_led_fsm_run+0xf0>)
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	bd08      	pop	{r3, pc}
                }else{
                    marcoDeTempo = get_current_time();
 8001596:	f000 f8d9 	bl	800174c <get_current_time>
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 800159c:	6018      	str	r0, [r3, #0]
                    estado = ESTADO_AGUARDA_T_DEPOIS;
 800159e:	2207      	movs	r2, #7
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <bsp_led_fsm_run+0xf0>)
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	bd08      	pop	{r3, pc}
                }
            }
            break;

        case ESTADO_AGUARDA_T_DEPOIS:
            if(elapsed_time(marcoDeTempo) >= pAtrasoDepois){
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <bsp_led_fsm_run+0xf8>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f000 f8d5 	bl	8001758 <elapsed_time>
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <bsp_led_fsm_run+0x10c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4298      	cmp	r0, r3
 80015b4:	d309      	bcc.n	80015ca <bsp_led_fsm_run+0xee>
            	emFuncionamento = FALSE;
 80015b6:	2200      	movs	r2, #0
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <bsp_led_fsm_run+0xf4>)
 80015ba:	701a      	strb	r2, [r3, #0]
                estado = ESTADO_AGUARDA_REQUISICAO;
 80015bc:	2201      	movs	r2, #1
 80015be:	4b03      	ldr	r3, [pc, #12]	; (80015cc <bsp_led_fsm_run+0xf0>)
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	bd08      	pop	{r3, pc}
            }
            break;

        default:
            estado = ESTADO_CONFIGURANDO;
 80015c4:	2200      	movs	r2, #0
 80015c6:	4b01      	ldr	r3, [pc, #4]	; (80015cc <bsp_led_fsm_run+0xf0>)
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	bd08      	pop	{r3, pc}
 80015cc:	20000439 	.word	0x20000439
 80015d0:	20000438 	.word	0x20000438
 80015d4:	2000043c 	.word	0x2000043c
 80015d8:	20000440 	.word	0x20000440
 80015dc:	20000450 	.word	0x20000450
 80015e0:	2000044c 	.word	0x2000044c
 80015e4:	20000448 	.word	0x20000448
 80015e8:	20000444 	.word	0x20000444

080015ec <recebe_modelo_frame>:
uint8_t frameDecodificado = 0;

uint8_t recebe_modelo_frame(void)
{
    return modelo;
}
 80015ec:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <recebe_modelo_frame+0x8>)
 80015ee:	7818      	ldrb	r0, [r3, #0]
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	2000045a 	.word	0x2000045a

080015f8 <recebe_id_frame>:

uint8_t recebe_id_frame(void)
{
    return id;
}
 80015f8:	4b01      	ldr	r3, [pc, #4]	; (8001600 <recebe_id_frame+0x8>)
 80015fa:	7818      	ldrb	r0, [r3, #0]
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000459 	.word	0x20000459

08001604 <recebe_dados_frame>:

uint8_t recebe_dados_frame(uint8_t *pDados)
{
    uint8_t i;
    for(i=0;i<nDados;i++){
 8001604:	2300      	movs	r3, #0
 8001606:	e004      	b.n	8001612 <recebe_dados_frame+0xe>
        pDados[i] = dados[i];
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <recebe_dados_frame+0x1c>)
 800160a:	5cd2      	ldrb	r2, [r2, r3]
 800160c:	54c2      	strb	r2, [r0, r3]
    for(i=0;i<nDados;i++){
 800160e:	3301      	adds	r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <recebe_dados_frame+0x20>)
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	4293      	cmp	r3, r2
 8001618:	d3f6      	bcc.n	8001608 <recebe_dados_frame+0x4>
    }
    return nDados;
}
 800161a:	4610      	mov	r0, r2
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000a38 	.word	0x20000a38
 8001624:	2000045b 	.word	0x2000045b

08001628 <frame_decodificado>:

uint8_t frame_decodificado(void)
{
    return frameDecodificado;
}
 8001628:	4b01      	ldr	r3, [pc, #4]	; (8001630 <frame_decodificado+0x8>)
 800162a:	7818      	ldrb	r0, [r3, #0]
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000458 	.word	0x20000458

08001634 <exec_decodificador_avirede>:

void exec_decodificador_avirede(uint8_t dado)
{
    
    switch(estado){
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <exec_decodificador_avirede+0xe4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b07      	cmp	r3, #7
 800163a:	d868      	bhi.n	800170e <exec_decodificador_avirede+0xda>
 800163c:	e8df f003 	tbb	[pc, r3]
 8001640:	1d171104 	.word	0x1d171104
 8001644:	413b3526 	.word	0x413b3526
        case AGUARDA_INICIO_DE_FRAME:
            if(dado == 0xAA){
 8001648:	28aa      	cmp	r0, #170	; 0xaa
 800164a:	d003      	beq.n	8001654 <exec_decodificador_avirede+0x20>
                frameDecodificado = 0;
                estado = AGUARDA_MODELO;
            }else{
                frameDecodificado = 0;
 800164c:	2200      	movs	r2, #0
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <exec_decodificador_avirede+0xe8>)
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	4770      	bx	lr
                frameDecodificado = 0;
 8001654:	2200      	movs	r2, #0
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <exec_decodificador_avirede+0xe8>)
 8001658:	701a      	strb	r2, [r3, #0]
                estado = AGUARDA_MODELO;
 800165a:	2201      	movs	r2, #1
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <exec_decodificador_avirede+0xe4>)
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	4770      	bx	lr
            }
            break;
            
        case AGUARDA_MODELO:
            modelo = dado;
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <exec_decodificador_avirede+0xec>)
 8001664:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_ID;
 8001666:	2202      	movs	r2, #2
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <exec_decodificador_avirede+0xe4>)
 800166a:	701a      	strb	r2, [r3, #0]
            break;
 800166c:	4770      	bx	lr
            
        case AGUARDA_ID:
            id = dado;
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <exec_decodificador_avirede+0xf0>)
 8001670:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_NUMERO_DE_DADOS;
 8001672:	2203      	movs	r2, #3
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <exec_decodificador_avirede+0xe4>)
 8001676:	701a      	strb	r2, [r3, #0]
            break;
 8001678:	4770      	bx	lr
            
        case AGUARDA_NUMERO_DE_DADOS:
            nDados = dado;
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <exec_decodificador_avirede+0xf4>)
 800167c:	7018      	strb	r0, [r3, #0]
            dataCount = 0;
 800167e:	2200      	movs	r2, #0
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <exec_decodificador_avirede+0xf8>)
 8001682:	701a      	strb	r2, [r3, #0]
            estado = AGUARDA_DADOS;
 8001684:	2204      	movs	r2, #4
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <exec_decodificador_avirede+0xe4>)
 8001688:	701a      	strb	r2, [r3, #0]
            break;
 800168a:	4770      	bx	lr
            
        case AGUARDA_DADOS:
            dados[dataCount] = dado;
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <exec_decodificador_avirede+0xf8>)
 800168e:	7813      	ldrb	r3, [r2, #0]
 8001690:	4927      	ldr	r1, [pc, #156]	; (8001730 <exec_decodificador_avirede+0xfc>)
 8001692:	54c8      	strb	r0, [r1, r3]
            dataCount += 1;
 8001694:	3301      	adds	r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	7013      	strb	r3, [r2, #0]
            if(dataCount >= nDados){
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <exec_decodificador_avirede+0xf4>)
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4293      	cmp	r3, r2
 80016a0:	d338      	bcc.n	8001714 <exec_decodificador_avirede+0xe0>
                estado = AGUARDA_CHECKSUM_1;
 80016a2:	2205      	movs	r2, #5
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <exec_decodificador_avirede+0xe4>)
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	4770      	bx	lr
            }
            break;
            
        case AGUARDA_CHECKSUM_1:
            cks1 = dado;
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <exec_decodificador_avirede+0x100>)
 80016ac:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_CHECKSUM_2;
 80016ae:	2206      	movs	r2, #6
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <exec_decodificador_avirede+0xe4>)
 80016b2:	701a      	strb	r2, [r3, #0]
            break;
 80016b4:	4770      	bx	lr
            
        case AGUARDA_CHECKSUM_2:
            cks2 = dado;
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <exec_decodificador_avirede+0x104>)
 80016b8:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_FIM_DE_FRAME;
 80016ba:	2207      	movs	r2, #7
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <exec_decodificador_avirede+0xe4>)
 80016be:	701a      	strb	r2, [r3, #0]
            break;
 80016c0:	4770      	bx	lr
        
        case AGUARDA_FIM_DE_FRAME:
            if(dado == 0x55){
 80016c2:	2855      	cmp	r0, #85	; 0x55
 80016c4:	d003      	beq.n	80016ce <exec_decodificador_avirede+0x9a>
                }else{
                    estado = AGUARDA_INICIO_DE_FRAME;
                }
                
            }else{
                estado = AGUARDA_INICIO_DE_FRAME;
 80016c6:	2200      	movs	r2, #0
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <exec_decodificador_avirede+0xe4>)
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	4770      	bx	lr
                checksumRecebido = cks1;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <exec_decodificador_avirede+0x100>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
                checksumRecebido |= cks2;
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <exec_decodificador_avirede+0x104>)
 80016d4:	7810      	ldrb	r0, [r2, #0]
 80016d6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                for(i=0; i<nDados; i++){
 80016da:	2300      	movs	r3, #0
                uint16_t checksumCalculado = 0;
 80016dc:	461a      	mov	r2, r3
                for(i=0; i<nDados; i++){
 80016de:	4912      	ldr	r1, [pc, #72]	; (8001728 <exec_decodificador_avirede+0xf4>)
 80016e0:	7809      	ldrb	r1, [r1, #0]
 80016e2:	428b      	cmp	r3, r1
 80016e4:	d206      	bcs.n	80016f4 <exec_decodificador_avirede+0xc0>
                    checksumCalculado += dados[i];
 80016e6:	4912      	ldr	r1, [pc, #72]	; (8001730 <exec_decodificador_avirede+0xfc>)
 80016e8:	5cc9      	ldrb	r1, [r1, r3]
 80016ea:	440a      	add	r2, r1
 80016ec:	b292      	uxth	r2, r2
                for(i=0; i<nDados; i++){
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	e7f4      	b.n	80016de <exec_decodificador_avirede+0xaa>
                if(checksumCalculado == checksumRecebido){
 80016f4:	4282      	cmp	r2, r0
 80016f6:	d003      	beq.n	8001700 <exec_decodificador_avirede+0xcc>
                    estado = AGUARDA_INICIO_DE_FRAME;
 80016f8:	2200      	movs	r2, #0
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <exec_decodificador_avirede+0xe4>)
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	4770      	bx	lr
                    frameDecodificado = 1;
 8001700:	2201      	movs	r2, #1
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <exec_decodificador_avirede+0xe8>)
 8001704:	701a      	strb	r2, [r3, #0]
                    estado = AGUARDA_INICIO_DE_FRAME;
 8001706:	2200      	movs	r2, #0
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <exec_decodificador_avirede+0xe4>)
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	4770      	bx	lr
            }
            break;
        
        default:
            estado = AGUARDA_INICIO_DE_FRAME;
 800170e:	2200      	movs	r2, #0
 8001710:	4b01      	ldr	r3, [pc, #4]	; (8001718 <exec_decodificador_avirede+0xe4>)
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000457 	.word	0x20000457
 800171c:	20000458 	.word	0x20000458
 8001720:	2000045a 	.word	0x2000045a
 8001724:	20000459 	.word	0x20000459
 8001728:	2000045b 	.word	0x2000045b
 800172c:	20000456 	.word	0x20000456
 8001730:	20000a38 	.word	0x20000a38
 8001734:	20000454 	.word	0x20000454
 8001738:	20000455 	.word	0x20000455

0800173c <run_current_time>:

static volatile uint32_t currentTime = 0;

void run_current_time(void)
{
    currentTime++;
 800173c:	4a02      	ldr	r2, [pc, #8]	; (8001748 <run_current_time+0xc>)
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000045c 	.word	0x2000045c

0800174c <get_current_time>:
}
uint32_t get_current_time(void)
{
    return currentTime;
 800174c:	4b01      	ldr	r3, [pc, #4]	; (8001754 <get_current_time+0x8>)
 800174e:	6818      	ldr	r0, [r3, #0]
}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000045c 	.word	0x2000045c

08001758 <elapsed_time>:
uint32_t elapsed_time(uint32_t timeMark)
{
    uint32_t result;
    uint32_t buffer = currentTime;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <elapsed_time+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
    if(buffer >= timeMark){
 800175c:	4283      	cmp	r3, r0
 800175e:	d202      	bcs.n	8001766 <elapsed_time+0xe>
        result = buffer - timeMark;
    }else{
        result = buffer + ((uint32_t)0xFFFFFFFF - timeMark);
 8001760:	1a18      	subs	r0, r3, r0
 8001762:	3801      	subs	r0, #1
    }
    return result;
}
 8001764:	4770      	bx	lr
        result = buffer - timeMark;
 8001766:	1a18      	subs	r0, r3, r0
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000045c 	.word	0x2000045c

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x20>)
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f043 0310 	orr.w	r3, r3, #16
 800177a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f81b 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 fd50 	bl	8002228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f000 fd2c 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800178c:	2000      	movs	r0, #0
 800178e:	bd08      	pop	{r3, pc}
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x10>)
 8001796:	6811      	ldr	r1, [r2, #0]
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_IncTick+0x14>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	440b      	add	r3, r1
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000b38 	.word	0x20000b38
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017ac:	4b01      	ldr	r3, [pc, #4]	; (80017b4 <HAL_GetTick+0x8>)
 80017ae:	6818      	ldr	r0, [r3, #0]
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000b38 	.word	0x20000b38

080017b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017c4:	0200      	lsls	r0, r0, #8
 80017c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ca:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80017cc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80017d0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017d4:	60d0      	str	r0, [r2, #12]
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017dc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_NVIC_SetPriority+0x5c>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e6:	f1c3 0407 	rsb	r4, r3, #7
 80017ea:	2c04      	cmp	r4, #4
 80017ec:	bf28      	it	cs
 80017ee:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f0:	1d1d      	adds	r5, r3, #4
 80017f2:	2d06      	cmp	r5, #6
 80017f4:	d917      	bls.n	8001826 <HAL_NVIC_SetPriority+0x4a>
 80017f6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	2501      	movs	r5, #1
 80017fa:	fa05 f404 	lsl.w	r4, r5, r4
 80017fe:	3c01      	subs	r4, #1
 8001800:	4021      	ands	r1, r4
 8001802:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	fa05 f303 	lsl.w	r3, r5, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800180e:	2800      	cmp	r0, #0
 8001810:	db0b      	blt.n	800182a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	0109      	lsls	r1, r1, #4
 8001814:	b2c9      	uxtb	r1, r1
 8001816:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800181a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800181e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001822:	bc30      	pop	{r4, r5}
 8001824:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	2300      	movs	r3, #0
 8001828:	e7e6      	b.n	80017f8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	f000 000f 	and.w	r0, r0, #15
 800182e:	0109      	lsls	r1, r1, #4
 8001830:	b2c9      	uxtb	r1, r1
 8001832:	4b02      	ldr	r3, [pc, #8]	; (800183c <HAL_NVIC_SetPriority+0x60>)
 8001834:	5419      	strb	r1, [r3, r0]
 8001836:	e7f4      	b.n	8001822 <HAL_NVIC_SetPriority+0x46>
 8001838:	e000ed00 	.word	0xe000ed00
 800183c:	e000ed14 	.word	0xe000ed14

08001840 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001840:	0942      	lsrs	r2, r0, #5
 8001842:	f000 001f 	and.w	r0, r0, #31
 8001846:	2301      	movs	r3, #1
 8001848:	fa03 f000 	lsl.w	r0, r3, r0
 800184c:	4b01      	ldr	r3, [pc, #4]	; (8001854 <HAL_NVIC_EnableIRQ+0x14>)
 800184e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100

08001858 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001858:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <RCC_Delay+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <RCC_Delay+0x28>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	0a5b      	lsrs	r3, r3, #9
 8001866:	fb00 f003 	mul.w	r0, r0, r3
 800186a:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800186c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800186e:	9b01      	ldr	r3, [sp, #4]
 8001870:	1e5a      	subs	r2, r3, #1
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f9      	bne.n	800186c <RCC_Delay+0x14>
}
 8001878:	b002      	add	sp, #8
 800187a:	4770      	bx	lr
 800187c:	20000008 	.word	0x20000008
 8001880:	10624dd3 	.word	0x10624dd3

08001884 <HAL_RCC_OscConfig>:
{
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	6803      	ldr	r3, [r0, #0]
 800188c:	f013 0f01 	tst.w	r3, #1
 8001890:	d03d      	beq.n	800190e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001892:	4bac      	ldr	r3, [pc, #688]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b04      	cmp	r3, #4
 800189c:	d02e      	beq.n	80018fc <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800189e:	4ba9      	ldr	r3, [pc, #676]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d023      	beq.n	80018f2 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d051      	beq.n	8001956 <HAL_RCC_OscConfig+0xd2>
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d155      	bne.n	8001962 <HAL_RCC_OscConfig+0xde>
 80018b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018cc:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ce:	6863      	ldr	r3, [r4, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d060      	beq.n	8001996 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 80018d4:	f7ff ff6a 	bl	80017ac <HAL_GetTick>
 80018d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b9a      	ldr	r3, [pc, #616]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018e2:	d114      	bne.n	800190e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff ff62 	bl	80017ac <HAL_GetTick>
 80018e8:	1b40      	subs	r0, r0, r5
 80018ea:	2864      	cmp	r0, #100	; 0x64
 80018ec:	d9f5      	bls.n	80018da <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80018ee:	2003      	movs	r0, #3
 80018f0:	e1af      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f2:	4b94      	ldr	r3, [pc, #592]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80018fa:	d0d6      	beq.n	80018aa <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b91      	ldr	r3, [pc, #580]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001904:	d003      	beq.n	800190e <HAL_RCC_OscConfig+0x8a>
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 819f 	beq.w	8001c4c <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	f013 0f02 	tst.w	r3, #2
 8001914:	d065      	beq.n	80019e2 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001916:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f013 0f0c 	tst.w	r3, #12
 800191e:	d04e      	beq.n	80019be <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001920:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d043      	beq.n	80019b4 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	6923      	ldr	r3, [r4, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d079      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8001932:	2201      	movs	r2, #1
 8001934:	4b84      	ldr	r3, [pc, #528]	; (8001b48 <HAL_RCC_OscConfig+0x2c4>)
 8001936:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001938:	f7ff ff38 	bl	80017ac <HAL_GetTick>
 800193c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f013 0f02 	tst.w	r3, #2
 8001946:	d165      	bne.n	8001a14 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff ff30 	bl	80017ac <HAL_GetTick>
 800194c:	1b40      	subs	r0, r0, r5
 800194e:	2802      	cmp	r0, #2
 8001950:	d9f5      	bls.n	800193e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8001952:	2003      	movs	r0, #3
 8001954:	e17d      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001956:	4a7b      	ldr	r2, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e7b5      	b.n	80018ce <HAL_RCC_OscConfig+0x4a>
 8001962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001966:	d009      	beq.n	800197c <HAL_RCC_OscConfig+0xf8>
 8001968:	4b76      	ldr	r3, [pc, #472]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e7a8      	b.n	80018ce <HAL_RCC_OscConfig+0x4a>
 800197c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001980:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e79b      	b.n	80018ce <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8001996:	f7ff ff09 	bl	80017ac <HAL_GetTick>
 800199a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199c:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019a4:	d0b3      	beq.n	800190e <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a6:	f7ff ff01 	bl	80017ac <HAL_GetTick>
 80019aa:	1b40      	subs	r0, r0, r5
 80019ac:	2864      	cmp	r0, #100	; 0x64
 80019ae:	d9f5      	bls.n	800199c <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80019b0:	2003      	movs	r0, #3
 80019b2:	e14e      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b4:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019bc:	d1b6      	bne.n	800192c <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f013 0f02 	tst.w	r3, #2
 80019c6:	d004      	beq.n	80019d2 <HAL_RCC_OscConfig+0x14e>
 80019c8:	6923      	ldr	r3, [r4, #16]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80019ce:	2001      	movs	r0, #1
 80019d0:	e13f      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019da:	6961      	ldr	r1, [r4, #20]
 80019dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019e0:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f013 0f08 	tst.w	r3, #8
 80019e8:	d032      	beq.n	8001a50 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	69a3      	ldr	r3, [r4, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d06e      	beq.n	8001ace <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 80019f0:	2201      	movs	r2, #1
 80019f2:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <HAL_RCC_OscConfig+0x2c8>)
 80019f4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019f6:	f7ff fed9 	bl	80017ac <HAL_GetTick>
 80019fa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fc:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f013 0f02 	tst.w	r3, #2
 8001a04:	d121      	bne.n	8001a4a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff fed1 	bl	80017ac <HAL_GetTick>
 8001a0a:	1b40      	subs	r0, r0, r5
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d9f5      	bls.n	80019fc <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8001a10:	2003      	movs	r0, #3
 8001a12:	e11e      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001a16:	6813      	ldr	r3, [r2, #0]
 8001a18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a1c:	6961      	ldr	r1, [r4, #20]
 8001a1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e7dd      	b.n	80019e2 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8001a26:	2200      	movs	r2, #0
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_OscConfig+0x2c4>)
 8001a2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a2c:	f7ff febe 	bl	80017ac <HAL_GetTick>
 8001a30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f013 0f02 	tst.w	r3, #2
 8001a3a:	d0d2      	beq.n	80019e2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff feb6 	bl	80017ac <HAL_GetTick>
 8001a40:	1b40      	subs	r0, r0, r5
 8001a42:	2802      	cmp	r0, #2
 8001a44:	d9f5      	bls.n	8001a32 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e103      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff ff04 	bl	8001858 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	f013 0f04 	tst.w	r3, #4
 8001a56:	f000 8099 	beq.w	8001b8c <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a62:	d146      	bne.n	8001af2 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a6c:	61da      	str	r2, [r3, #28]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a78:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_RCC_OscConfig+0x2cc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a82:	d038      	beq.n	8001af6 <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	68e3      	ldr	r3, [r4, #12]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d049      	beq.n	8001b1e <HAL_RCC_OscConfig+0x29a>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d14d      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2a6>
 8001a8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a92:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	621a      	str	r2, [r3, #32]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	f022 0204 	bic.w	r2, r2, #4
 8001aa4:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa6:	68e3      	ldr	r3, [r4, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05d      	beq.n	8001b68 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001aac:	f7ff fe7e 	bl	80017ac <HAL_GetTick>
 8001ab0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f013 0f02 	tst.w	r3, #2
 8001aba:	d166      	bne.n	8001b8a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fe76 	bl	80017ac <HAL_GetTick>
 8001ac0:	1b80      	subs	r0, r0, r6
 8001ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	d9f3      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8001aca:	2003      	movs	r0, #3
 8001acc:	e0c1      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCC_OscConfig+0x2c8>)
 8001ad2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fe6a 	bl	80017ac <HAL_GetTick>
 8001ad8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	f013 0f02 	tst.w	r3, #2
 8001ae2:	d0b5      	beq.n	8001a50 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fe62 	bl	80017ac <HAL_GetTick>
 8001ae8:	1b40      	subs	r0, r0, r5
 8001aea:	2802      	cmp	r0, #2
 8001aec:	d9f5      	bls.n	8001ada <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001aee:	2003      	movs	r0, #3
 8001af0:	e0af      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2500      	movs	r5, #0
 8001af4:	e7c1      	b.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <HAL_RCC_OscConfig+0x2cc>)
 8001af8:	6813      	ldr	r3, [r2, #0]
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b00:	f7ff fe54 	bl	80017ac <HAL_GetTick>
 8001b04:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_OscConfig+0x2cc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b0e:	d1b9      	bne.n	8001a84 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff fe4c 	bl	80017ac <HAL_GetTick>
 8001b14:	1b80      	subs	r0, r0, r6
 8001b16:	2864      	cmp	r0, #100	; 0x64
 8001b18:	d9f5      	bls.n	8001b06 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	e099      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001b20:	6a13      	ldr	r3, [r2, #32]
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e7bd      	b.n	8001aa6 <HAL_RCC_OscConfig+0x222>
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d012      	beq.n	8001b54 <HAL_RCC_OscConfig+0x2d0>
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_OscConfig+0x2c0>)
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	621a      	str	r2, [r3, #32]
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	f022 0204 	bic.w	r2, r2, #4
 8001b3e:	621a      	str	r2, [r3, #32]
 8001b40:	e7b1      	b.n	8001aa6 <HAL_RCC_OscConfig+0x222>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	42420000 	.word	0x42420000
 8001b4c:	42420480 	.word	0x42420480
 8001b50:	40007000 	.word	0x40007000
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	f042 0204 	orr.w	r2, r2, #4
 8001b5c:	621a      	str	r2, [r3, #32]
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	621a      	str	r2, [r3, #32]
 8001b66:	e79e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8001b68:	f7ff fe20 	bl	80017ac <HAL_GetTick>
 8001b6c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	f013 0f02 	tst.w	r3, #2
 8001b76:	d008      	beq.n	8001b8a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7ff fe18 	bl	80017ac <HAL_GetTick>
 8001b7c:	1b80      	subs	r0, r0, r6
 8001b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b82:	4298      	cmp	r0, r3
 8001b84:	d9f3      	bls.n	8001b6e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001b86:	2003      	movs	r0, #3
 8001b88:	e063      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8001b8a:	b9e5      	cbnz	r5, 8001bc6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	69e3      	ldr	r3, [r4, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d05e      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b92:	4a32      	ldr	r2, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001b94:	6852      	ldr	r2, [r2, #4]
 8001b96:	f002 020c 	and.w	r2, r2, #12
 8001b9a:	2a08      	cmp	r2, #8
 8001b9c:	d05b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d017      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_RCC_OscConfig+0x3dc>)
 8001ba6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fe00 	bl	80017ac <HAL_GetTick>
 8001bac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bb6:	d047      	beq.n	8001c48 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff fdf8 	bl	80017ac <HAL_GetTick>
 8001bbc:	1b00      	subs	r0, r0, r4
 8001bbe:	2802      	cmp	r0, #2
 8001bc0:	d9f5      	bls.n	8001bae <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	e045      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001bc8:	69d3      	ldr	r3, [r2, #28]
 8001bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bce:	61d3      	str	r3, [r2, #28]
 8001bd0:	e7dc      	b.n	8001b8c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_OscConfig+0x3dc>)
 8001bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fde8 	bl	80017ac <HAL_GetTick>
 8001bdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001be6:	d006      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff fde0 	bl	80017ac <HAL_GetTick>
 8001bec:	1b40      	subs	r0, r0, r5
 8001bee:	2802      	cmp	r0, #2
 8001bf0:	d9f5      	bls.n	8001bde <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	e02d      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bf6:	6a23      	ldr	r3, [r4, #32]
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d01a      	beq.n	8001c34 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfe:	4917      	ldr	r1, [pc, #92]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001c00:	684b      	ldr	r3, [r1, #4]
 8001c02:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001c06:	6a22      	ldr	r2, [r4, #32]
 8001c08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c0a:	4302      	orrs	r2, r0
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c10:	2201      	movs	r2, #1
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_RCC_OscConfig+0x3dc>)
 8001c14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c16:	f7ff fdc9 	bl	80017ac <HAL_GetTick>
 8001c1a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c24:	d10e      	bne.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fdc1 	bl	80017ac <HAL_GetTick>
 8001c2a:	1b00      	subs	r0, r0, r4
 8001c2c:	2802      	cmp	r0, #2
 8001c2e:	d9f5      	bls.n	8001c1c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001c30:	2003      	movs	r0, #3
 8001c32:	e00e      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c34:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_RCC_OscConfig+0x3d8>)
 8001c36:	6853      	ldr	r3, [r2, #4]
 8001c38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c3c:	68a1      	ldr	r1, [r4, #8]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6053      	str	r3, [r2, #4]
 8001c42:	e7dc      	b.n	8001bfe <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001c44:	2000      	movs	r0, #0
 8001c46:	e004      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
 8001c48:	2000      	movs	r0, #0
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8001c50:	2000      	movs	r0, #0
}
 8001c52:	b002      	add	sp, #8
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
 8001c58:	e7fb      	b.n	8001c52 <HAL_RCC_OscConfig+0x3ce>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	42420060 	.word	0x42420060

08001c64 <HAL_RCC_GetSysClockFreq>:
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c68:	4c15      	ldr	r4, [pc, #84]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001c6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c6e:	f10d 0e18 	add.w	lr, sp, #24
 8001c72:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c76:	8a23      	ldrh	r3, [r4, #16]
 8001c78:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	f003 020c 	and.w	r2, r3, #12
 8001c84:	2a08      	cmp	r2, #8
 8001c86:	d118      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c88:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c8c:	4472      	add	r2, lr
 8001c8e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c96:	d103      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001c9a:	fb00 f002 	mul.w	r0, r0, r2
 8001c9e:	e00d      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001ca8:	4473      	add	r3, lr
 8001caa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x68>)
 8001cb0:	fb00 f002 	mul.w	r0, r0, r2
 8001cb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8001cba:	4804      	ldr	r0, [pc, #16]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001cbc:	b006      	add	sp, #24
 8001cbe:	bd10      	pop	{r4, pc}
 8001cc0:	080023e4 	.word	0x080023e4
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	003d0900 	.word	0x003d0900
 8001ccc:	007a1200 	.word	0x007a1200

08001cd0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_ClockConfig+0x18c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	428b      	cmp	r3, r1
 8001cda:	d20c      	bcs.n	8001cf6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cdc:	4a5f      	ldr	r2, [pc, #380]	; (8001e5c <HAL_RCC_ClockConfig+0x18c>)
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	f023 0307 	bic.w	r3, r3, #7
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce8:	6813      	ldr	r3, [r2, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	4299      	cmp	r1, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	4770      	bx	lr
{
 8001cf6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	6803      	ldr	r3, [r0, #0]
 8001cfa:	f013 0f02 	tst.w	r3, #2
 8001cfe:	d017      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	f013 0f04 	tst.w	r3, #4
 8001d04:	d004      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d06:	4a56      	ldr	r2, [pc, #344]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d08:	6853      	ldr	r3, [r2, #4]
 8001d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	6803      	ldr	r3, [r0, #0]
 8001d12:	f013 0f08 	tst.w	r3, #8
 8001d16:	d004      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d1a:	6853      	ldr	r3, [r2, #4]
 8001d1c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d20:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d22:	4a4f      	ldr	r2, [pc, #316]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d24:	6853      	ldr	r3, [r2, #4]
 8001d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d2a:	6884      	ldr	r4, [r0, #8]
 8001d2c:	4323      	orrs	r3, r4
 8001d2e:	6053      	str	r3, [r2, #4]
 8001d30:	460d      	mov	r5, r1
 8001d32:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d34:	6803      	ldr	r3, [r0, #0]
 8001d36:	f013 0f01 	tst.w	r3, #1
 8001d3a:	d052      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	6843      	ldr	r3, [r0, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d023      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d028      	beq.n	8001d98 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4a46      	ldr	r2, [pc, #280]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	f012 0f02 	tst.w	r2, #2
 8001d4e:	f000 8082 	beq.w	8001e56 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4943      	ldr	r1, [pc, #268]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d54:	684a      	ldr	r2, [r1, #4]
 8001d56:	f022 0203 	bic.w	r2, r2, #3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001d5e:	f7ff fd25 	bl	80017ac <HAL_GetTick>
 8001d62:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d64:	6863      	ldr	r3, [r4, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d01d      	beq.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d02a      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f013 0f0c 	tst.w	r3, #12
 8001d76:	d034      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7ff fd18 	bl	80017ac <HAL_GetTick>
 8001d7c:	1b80      	subs	r0, r0, r6
 8001d7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d82:	4298      	cmp	r0, r3
 8001d84:	d9f3      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8001d86:	2003      	movs	r0, #3
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4a35      	ldr	r2, [pc, #212]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d92:	d1de      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001d94:	2001      	movs	r0, #1
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d98:	4a31      	ldr	r2, [pc, #196]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001da0:	d1d7      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001da2:	2001      	movs	r0, #1
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da6:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d017      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db2:	f7ff fcfb 	bl	80017ac <HAL_GetTick>
 8001db6:	1b80      	subs	r0, r0, r6
 8001db8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dbc:	4298      	cmp	r0, r3
 8001dbe:	d9f2      	bls.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fcec 	bl	80017ac <HAL_GetTick>
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dda:	4298      	cmp	r0, r3
 8001ddc:	d9f2      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8001dde:	2003      	movs	r0, #3
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_ClockConfig+0x18c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	429d      	cmp	r5, r3
 8001dec:	d20c      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_RCC_ClockConfig+0x18c>)
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	f023 0307 	bic.w	r3, r3, #7
 8001df6:	432b      	orrs	r3, r5
 8001df8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	429d      	cmp	r5, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001e04:	2001      	movs	r0, #1
}
 8001e06:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	f013 0f04 	tst.w	r3, #4
 8001e0e:	d006      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e10:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001e12:	6853      	ldr	r3, [r2, #4]
 8001e14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e18:	68e1      	ldr	r1, [r4, #12]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	f013 0f08 	tst.w	r3, #8
 8001e24:	d007      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001e28:	6853      	ldr	r3, [r2, #4]
 8001e2a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e2e:	6921      	ldr	r1, [r4, #16]
 8001e30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e34:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e36:	f7ff ff15 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x190>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_RCC_ClockConfig+0x194>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	40d8      	lsrs	r0, r3
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_RCC_ClockConfig+0x198>)
 8001e4a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 f9eb 	bl	8002228 <HAL_InitTick>
  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e56:	2001      	movs	r0, #1
 8001e58:	bd70      	pop	{r4, r5, r6, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	0800241c 	.word	0x0800241c
 8001e68:	20000008 	.word	0x20000008

08001e6c <HAL_RCC_GetHCLKFreq>:
}
 8001e6c:	4b01      	ldr	r3, [pc, #4]	; (8001e74 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008

08001e78 <HAL_RCC_GetPCLK1Freq>:
{
 8001e78:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e7a:	f7ff fff7 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e86:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001e8a:	40d8      	lsrs	r0, r3
 8001e8c:	bd08      	pop	{r3, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	0800242c 	.word	0x0800242c

08001e98 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_GetClockConfig+0x34>)
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001eac:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001eb4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ebe:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetClockConfig+0x38>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	600b      	str	r3, [r1, #0]
 8001eca:	4770      	bx	lr
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed6:	6802      	ldr	r2, [r0, #0]
 8001ed8:	68d3      	ldr	r3, [r2, #12]
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ee0:	6802      	ldr	r2, [r0, #0]
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8001eea:	2000      	movs	r0, #0
 8001eec:	4770      	bx	lr

08001eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_IRQHandler>:
{
 8001ef6:	b510      	push	{r4, lr}
 8001ef8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001efa:	6803      	ldr	r3, [r0, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	f012 0f02 	tst.w	r2, #2
 8001f02:	d011      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	f012 0f02 	tst.w	r2, #2
 8001f0a:	d00d      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f0c:	f06f 0202 	mvn.w	r2, #2
 8001f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f16:	6803      	ldr	r3, [r0, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f013 0f03 	tst.w	r3, #3
 8001f1e:	d070      	beq.n	8002002 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f20:	f7ff ffe6 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f24:	2300      	movs	r3, #0
 8001f26:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	f012 0f04 	tst.w	r2, #4
 8001f30:	d012      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	f012 0f04 	tst.w	r2, #4
 8001f38:	d00e      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f3a:	f06f 0204 	mvn.w	r2, #4
 8001f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f4c:	d05f      	beq.n	800200e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff ffce 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f54:	2300      	movs	r3, #0
 8001f56:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	f012 0f08 	tst.w	r2, #8
 8001f60:	d012      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	f012 0f08 	tst.w	r2, #8
 8001f68:	d00e      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f6a:	f06f 0208 	mvn.w	r2, #8
 8001f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f70:	2304      	movs	r3, #4
 8001f72:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	f013 0f03 	tst.w	r3, #3
 8001f7c:	d04e      	beq.n	800201c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7ff ffb6 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f84:	2300      	movs	r3, #0
 8001f86:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	f012 0f10 	tst.w	r2, #16
 8001f90:	d012      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	f012 0f10 	tst.w	r2, #16
 8001f98:	d00e      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9a:	f06f 0210 	mvn.w	r2, #16
 8001f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001fac:	d03d      	beq.n	800202a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff ff9e 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	f012 0f01 	tst.w	r2, #1
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	f012 0f01 	tst.w	r2, #1
 8001fc8:	d136      	bne.n	8002038 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fd2:	d003      	beq.n	8001fdc <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fda:	d134      	bne.n	8002046 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fec:	d132      	bne.n	8002054 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	f012 0f20 	tst.w	r2, #32
 8001ff6:	d003      	beq.n	8002000 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	f012 0f20 	tst.w	r2, #32
 8001ffe:	d130      	bne.n	8002062 <HAL_TIM_IRQHandler+0x16c>
 8002000:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	f7ff ff74 	bl	8001eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002006:	4620      	mov	r0, r4
 8002008:	f7ff ff73 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 800200c:	e78a      	b.n	8001f24 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	4620      	mov	r0, r4
 8002010:	f7ff ff6d 	bl	8001eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff ff6c 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 800201a:	e79b      	b.n	8001f54 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ff66 	bl	8001eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff ff65 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002028:	e7ac      	b.n	8001f84 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff ff5f 	bl	8001eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	4620      	mov	r0, r4
 8002032:	f7ff ff5e 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002036:	e7bd      	b.n	8001fb4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002038:	f06f 0201 	mvn.w	r2, #1
 800203c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800203e:	4620      	mov	r0, r4
 8002040:	f000 f8c4 	bl	80021cc <HAL_TIM_PeriodElapsedCallback>
 8002044:	e7c1      	b.n	8001fca <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002046:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800204a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800204c:	4620      	mov	r0, r4
 800204e:	f000 f865 	bl	800211c <HAL_TIMEx_BreakCallback>
 8002052:	e7c3      	b.n	8001fdc <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002058:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff ff4a 	bl	8001ef4 <HAL_TIM_TriggerCallback>
 8002060:	e7c5      	b.n	8001fee <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002062:	f06f 0220 	mvn.w	r2, #32
 8002066:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002068:	4620      	mov	r0, r4
 800206a:	f000 f856 	bl	800211a <HAL_TIMEx_CommutationCallback>
}
 800206e:	e7c7      	b.n	8002000 <HAL_TIM_IRQHandler+0x10a>

08002070 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8002070:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <TIM_Base_SetConfig+0x74>)
 8002074:	4290      	cmp	r0, r2
 8002076:	d027      	beq.n	80020c8 <TIM_Base_SetConfig+0x58>
 8002078:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800207c:	d024      	beq.n	80020c8 <TIM_Base_SetConfig+0x58>
 800207e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002082:	4290      	cmp	r0, r2
 8002084:	d020      	beq.n	80020c8 <TIM_Base_SetConfig+0x58>
 8002086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800208a:	4290      	cmp	r0, r2
 800208c:	d01c      	beq.n	80020c8 <TIM_Base_SetConfig+0x58>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <TIM_Base_SetConfig+0x74>)
 8002090:	4290      	cmp	r0, r2
 8002092:	d01e      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 8002094:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002098:	d01b      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 800209a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800209e:	4290      	cmp	r0, r2
 80020a0:	d017      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 80020a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a6:	4290      	cmp	r0, r2
 80020a8:	d013      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80020aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80020ae:	694a      	ldr	r2, [r1, #20]
 80020b0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80020b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	688b      	ldr	r3, [r1, #8]
 80020b6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020b8:	680b      	ldr	r3, [r1, #0]
 80020ba:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <TIM_Base_SetConfig+0x74>)
 80020be:	4298      	cmp	r0, r3
 80020c0:	d00c      	beq.n	80020dc <TIM_Base_SetConfig+0x6c>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80020c2:	2301      	movs	r3, #1
 80020c4:	6143      	str	r3, [r0, #20]
 80020c6:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020cc:	684a      	ldr	r2, [r1, #4]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	e7dd      	b.n	800208e <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	68ca      	ldr	r2, [r1, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	e7e6      	b.n	80020aa <TIM_Base_SetConfig+0x3a>
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	690b      	ldr	r3, [r1, #16]
 80020de:	6303      	str	r3, [r0, #48]	; 0x30
 80020e0:	e7ef      	b.n	80020c2 <TIM_Base_SetConfig+0x52>
 80020e2:	bf00      	nop
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80020e8:	b1a8      	cbz	r0, 8002116 <HAL_TIM_Base_Init+0x2e>
{
 80020ea:	b510      	push	{r4, lr}
 80020ec:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80020ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020f2:	b15b      	cbz	r3, 800210c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020fa:	1d21      	adds	r1, r4, #4
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	f7ff ffb7 	bl	8002070 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002102:	2301      	movs	r3, #1
 8002104:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002108:	2000      	movs	r0, #0
 800210a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800210c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002110:	f7ff fee0 	bl	8001ed4 <HAL_TIM_Base_MspInit>
 8002114:	e7ee      	b.n	80020f4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002116:	2001      	movs	r0, #1
 8002118:	4770      	bx	lr

0800211a <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800211a:	4770      	bx	lr

0800211c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800211c:	4770      	bx	lr
	...

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_GPIO_Init+0x40>)
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	f042 0210 	orr.w	r2, r2, #16
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	f002 0210 	and.w	r2, r2, #16
 8002132:	9201      	str	r2, [sp, #4]
 8002134:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	f042 0220 	orr.w	r2, r2, #32
 800213c:	619a      	str	r2, [r3, #24]
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	f002 0220 	and.w	r2, r2, #32
 8002144:	9202      	str	r2, [sp, #8]
 8002146:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	f042 0204 	orr.w	r2, r2, #4
 800214e:	619a      	str	r2, [r3, #24]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	9303      	str	r3, [sp, #12]
 8002158:	9b03      	ldr	r3, [sp, #12]

}
 800215a:	b004      	add	sp, #16
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <SystemClock_Config>:
{
 8002164:	b530      	push	{r4, r5, lr}
 8002166:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002168:	2228      	movs	r2, #40	; 0x28
 800216a:	2100      	movs	r1, #0
 800216c:	a806      	add	r0, sp, #24
 800216e:	f000 f924 	bl	80023ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002172:	2400      	movs	r4, #0
 8002174:	9401      	str	r4, [sp, #4]
 8002176:	9402      	str	r4, [sp, #8]
 8002178:	9403      	str	r4, [sp, #12]
 800217a:	9404      	str	r4, [sp, #16]
 800217c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800217e:	2201      	movs	r2, #1
 8002180:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002186:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002188:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800218a:	2502      	movs	r5, #2
 800218c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800218e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002190:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002194:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002196:	a806      	add	r0, sp, #24
 8002198:	f7ff fb74 	bl	8001884 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	230f      	movs	r3, #15
 800219e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021aa:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ac:	4629      	mov	r1, r5
 80021ae:	a801      	add	r0, sp, #4
 80021b0:	f7ff fd8e 	bl	8001cd0 <HAL_RCC_ClockConfig>
}
 80021b4:	b011      	add	sp, #68	; 0x44
 80021b6:	bd30      	pop	{r4, r5, pc}

080021b8 <main>:
{
 80021b8:	b508      	push	{r3, lr}
  HAL_Init();
 80021ba:	f7ff fad9 	bl	8001770 <HAL_Init>
  SystemClock_Config();
 80021be:	f7ff ffd1 	bl	8002164 <SystemClock_Config>
  MX_GPIO_Init();
 80021c2:	f7ff ffad 	bl	8002120 <MX_GPIO_Init>
  app_run();
 80021c6:	f7ff f86b 	bl	80012a0 <app_run>
 80021ca:	e7fe      	b.n	80021ca <main+0x12>

080021cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80021ce:	6802      	ldr	r2, [r0, #0]
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d000      	beq.n	80021d8 <HAL_TIM_PeriodElapsedCallback+0xc>
 80021d6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80021d8:	f7ff fadc 	bl	8001794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021dc:	e7fb      	b.n	80021d6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80021de:	bf00      	nop
 80021e0:	40000800 	.word	0x40000800

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_MspInit+0x3c>)
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	619a      	str	r2, [r3, #24]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	f002 0201 	and.w	r2, r2, #1
 80021f6:	9200      	str	r2, [sp, #0]
 80021f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002200:	61da      	str	r2, [r3, #28]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <HAL_MspInit+0x40>)
 800220e:	6853      	ldr	r3, [r2, #4]
 8002210:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002218:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	b002      	add	sp, #8
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000

08002228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002228:	b500      	push	{lr}
 800222a:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800222c:	2200      	movs	r2, #0
 800222e:	4601      	mov	r1, r0
 8002230:	201e      	movs	r0, #30
 8002232:	f7ff fad3 	bl	80017dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8002236:	201e      	movs	r0, #30
 8002238:	f7ff fb02 	bl	8001840 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_InitTick+0x6c>)
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	f042 0204 	orr.w	r2, r2, #4
 8002244:	61da      	str	r2, [r3, #28]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002250:	a902      	add	r1, sp, #8
 8002252:	a803      	add	r0, sp, #12
 8002254:	f7ff fe20 	bl	8001e98 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002258:	f7ff fe0e 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 800225c:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <HAL_InitTick+0x70>)
 8002260:	fba0 2303 	umull	r2, r3, r0, r3
 8002264:	0c9b      	lsrs	r3, r3, #18
 8002266:	3b01      	subs	r3, #1
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <HAL_InitTick+0x74>)
 800226a:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_InitTick+0x78>)
 800226c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800226e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002272:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002274:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800227c:	f7ff ff34 	bl	80020e8 <HAL_TIM_Base_Init>
 8002280:	b118      	cbz	r0, 800228a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002282:	2001      	movs	r0, #1
}
 8002284:	b009      	add	sp, #36	; 0x24
 8002286:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 800228a:	4804      	ldr	r0, [pc, #16]	; (800229c <HAL_InitTick+0x74>)
 800228c:	f7ff fe23 	bl	8001ed6 <HAL_TIM_Base_Start_IT>
 8002290:	e7f8      	b.n	8002284 <HAL_InitTick+0x5c>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	431bde83 	.word	0x431bde83
 800229c:	20000b3c 	.word	0x20000b3c
 80022a0:	40000800 	.word	0x40000800

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	4770      	bx	lr

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	e7fe      	b.n	80022a6 <HardFault_Handler>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler>

080022aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	e7fe      	b.n	80022ac <UsageFault_Handler>

080022ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ae:	4770      	bx	lr

080022b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
    run_current_time();
 80022b2:	f7ff fa43 	bl	800173c <run_current_time>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022b6:	4802      	ldr	r0, [pc, #8]	; (80022c0 <TIM4_IRQHandler+0x10>)
 80022b8:	f7ff fe1d 	bl	8001ef6 <HAL_TIM_IRQHandler>
 80022bc:	bd08      	pop	{r3, pc}
 80022be:	bf00      	nop
 80022c0:	20000b3c 	.word	0x20000b3c

080022c4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <SystemInit+0x40>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <SystemInit+0x44>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80022dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022e0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80022f0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80022f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <SystemInit+0x48>)
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	f8ff0000 	.word	0xf8ff0000
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002310:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002312:	e003      	b.n	800231c <LoopCopyDataInit>

08002314 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002316:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002318:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800231a:	3104      	adds	r1, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800231c:	480a      	ldr	r0, [pc, #40]	; (8002348 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002320:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002322:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002324:	d3f6      	bcc.n	8002314 <CopyDataInit>
  ldr r2, =_sbss
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002328:	e002      	b.n	8002330 <LoopFillZerobss>

0800232a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800232c:	f842 3b04 	str.w	r3, [r2], #4

08002330 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002332:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002334:	d3f9      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002336:	f7ff ffc5 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f000 f80f 	bl	800235c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800233e:	f7ff ff3b 	bl	80021b8 <main>
  bx lr
 8002342:	4770      	bx	lr
  ldr r3, =_sidata
 8002344:	0800243c 	.word	0x0800243c
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800234c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002350:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002354:	20000b7c 	.word	0x20000b7c

08002358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC1_2_IRQHandler>
	...

0800235c <__libc_init_array>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	2500      	movs	r5, #0
 8002360:	4e0c      	ldr	r6, [pc, #48]	; (8002394 <__libc_init_array+0x38>)
 8002362:	4c0d      	ldr	r4, [pc, #52]	; (8002398 <__libc_init_array+0x3c>)
 8002364:	1ba4      	subs	r4, r4, r6
 8002366:	10a4      	asrs	r4, r4, #2
 8002368:	42a5      	cmp	r5, r4
 800236a:	d109      	bne.n	8002380 <__libc_init_array+0x24>
 800236c:	f000 f82e 	bl	80023cc <_init>
 8002370:	2500      	movs	r5, #0
 8002372:	4e0a      	ldr	r6, [pc, #40]	; (800239c <__libc_init_array+0x40>)
 8002374:	4c0a      	ldr	r4, [pc, #40]	; (80023a0 <__libc_init_array+0x44>)
 8002376:	1ba4      	subs	r4, r4, r6
 8002378:	10a4      	asrs	r4, r4, #2
 800237a:	42a5      	cmp	r5, r4
 800237c:	d105      	bne.n	800238a <__libc_init_array+0x2e>
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002384:	4798      	blx	r3
 8002386:	3501      	adds	r5, #1
 8002388:	e7ee      	b.n	8002368 <__libc_init_array+0xc>
 800238a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800238e:	4798      	blx	r3
 8002390:	3501      	adds	r5, #1
 8002392:	e7f2      	b.n	800237a <__libc_init_array+0x1e>
 8002394:	08002434 	.word	0x08002434
 8002398:	08002434 	.word	0x08002434
 800239c:	08002434 	.word	0x08002434
 80023a0:	08002438 	.word	0x08002438

080023a4 <memcpy>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	1e43      	subs	r3, r0, #1
 80023a8:	440a      	add	r2, r1
 80023aa:	4291      	cmp	r1, r2
 80023ac:	d100      	bne.n	80023b0 <memcpy+0xc>
 80023ae:	bd10      	pop	{r4, pc}
 80023b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023b8:	e7f7      	b.n	80023aa <memcpy+0x6>

080023ba <memset>:
 80023ba:	4603      	mov	r3, r0
 80023bc:	4402      	add	r2, r0
 80023be:	4293      	cmp	r3, r2
 80023c0:	d100      	bne.n	80023c4 <memset+0xa>
 80023c2:	4770      	bx	lr
 80023c4:	f803 1b01 	strb.w	r1, [r3], #1
 80023c8:	e7f9      	b.n	80023be <memset+0x4>
	...

080023cc <_init>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	bf00      	nop
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr

080023d8 <_fini>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr
