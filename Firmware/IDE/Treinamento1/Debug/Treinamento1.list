
Treinamento1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b0c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001c1c  08001c1c  00011c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c6c  08001c6c  00011c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c70  08001c70  00011c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b6c  2000000c  08001c80  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000b78  08001c80  00020b78  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001496c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c65  00000000  00000000  000349a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d3d  00000000  00000000  00037606  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c20  00000000  00000000  0003f348  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d40  00000000  00000000  0003ff68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000067ed  00000000  00000000  00040ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004393  00000000  00000000  00047495  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b828  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e58  00000000  00000000  0004b8a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001c04 	.word	0x08001c04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001c04 	.word	0x08001c04

08000150 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000150:	f100 0308 	add.w	r3, r0, #8
 8000154:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000156:	f04f 32ff 	mov.w	r2, #4294967295
 800015a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800015c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800015e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000160:	2300      	movs	r3, #0
 8000162:	6003      	str	r3, [r0, #0]
 8000164:	4770      	bx	lr

08000166 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000166:	2300      	movs	r3, #0
 8000168:	6103      	str	r3, [r0, #16]
 800016a:	4770      	bx	lr

0800016c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800016c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800016e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000170:	689a      	ldr	r2, [r3, #8]
 8000172:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000174:	689a      	ldr	r2, [r3, #8]
 8000176:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000178:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800017a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800017c:	6803      	ldr	r3, [r0, #0]
 800017e:	3301      	adds	r3, #1
 8000180:	6003      	str	r3, [r0, #0]
 8000182:	4770      	bx	lr

08000184 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000184:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000186:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000188:	f1b5 3fff 	cmp.w	r5, #4294967295
 800018c:	d002      	beq.n	8000194 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800018e:	f100 0208 	add.w	r2, r0, #8
 8000192:	e002      	b.n	800019a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8000194:	6902      	ldr	r2, [r0, #16]
 8000196:	e004      	b.n	80001a2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000198:	461a      	mov	r2, r3
 800019a:	6853      	ldr	r3, [r2, #4]
 800019c:	681c      	ldr	r4, [r3, #0]
 800019e:	42a5      	cmp	r5, r4
 80001a0:	d2fa      	bcs.n	8000198 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80001a2:	6853      	ldr	r3, [r2, #4]
 80001a4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80001a6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80001a8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80001aa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80001ac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80001ae:	6803      	ldr	r3, [r0, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	6003      	str	r3, [r0, #0]
}
 80001b4:	bc30      	pop	{r4, r5}
 80001b6:	4770      	bx	lr

080001b8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80001b8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001ba:	6842      	ldr	r2, [r0, #4]
 80001bc:	6881      	ldr	r1, [r0, #8]
 80001be:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c0:	6882      	ldr	r2, [r0, #8]
 80001c2:	6841      	ldr	r1, [r0, #4]
 80001c4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001c6:	685a      	ldr	r2, [r3, #4]
 80001c8:	4290      	cmp	r0, r2
 80001ca:	d006      	beq.n	80001da <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80001cc:	2200      	movs	r2, #0
 80001ce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	3a01      	subs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001da:	6882      	ldr	r2, [r0, #8]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	e7f5      	b.n	80001cc <uxListRemove+0x14>

080001e0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80001e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <prvTaskExitError+0x3c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ee:	d008      	beq.n	8000202 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80001f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001f4:	f383 8811 	msr	BASEPRI, r3
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f3bf 8f4f 	dsb	sy
 8000200:	e7fe      	b.n	8000200 <prvTaskExitError+0x20>
 8000202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000206:	f383 8811 	msr	BASEPRI, r3
 800020a:	f3bf 8f6f 	isb	sy
 800020e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000212:	9b01      	ldr	r3, [sp, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d0fc      	beq.n	8000212 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000218:	b002      	add	sp, #8
 800021a:	4770      	bx	lr
 800021c:	20000000 	.word	0x20000000

08000220 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <prvPortStartFirstTask+0x1c>)
 8000222:	6800      	ldr	r0, [r0, #0]
 8000224:	6800      	ldr	r0, [r0, #0]
 8000226:	f380 8808 	msr	MSP, r0
 800022a:	b662      	cpsie	i
 800022c:	b661      	cpsie	f
 800022e:	f3bf 8f4f 	dsb	sy
 8000232:	f3bf 8f6f 	isb	sy
 8000236:	df00      	svc	0
 8000238:	bf00      	nop
 800023a:	0000      	.short	0x0000
 800023c:	e000ed08 	.word	0xe000ed08

08000240 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000244:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000248:	f021 0101 	bic.w	r1, r1, #1
 800024c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <pxPortInitialiseStack+0x20>)
 8000252:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000256:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800025a:	3840      	subs	r0, #64	; 0x40
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	080001e1 	.word	0x080001e1
	...

08000270 <SVC_Handler>:
	__asm volatile (
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <pxCurrentTCBConst2>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	6808      	ldr	r0, [r1, #0]
 8000276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800027a:	f380 8809 	msr	PSP, r0
 800027e:	f3bf 8f6f 	isb	sy
 8000282:	f04f 0000 	mov.w	r0, #0
 8000286:	f380 8811 	msr	BASEPRI, r0
 800028a:	f04e 0e0d 	orr.w	lr, lr, #13
 800028e:	4770      	bx	lr

08000290 <pxCurrentTCBConst2>:
 8000290:	20000030 	.word	0x20000030

08000294 <vPortEnterCritical>:
 8000294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000298:	f383 8811 	msr	BASEPRI, r3
 800029c:	f3bf 8f6f 	isb	sy
 80002a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <vPortEnterCritical+0x3c>)
 80002a6:	6813      	ldr	r3, [r2, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d10d      	bne.n	80002cc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <vPortEnterCritical+0x40>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80002b8:	d008      	beq.n	80002cc <vPortEnterCritical+0x38>
 80002ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002be:	f383 8811 	msr	BASEPRI, r3
 80002c2:	f3bf 8f6f 	isb	sy
 80002c6:	f3bf 8f4f 	dsb	sy
 80002ca:	e7fe      	b.n	80002ca <vPortEnterCritical+0x36>
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <vPortExitCritical+0x28>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	b943      	cbnz	r3, 80002f0 <vPortExitCritical+0x18>
 80002de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e2:	f383 8811 	msr	BASEPRI, r3
 80002e6:	f3bf 8f6f 	isb	sy
 80002ea:	f3bf 8f4f 	dsb	sy
 80002ee:	e7fe      	b.n	80002ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a03      	ldr	r2, [pc, #12]	; (8000300 <vPortExitCritical+0x28>)
 80002f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80002f6:	b90b      	cbnz	r3, 80002fc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002f8:	f383 8811 	msr	BASEPRI, r3
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000000 	.word	0x20000000
	...

08000310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000310:	f3ef 8009 	mrs	r0, PSP
 8000314:	f3bf 8f6f 	isb	sy
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <pxCurrentTCBConst>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000320:	6010      	str	r0, [r2, #0]
 8000322:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000326:	f04f 0050 	mov.w	r0, #80	; 0x50
 800032a:	f380 8811 	msr	BASEPRI, r0
 800032e:	f000 fc19 	bl	8000b64 <vTaskSwitchContext>
 8000332:	f04f 0000 	mov.w	r0, #0
 8000336:	f380 8811 	msr	BASEPRI, r0
 800033a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	6808      	ldr	r0, [r1, #0]
 8000342:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000346:	f380 8809 	msr	PSP, r0
 800034a:	f3bf 8f6f 	isb	sy
 800034e:	4770      	bx	lr

08000350 <pxCurrentTCBConst>:
 8000350:	20000030 	.word	0x20000030

08000354 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000354:	b508      	push	{r3, lr}
	__asm volatile
 8000356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035a:	f383 8811 	msr	BASEPRI, r3
 800035e:	f3bf 8f6f 	isb	sy
 8000362:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000366:	f000 fad7 	bl	8000918 <xTaskIncrementTick>
 800036a:	b118      	cbz	r0, 8000374 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800036c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000370:	4b02      	ldr	r3, [pc, #8]	; (800037c <SysTick_Handler+0x28>)
 8000372:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000374:	2300      	movs	r3, #0
 8000376:	f383 8811 	msr	BASEPRI, r3
 800037a:	bd08      	pop	{r3, pc}
 800037c:	e000ed04 	.word	0xe000ed04

08000380 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <vPortSetupTimerInterrupt+0x24>)
 8000382:	2300      	movs	r3, #0
 8000384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000386:	4908      	ldr	r1, [pc, #32]	; (80003a8 <vPortSetupTimerInterrupt+0x28>)
 8000388:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <vPortSetupTimerInterrupt+0x2c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4908      	ldr	r1, [pc, #32]	; (80003b0 <vPortSetupTimerInterrupt+0x30>)
 8000390:	fba1 1303 	umull	r1, r3, r1, r3
 8000394:	099b      	lsrs	r3, r3, #6
 8000396:	3b01      	subs	r3, #1
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <vPortSetupTimerInterrupt+0x34>)
 800039a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800039c:	2307      	movs	r3, #7
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010
 80003a8:	e000e018 	.word	0xe000e018
 80003ac:	20000008 	.word	0x20000008
 80003b0:	10624dd3 	.word	0x10624dd3
 80003b4:	e000e014 	.word	0xe000e014

080003b8 <xPortStartScheduler>:
{
 80003b8:	b510      	push	{r4, lr}
 80003ba:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <xPortStartScheduler+0xa4>)
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80003c4:	22ff      	movs	r2, #255	; 0xff
 80003c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80003d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80003d8:	4a21      	ldr	r2, [pc, #132]	; (8000460 <xPortStartScheduler+0xa8>)
 80003da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80003dc:	2207      	movs	r2, #7
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <xPortStartScheduler+0xac>)
 80003e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003e2:	e009      	b.n	80003f8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80003e4:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <xPortStartScheduler+0xac>)
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80003ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000400:	d1f0      	bne.n	80003e4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <xPortStartScheduler+0xac>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b03      	cmp	r3, #3
 8000408:	d008      	beq.n	800041c <xPortStartScheduler+0x64>
	__asm volatile
 800040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800040e:	f383 8811 	msr	BASEPRI, r3
 8000412:	f3bf 8f6f 	isb	sy
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	e7fe      	b.n	800041a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800041c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800041e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000422:	4a10      	ldr	r2, [pc, #64]	; (8000464 <xPortStartScheduler+0xac>)
 8000424:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000426:	9b01      	ldr	r3, [sp, #4]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4a0c      	ldr	r2, [pc, #48]	; (800045c <xPortStartScheduler+0xa4>)
 800042c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <xPortStartScheduler+0xb0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000436:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800043e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8000440:	f7ff ff9e 	bl	8000380 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000444:	2400      	movs	r4, #0
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <xPortStartScheduler+0xb4>)
 8000448:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800044a:	f7ff fee9 	bl	8000220 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800044e:	f000 fb89 	bl	8000b64 <vTaskSwitchContext>
	prvTaskExitError();
 8000452:	f7ff fec5 	bl	80001e0 <prvTaskExitError>
}
 8000456:	4620      	mov	r0, r4
 8000458:	b002      	add	sp, #8
 800045a:	bd10      	pop	{r4, pc}
 800045c:	e000e400 	.word	0xe000e400
 8000460:	20000028 	.word	0x20000028
 8000464:	2000002c 	.word	0x2000002c
 8000468:	e000ed20 	.word	0xe000ed20
 800046c:	20000000 	.word	0x20000000

08000470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000470:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
 8000472:	b330      	cbz	r0, 80004c2 <xQueueGenericReset+0x52>
 8000474:	4604      	mov	r4, r0
 8000476:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8000478:	f7ff ff0c 	bl	8000294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800047c:	6821      	ldr	r1, [r4, #0]
 800047e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000482:	fb03 1002 	mla	r0, r3, r2, r1
 8000486:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000488:	2000      	movs	r0, #0
 800048a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800048c:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800048e:	3a01      	subs	r2, #1
 8000490:	fb02 1303 	mla	r3, r2, r3, r1
 8000494:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000496:	23ff      	movs	r3, #255	; 0xff
 8000498:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800049c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80004a0:	b9c5      	cbnz	r5, 80004d4 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80004a2:	6923      	ldr	r3, [r4, #16]
 80004a4:	b1f3      	cbz	r3, 80004e4 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80004a6:	f104 0010 	add.w	r0, r4, #16
 80004aa:	f000 fba7 	bl	8000bfc <xTaskRemoveFromEventList>
 80004ae:	b1c8      	cbz	r0, 80004e4 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80004b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <xQueueGenericReset+0x7c>)
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	f3bf 8f4f 	dsb	sy
 80004bc:	f3bf 8f6f 	isb	sy
 80004c0:	e010      	b.n	80004e4 <xQueueGenericReset+0x74>
 80004c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004c6:	f383 8811 	msr	BASEPRI, r3
 80004ca:	f3bf 8f6f 	isb	sy
 80004ce:	f3bf 8f4f 	dsb	sy
 80004d2:	e7fe      	b.n	80004d2 <xQueueGenericReset+0x62>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80004d4:	f104 0010 	add.w	r0, r4, #16
 80004d8:	f7ff fe3a 	bl	8000150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80004dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80004e0:	f7ff fe36 	bl	8000150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80004e4:	f7ff fef8 	bl	80002d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 80004e8:	2001      	movs	r0, #1
 80004ea:	bd38      	pop	{r3, r4, r5, pc}
 80004ec:	e000ed04 	.word	0xe000ed04

080004f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80004f0:	b510      	push	{r4, lr}
 80004f2:	9b02      	ldr	r3, [sp, #8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80004f4:	460c      	mov	r4, r1
 80004f6:	b939      	cbnz	r1, 8000508 <prvInitialiseNewQueue+0x18>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004f8:	601b      	str	r3, [r3, #0]
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80004fa:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80004fc:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80004fe:	2101      	movs	r1, #1
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffb5 	bl	8000470 <xQueueGenericReset>
 8000506:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	e7f6      	b.n	80004fa <prvInitialiseNewQueue+0xa>

0800050c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800050c:	b940      	cbnz	r0, 8000520 <xQueueGenericCreateStatic+0x14>
 800050e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000512:	f383 8811 	msr	BASEPRI, r3
 8000516:	f3bf 8f6f 	isb	sy
 800051a:	f3bf 8f4f 	dsb	sy
 800051e:	e7fe      	b.n	800051e <xQueueGenericCreateStatic+0x12>
	{
 8000520:	b510      	push	{r4, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8000526:	b163      	cbz	r3, 8000542 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000528:	b1a2      	cbz	r2, 8000554 <xQueueGenericCreateStatic+0x48>
 800052a:	b1a9      	cbz	r1, 8000558 <xQueueGenericCreateStatic+0x4c>
 800052c:	2001      	movs	r0, #1
 800052e:	b9a8      	cbnz	r0, 800055c <xQueueGenericCreateStatic+0x50>
 8000530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000534:	f383 8811 	msr	BASEPRI, r3
 8000538:	f3bf 8f6f 	isb	sy
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	e7fe      	b.n	8000540 <xQueueGenericCreateStatic+0x34>
 8000542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000546:	f383 8811 	msr	BASEPRI, r3
 800054a:	f3bf 8f6f 	isb	sy
 800054e:	f3bf 8f4f 	dsb	sy
 8000552:	e7fe      	b.n	8000552 <xQueueGenericCreateStatic+0x46>
 8000554:	2001      	movs	r0, #1
 8000556:	e7ea      	b.n	800052e <xQueueGenericCreateStatic+0x22>
 8000558:	2000      	movs	r0, #0
 800055a:	e7e8      	b.n	800052e <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800055c:	b90a      	cbnz	r2, 8000562 <xQueueGenericCreateStatic+0x56>
 800055e:	b101      	cbz	r1, 8000562 <xQueueGenericCreateStatic+0x56>
 8000560:	2000      	movs	r0, #0
 8000562:	b940      	cbnz	r0, 8000576 <xQueueGenericCreateStatic+0x6a>
 8000564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000568:	f383 8811 	msr	BASEPRI, r3
 800056c:	f3bf 8f6f 	isb	sy
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	e7fe      	b.n	8000574 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000576:	2048      	movs	r0, #72	; 0x48
 8000578:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800057a:	9803      	ldr	r0, [sp, #12]
 800057c:	2848      	cmp	r0, #72	; 0x48
 800057e:	d008      	beq.n	8000592 <xQueueGenericCreateStatic+0x86>
 8000580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000584:	f383 8811 	msr	BASEPRI, r3
 8000588:	f3bf 8f6f 	isb	sy
 800058c:	f3bf 8f4f 	dsb	sy
 8000590:	e7fe      	b.n	8000590 <xQueueGenericCreateStatic+0x84>
 8000592:	4620      	mov	r0, r4
 8000594:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000596:	9b03      	ldr	r3, [sp, #12]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000598:	9400      	str	r4, [sp, #0]
 800059a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800059e:	f7ff ffa7 	bl	80004f0 <prvInitialiseNewQueue>
	}
 80005a2:	4620      	mov	r0, r4
 80005a4:	b004      	add	sp, #16
 80005a6:	bd10      	pop	{r4, pc}

080005a8 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <prvIdleTask+0x1c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d9fb      	bls.n	80005a8 <prvIdleTask>
			{
				taskYIELD();
 80005b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <prvIdleTask+0x20>)
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	e7f2      	b.n	80005a8 <prvIdleTask>
 80005c2:	bf00      	nop
 80005c4:	2000003c 	.word	0x2000003c
 80005c8:	e000ed04 	.word	0xe000ed04

080005cc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <prvResetNextTaskUnblockTime+0x24>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	b13b      	cbz	r3, 80005e4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <prvResetNextTaskUnblockTime+0x24>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80005dc:	685a      	ldr	r2, [r3, #4]
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <prvResetNextTaskUnblockTime+0x28>)
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80005e4:	f04f 32ff 	mov.w	r2, #4294967295
 80005e8:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <prvResetNextTaskUnblockTime+0x28>)
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000034 	.word	0x20000034
 80005f4:	20000140 	.word	0x20000140

080005f8 <prvInitialiseNewTask>:
{
 80005f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005fc:	4681      	mov	r9, r0
 80005fe:	469a      	mov	sl, r3
 8000600:	9e08      	ldr	r6, [sp, #32]
 8000602:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8000606:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000608:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800060a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800060e:	3a01      	subs	r2, #1
 8000610:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000614:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8000618:	2900      	cmp	r1, #0
 800061a:	d136      	bne.n	800068a <prvInitialiseNewTask+0x92>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800061c:	2300      	movs	r3, #0
 800061e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000622:	e00b      	b.n	800063c <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000624:	5cd0      	ldrb	r0, [r2, r3]
 8000626:	18e1      	adds	r1, r4, r3
 8000628:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800062c:	5cd1      	ldrb	r1, [r2, r3]
 800062e:	b111      	cbz	r1, 8000636 <prvInitialiseNewTask+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000630:	3301      	adds	r3, #1
 8000632:	2b09      	cmp	r3, #9
 8000634:	d9f6      	bls.n	8000624 <prvInitialiseNewTask+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000636:	2300      	movs	r3, #0
 8000638:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800063c:	2e09      	cmp	r6, #9
 800063e:	d900      	bls.n	8000642 <prvInitialiseNewTask+0x4a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000640:	2609      	movs	r6, #9
	pxNewTCB->uxPriority = uxPriority;
 8000642:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8000644:	6426      	str	r6, [r4, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8000646:	2500      	movs	r5, #0
 8000648:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800064a:	1d20      	adds	r0, r4, #4
 800064c:	f7ff fd8b 	bl	8000166 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000650:	f104 0018 	add.w	r0, r4, #24
 8000654:	f7ff fd87 	bl	8000166 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000658:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800065a:	f1c6 060a 	rsb	r6, r6, #10
 800065e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000660:	6264      	str	r4, [r4, #36]	; 0x24
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8000662:	462b      	mov	r3, r5
 8000664:	2b04      	cmp	r3, #4
 8000666:	d913      	bls.n	8000690 <prvInitialiseNewTask+0x98>
		pxNewTCB->ulNotifiedValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	65e3      	str	r3, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800066c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000670:	4652      	mov	r2, sl
 8000672:	4649      	mov	r1, r9
 8000674:	4638      	mov	r0, r7
 8000676:	f7ff fde3 	bl	8000240 <pxPortInitialiseStack>
 800067a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800067c:	f1b8 0f00 	cmp.w	r8, #0
 8000680:	d001      	beq.n	8000686 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000682:	f8c8 4000 	str.w	r4, [r8]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	460a      	mov	r2, r1
 800068c:	2300      	movs	r3, #0
 800068e:	e7d0      	b.n	8000632 <prvInitialiseNewTask+0x3a>
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8000690:	f103 0212 	add.w	r2, r3, #18
 8000694:	2100      	movs	r1, #0
 8000696:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800069a:	3301      	adds	r3, #1
 800069c:	e7e2      	b.n	8000664 <prvInitialiseNewTask+0x6c>
	...

080006a0 <prvInitialiseTaskLists>:
{
 80006a0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80006a2:	2400      	movs	r4, #0
 80006a4:	2c09      	cmp	r4, #9
 80006a6:	d912      	bls.n	80006ce <prvInitialiseTaskLists+0x2e>
	vListInitialise( &xDelayedTaskList1 );
 80006a8:	4d0d      	ldr	r5, [pc, #52]	; (80006e0 <prvInitialiseTaskLists+0x40>)
 80006aa:	4628      	mov	r0, r5
 80006ac:	f7ff fd50 	bl	8000150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80006b0:	4c0c      	ldr	r4, [pc, #48]	; (80006e4 <prvInitialiseTaskLists+0x44>)
 80006b2:	4620      	mov	r0, r4
 80006b4:	f7ff fd4c 	bl	8000150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <prvInitialiseTaskLists+0x48>)
 80006ba:	f7ff fd49 	bl	8000150 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <prvInitialiseTaskLists+0x4c>)
 80006c0:	f7ff fd46 	bl	8000150 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <prvInitialiseTaskLists+0x50>)
 80006c6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <prvInitialiseTaskLists+0x54>)
 80006ca:	601c      	str	r4, [r3, #0]
 80006cc:	bd38      	pop	{r3, r4, r5, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80006ce:	2014      	movs	r0, #20
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <prvInitialiseTaskLists+0x58>)
 80006d2:	fb00 3004 	mla	r0, r0, r4, r3
 80006d6:	f7ff fd3b 	bl	8000150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80006da:	3401      	adds	r4, #1
 80006dc:	e7e2      	b.n	80006a4 <prvInitialiseTaskLists+0x4>
 80006de:	bf00      	nop
 80006e0:	20000118 	.word	0x20000118
 80006e4:	2000012c 	.word	0x2000012c
 80006e8:	20000148 	.word	0x20000148
 80006ec:	20000160 	.word	0x20000160
 80006f0:	20000034 	.word	0x20000034
 80006f4:	20000038 	.word	0x20000038
 80006f8:	2000003c 	.word	0x2000003c

080006fc <prvAddNewTaskToReadyList>:
{
 80006fc:	b510      	push	{r4, lr}
 80006fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8000700:	f7ff fdc8 	bl	8000294 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <prvAddNewTaskToReadyList+0x8c>)
 8000706:	6813      	ldr	r3, [r2, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <prvAddNewTaskToReadyList+0x90>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d12c      	bne.n	800076e <prvAddNewTaskToReadyList+0x72>
			pxCurrentTCB = pxNewTCB;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <prvAddNewTaskToReadyList+0x90>)
 8000716:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000718:	6813      	ldr	r3, [r2, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d101      	bne.n	8000722 <prvAddNewTaskToReadyList+0x26>
				prvInitialiseTaskLists();
 800071e:	f7ff ffbf 	bl	80006a0 <prvInitialiseTaskLists>
		uxTaskNumber++;
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <prvAddNewTaskToReadyList+0x94>)
 8000724:	6813      	ldr	r3, [r2, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800072a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <prvAddNewTaskToReadyList+0x98>)
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	4293      	cmp	r3, r2
 8000732:	d901      	bls.n	8000738 <prvAddNewTaskToReadyList+0x3c>
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <prvAddNewTaskToReadyList+0x98>)
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	1d21      	adds	r1, r4, #4
 800073a:	2014      	movs	r0, #20
 800073c:	4a16      	ldr	r2, [pc, #88]	; (8000798 <prvAddNewTaskToReadyList+0x9c>)
 800073e:	fb00 2003 	mla	r0, r0, r3, r2
 8000742:	f7ff fd13 	bl	800016c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8000746:	f7ff fdc7 	bl	80002d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <prvAddNewTaskToReadyList+0xa0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b16b      	cbz	r3, 800076c <prvAddNewTaskToReadyList+0x70>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <prvAddNewTaskToReadyList+0x90>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <prvAddNewTaskToReadyList+0x70>
			taskYIELD_IF_USING_PREEMPTION();
 800075c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <prvAddNewTaskToReadyList+0xa4>)
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	f3bf 8f4f 	dsb	sy
 8000768:	f3bf 8f6f 	isb	sy
 800076c:	bd10      	pop	{r4, pc}
			if( xSchedulerRunning == pdFALSE )
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <prvAddNewTaskToReadyList+0xa0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1d5      	bne.n	8000722 <prvAddNewTaskToReadyList+0x26>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <prvAddNewTaskToReadyList+0x90>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800077e:	429a      	cmp	r2, r3
 8000780:	d8cf      	bhi.n	8000722 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8000782:	4b02      	ldr	r3, [pc, #8]	; (800078c <prvAddNewTaskToReadyList+0x90>)
 8000784:	601c      	str	r4, [r3, #0]
 8000786:	e7cc      	b.n	8000722 <prvAddNewTaskToReadyList+0x26>
 8000788:	20000104 	.word	0x20000104
 800078c:	20000030 	.word	0x20000030
 8000790:	20000110 	.word	0x20000110
 8000794:	20000114 	.word	0x20000114
 8000798:	2000003c 	.word	0x2000003c
 800079c:	2000015c 	.word	0x2000015c
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	4604      	mov	r4, r0
 80007a8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <prvAddCurrentTaskToDelayedList+0x64>)
 80007ac:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <prvAddCurrentTaskToDelayedList+0x68>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	3004      	adds	r0, #4
 80007b4:	f7ff fd00 	bl	80001b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80007b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80007bc:	d013      	beq.n	80007e6 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80007be:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <prvAddCurrentTaskToDelayedList+0x68>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80007c6:	42a5      	cmp	r5, r4
 80007c8:	d816      	bhi.n	80007f8 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <prvAddCurrentTaskToDelayedList+0x6c>)
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <prvAddCurrentTaskToDelayedList+0x68>)
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	3104      	adds	r1, #4
 80007d4:	f7ff fcd6 	bl	8000184 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <prvAddCurrentTaskToDelayedList+0x70>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	429c      	cmp	r4, r3
 80007de:	d201      	bcs.n	80007e4 <prvAddCurrentTaskToDelayedList+0x40>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <prvAddCurrentTaskToDelayedList+0x70>)
 80007e2:	601c      	str	r4, [r3, #0]
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d0e9      	beq.n	80007be <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <prvAddCurrentTaskToDelayedList+0x68>)
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	3104      	adds	r1, #4
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <prvAddCurrentTaskToDelayedList+0x74>)
 80007f2:	f7ff fcbb 	bl	800016c <vListInsertEnd>
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <prvAddCurrentTaskToDelayedList+0x78>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <prvAddCurrentTaskToDelayedList+0x68>)
 80007fe:	6819      	ldr	r1, [r3, #0]
 8000800:	3104      	adds	r1, #4
 8000802:	f7ff fcbf 	bl	8000184 <vListInsert>
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	20000174 	.word	0x20000174
 800080c:	20000030 	.word	0x20000030
 8000810:	20000034 	.word	0x20000034
 8000814:	20000140 	.word	0x20000140
 8000818:	20000160 	.word	0x20000160
 800081c:	20000038 	.word	0x20000038

08000820 <xTaskCreateStatic>:
	{
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000826:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8000828:	b175      	cbz	r5, 8000848 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800082a:	b1b4      	cbz	r4, 800085a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800082c:	2664      	movs	r6, #100	; 0x64
 800082e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000830:	9e04      	ldr	r6, [sp, #16]
 8000832:	2e64      	cmp	r6, #100	; 0x64
 8000834:	d01a      	beq.n	800086c <xTaskCreateStatic+0x4c>
 8000836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083a:	f383 8811 	msr	BASEPRI, r3
 800083e:	f3bf 8f6f 	isb	sy
 8000842:	f3bf 8f4f 	dsb	sy
 8000846:	e7fe      	b.n	8000846 <xTaskCreateStatic+0x26>
 8000848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084c:	f383 8811 	msr	BASEPRI, r3
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	e7fe      	b.n	8000858 <xTaskCreateStatic+0x38>
 800085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	e7fe      	b.n	800086a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800086c:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800086e:	6325      	str	r5, [r4, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000870:	2500      	movs	r5, #0
 8000872:	9503      	str	r5, [sp, #12]
 8000874:	9402      	str	r4, [sp, #8]
 8000876:	ad05      	add	r5, sp, #20
 8000878:	9501      	str	r5, [sp, #4]
 800087a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800087c:	9500      	str	r5, [sp, #0]
 800087e:	f7ff febb 	bl	80005f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff ff3a 	bl	80006fc <prvAddNewTaskToReadyList>
	}
 8000888:	9805      	ldr	r0, [sp, #20]
 800088a:	b006      	add	sp, #24
 800088c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000890 <vTaskStartScheduler>:
{
 8000890:	b510      	push	{r4, lr}
 8000892:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8000894:	2400      	movs	r4, #0
 8000896:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8000898:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800089a:	aa07      	add	r2, sp, #28
 800089c:	a906      	add	r1, sp, #24
 800089e:	a805      	add	r0, sp, #20
 80008a0:	f000 fa28 	bl	8000cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80008a4:	9b05      	ldr	r3, [sp, #20]
 80008a6:	9302      	str	r3, [sp, #8]
 80008a8:	9b06      	ldr	r3, [sp, #24]
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	9400      	str	r4, [sp, #0]
 80008ae:	4623      	mov	r3, r4
 80008b0:	9a07      	ldr	r2, [sp, #28]
 80008b2:	4910      	ldr	r1, [pc, #64]	; (80008f4 <vTaskStartScheduler+0x64>)
 80008b4:	4810      	ldr	r0, [pc, #64]	; (80008f8 <vTaskStartScheduler+0x68>)
 80008b6:	f7ff ffb3 	bl	8000820 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80008ba:	b118      	cbz	r0, 80008c4 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 80008bc:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 80008be:	b91b      	cbnz	r3, 80008c8 <vTaskStartScheduler+0x38>
}
 80008c0:	b008      	add	sp, #32
 80008c2:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	e7fa      	b.n	80008be <vTaskStartScheduler+0x2e>
 80008c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008cc:	f383 8811 	msr	BASEPRI, r3
 80008d0:	f3bf 8f6f 	isb	sy
 80008d4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <vTaskStartScheduler+0x6c>)
 80008de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80008e0:	2201      	movs	r2, #1
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <vTaskStartScheduler+0x70>)
 80008e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80008e6:	2200      	movs	r2, #0
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <vTaskStartScheduler+0x74>)
 80008ea:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80008ec:	f7ff fd64 	bl	80003b8 <xPortStartScheduler>
 80008f0:	e7e6      	b.n	80008c0 <vTaskStartScheduler+0x30>
 80008f2:	bf00      	nop
 80008f4:	08001c30 	.word	0x08001c30
 80008f8:	080005a9 	.word	0x080005a9
 80008fc:	20000140 	.word	0x20000140
 8000900:	2000015c 	.word	0x2000015c
 8000904:	20000174 	.word	0x20000174

08000908 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8000908:	4a02      	ldr	r2, [pc, #8]	; (8000914 <vTaskSuspendAll+0xc>)
 800090a:	6813      	ldr	r3, [r2, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2000010c 	.word	0x2000010c

08000918 <xTaskIncrementTick>:
{
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800091a:	4b34      	ldr	r3, [pc, #208]	; (80009ec <xTaskIncrementTick+0xd4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d159      	bne.n	80009d6 <xTaskIncrementTick+0xbe>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <xTaskIncrementTick+0xd8>)
 8000924:	681c      	ldr	r4, [r3, #0]
 8000926:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8000928:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800092a:	b9c4      	cbnz	r4, 800095e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <xTaskIncrementTick+0xdc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	b143      	cbz	r3, 8000946 <xTaskIncrementTick+0x2e>
 8000934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000938:	f383 8811 	msr	BASEPRI, r3
 800093c:	f3bf 8f6f 	isb	sy
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	e7fe      	b.n	8000944 <xTaskIncrementTick+0x2c>
 8000946:	4a2b      	ldr	r2, [pc, #172]	; (80009f4 <xTaskIncrementTick+0xdc>)
 8000948:	6811      	ldr	r1, [r2, #0]
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <xTaskIncrementTick+0xe0>)
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	6010      	str	r0, [r2, #0]
 8000950:	6019      	str	r1, [r3, #0]
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <xTaskIncrementTick+0xe4>)
 8000954:	6813      	ldr	r3, [r2, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	f7ff fe37 	bl	80005cc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <xTaskIncrementTick+0xe8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	429c      	cmp	r4, r3
 8000964:	d22d      	bcs.n	80009c2 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 8000966:	2600      	movs	r6, #0
 8000968:	e03a      	b.n	80009e0 <xTaskIncrementTick+0xc8>
							xSwitchRequired = pdTRUE;
 800096a:	2601      	movs	r6, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <xTaskIncrementTick+0xdc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	b343      	cbz	r3, 80009c6 <xTaskIncrementTick+0xae>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <xTaskIncrementTick+0xdc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800097c:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 800097e:	429c      	cmp	r4, r3
 8000980:	d326      	bcc.n	80009d0 <xTaskIncrementTick+0xb8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000982:	1d2f      	adds	r7, r5, #4
 8000984:	4638      	mov	r0, r7
 8000986:	f7ff fc17 	bl	80001b8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800098a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800098c:	b11b      	cbz	r3, 8000996 <xTaskIncrementTick+0x7e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800098e:	f105 0018 	add.w	r0, r5, #24
 8000992:	f7ff fc11 	bl	80001b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000996:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <xTaskIncrementTick+0xec>)
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	4293      	cmp	r3, r2
 800099e:	d901      	bls.n	80009a4 <xTaskIncrementTick+0x8c>
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <xTaskIncrementTick+0xec>)
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009a8:	009a      	lsls	r2, r3, #2
 80009aa:	4639      	mov	r1, r7
 80009ac:	4816      	ldr	r0, [pc, #88]	; (8000a08 <xTaskIncrementTick+0xf0>)
 80009ae:	4410      	add	r0, r2
 80009b0:	f7ff fbdc 	bl	800016c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80009b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <xTaskIncrementTick+0xf4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	429a      	cmp	r2, r3
 80009be:	d2d4      	bcs.n	800096a <xTaskIncrementTick+0x52>
 80009c0:	e7d4      	b.n	800096c <xTaskIncrementTick+0x54>
 80009c2:	2600      	movs	r6, #0
 80009c4:	e7d2      	b.n	800096c <xTaskIncrementTick+0x54>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009c6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <xTaskIncrementTick+0xe8>)
 80009cc:	601a      	str	r2, [r3, #0]
					break;
 80009ce:	e007      	b.n	80009e0 <xTaskIncrementTick+0xc8>
						xNextTaskUnblockTime = xItemValue;
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <xTaskIncrementTick+0xe8>)
 80009d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80009d4:	e004      	b.n	80009e0 <xTaskIncrementTick+0xc8>
		++uxPendedTicks;
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <xTaskIncrementTick+0xf8>)
 80009d8:	6813      	ldr	r3, [r2, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80009de:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <xTaskIncrementTick+0xfc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b103      	cbz	r3, 80009e8 <xTaskIncrementTick+0xd0>
			xSwitchRequired = pdTRUE;
 80009e6:	2601      	movs	r6, #1
}
 80009e8:	4630      	mov	r0, r6
 80009ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ec:	2000010c 	.word	0x2000010c
 80009f0:	20000174 	.word	0x20000174
 80009f4:	20000034 	.word	0x20000034
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000144 	.word	0x20000144
 8000a00:	20000140 	.word	0x20000140
 8000a04:	20000114 	.word	0x20000114
 8000a08:	2000003c 	.word	0x2000003c
 8000a0c:	20000030 	.word	0x20000030
 8000a10:	20000108 	.word	0x20000108
 8000a14:	20000178 	.word	0x20000178

08000a18 <xTaskResumeAll>:
{
 8000a18:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8000a1a:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <xTaskResumeAll+0xd8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	b943      	cbnz	r3, 8000a32 <xTaskResumeAll+0x1a>
 8000a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a24:	f383 8811 	msr	BASEPRI, r3
 8000a28:	f3bf 8f6f 	isb	sy
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	e7fe      	b.n	8000a30 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8000a32:	f7ff fc2f 	bl	8000294 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <xTaskResumeAll+0xd8>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	3a01      	subs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d150      	bne.n	8000ae6 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <xTaskResumeAll+0xdc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	b923      	cbnz	r3, 8000a54 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8000a4a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8000a4c:	f7ff fc44 	bl	80002d8 <vPortExitCritical>
}
 8000a50:	4620      	mov	r0, r4
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
 8000a54:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <xTaskResumeAll+0xe0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	b31b      	cbz	r3, 8000aa4 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <xTaskResumeAll+0xe0>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a62:	f104 0018 	add.w	r0, r4, #24
 8000a66:	f7ff fba7 	bl	80001b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a6a:	1d25      	adds	r5, r4, #4
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f7ff fba3 	bl	80001b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <xTaskResumeAll+0xe4>)
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d901      	bls.n	8000a80 <xTaskResumeAll+0x68>
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <xTaskResumeAll+0xe4>)
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a84:	009a      	lsls	r2, r3, #2
 8000a86:	4629      	mov	r1, r5
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <xTaskResumeAll+0xe8>)
 8000a8a:	4410      	add	r0, r2
 8000a8c:	f7ff fb6e 	bl	800016c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <xTaskResumeAll+0xec>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3dc      	bcc.n	8000a56 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <xTaskResumeAll+0xf0>)
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e7d8      	b.n	8000a56 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8000aa4:	b10c      	cbz	r4, 8000aaa <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8000aa6:	f7ff fd91 	bl	80005cc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <xTaskResumeAll+0xf4>)
 8000aac:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000aae:	b974      	cbnz	r4, 8000ace <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <xTaskResumeAll+0xf0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	b1cb      	cbz	r3, 8000aea <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8000ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <xTaskResumeAll+0xf8>)
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8000ac6:	2401      	movs	r4, #1
 8000ac8:	e7c0      	b.n	8000a4c <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000aca:	3c01      	subs	r4, #1
 8000acc:	d007      	beq.n	8000ade <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8000ace:	f7ff ff23 	bl	8000918 <xTaskIncrementTick>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d0f9      	beq.n	8000aca <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <xTaskResumeAll+0xf0>)
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e7f5      	b.n	8000aca <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <xTaskResumeAll+0xf4>)
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e7e4      	b.n	8000ab0 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8000ae6:	2400      	movs	r4, #0
 8000ae8:	e7b0      	b.n	8000a4c <xTaskResumeAll+0x34>
 8000aea:	2400      	movs	r4, #0
 8000aec:	e7ae      	b.n	8000a4c <xTaskResumeAll+0x34>
 8000aee:	bf00      	nop
 8000af0:	2000010c 	.word	0x2000010c
 8000af4:	20000104 	.word	0x20000104
 8000af8:	20000148 	.word	0x20000148
 8000afc:	20000114 	.word	0x20000114
 8000b00:	2000003c 	.word	0x2000003c
 8000b04:	20000030 	.word	0x20000030
 8000b08:	20000178 	.word	0x20000178
 8000b0c:	20000108 	.word	0x20000108
 8000b10:	e000ed04 	.word	0xe000ed04

08000b14 <vTaskDelay>:
	{
 8000b14:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000b16:	b1a8      	cbz	r0, 8000b44 <vTaskDelay+0x30>
 8000b18:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <vTaskDelay+0x48>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	b143      	cbz	r3, 8000b32 <vTaskDelay+0x1e>
 8000b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b24:	f383 8811 	msr	BASEPRI, r3
 8000b28:	f3bf 8f6f 	isb	sy
 8000b2c:	f3bf 8f4f 	dsb	sy
 8000b30:	e7fe      	b.n	8000b30 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8000b32:	f7ff fee9 	bl	8000908 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b36:	2100      	movs	r1, #0
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f7ff fe33 	bl	80007a4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8000b3e:	f7ff ff6b 	bl	8000a18 <xTaskResumeAll>
 8000b42:	e000      	b.n	8000b46 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8000b44:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8000b46:	b938      	cbnz	r0, 8000b58 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8000b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <vTaskDelay+0x4c>)
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	f3bf 8f4f 	dsb	sy
 8000b54:	f3bf 8f6f 	isb	sy
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000010c 	.word	0x2000010c
 8000b60:	e000ed04 	.word	0xe000ed04

08000b64 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <vTaskSwitchContext+0x84>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	b96b      	cbnz	r3, 8000b86 <vTaskSwitchContext+0x22>
		xYieldPending = pdFALSE;
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <vTaskSwitchContext+0x88>)
 8000b6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <vTaskSwitchContext+0x8c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000b78:	008a      	lsls	r2, r1, #2
 8000b7a:	491e      	ldr	r1, [pc, #120]	; (8000bf4 <vTaskSwitchContext+0x90>)
 8000b7c:	588a      	ldr	r2, [r1, r2]
 8000b7e:	b97a      	cbnz	r2, 8000ba0 <vTaskSwitchContext+0x3c>
 8000b80:	b12b      	cbz	r3, 8000b8e <vTaskSwitchContext+0x2a>
 8000b82:	3b01      	subs	r3, #1
 8000b84:	e7f6      	b.n	8000b74 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8000b86:	2201      	movs	r2, #1
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <vTaskSwitchContext+0x88>)
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	4770      	bx	lr
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	e7fe      	b.n	8000b9e <vTaskSwitchContext+0x3a>
{
 8000ba0:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	009a      	lsls	r2, r3, #2
 8000ba6:	18d4      	adds	r4, r2, r3
 8000ba8:	00a1      	lsls	r1, r4, #2
 8000baa:	4401      	add	r1, r0
 8000bac:	684c      	ldr	r4, [r1, #4]
 8000bae:	6864      	ldr	r4, [r4, #4]
 8000bb0:	604c      	str	r4, [r1, #4]
 8000bb2:	441a      	add	r2, r3
 8000bb4:	0091      	lsls	r1, r2, #2
 8000bb6:	3108      	adds	r1, #8
 8000bb8:	4408      	add	r0, r1
 8000bba:	4284      	cmp	r4, r0
 8000bbc:	d00c      	beq.n	8000bd8 <vTaskSwitchContext+0x74>
 8000bbe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000bc2:	0091      	lsls	r1, r2, #2
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <vTaskSwitchContext+0x90>)
 8000bc6:	440a      	add	r2, r1
 8000bc8:	6852      	ldr	r2, [r2, #4]
 8000bca:	68d1      	ldr	r1, [r2, #12]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <vTaskSwitchContext+0x94>)
 8000bce:	6011      	str	r1, [r2, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <vTaskSwitchContext+0x8c>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bc10      	pop	{r4}
 8000bd6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bd8:	6860      	ldr	r0, [r4, #4]
 8000bda:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000bde:	0091      	lsls	r1, r2, #2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <vTaskSwitchContext+0x90>)
 8000be2:	440a      	add	r2, r1
 8000be4:	6050      	str	r0, [r2, #4]
 8000be6:	e7ea      	b.n	8000bbe <vTaskSwitchContext+0x5a>
 8000be8:	2000010c 	.word	0x2000010c
 8000bec:	20000178 	.word	0x20000178
 8000bf0:	20000114 	.word	0x20000114
 8000bf4:	2000003c 	.word	0x2000003c
 8000bf8:	20000030 	.word	0x20000030

08000bfc <xTaskRemoveFromEventList>:
{
 8000bfc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bfe:	68c3      	ldr	r3, [r0, #12]
 8000c00:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8000c02:	b324      	cbz	r4, 8000c4e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000c04:	f104 0518 	add.w	r5, r4, #24
 8000c08:	4628      	mov	r0, r5
 8000c0a:	f7ff fad5 	bl	80001b8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <xTaskRemoveFromEventList+0x74>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	bb2b      	cbnz	r3, 8000c60 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8000c14:	1d25      	adds	r5, r4, #4
 8000c16:	4628      	mov	r0, r5
 8000c18:	f7ff face 	bl	80001b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <xTaskRemoveFromEventList+0x78>)
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d901      	bls.n	8000c2a <xTaskRemoveFromEventList+0x2e>
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <xTaskRemoveFromEventList+0x78>)
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c2e:	009a      	lsls	r2, r3, #2
 8000c30:	4629      	mov	r1, r5
 8000c32:	4811      	ldr	r0, [pc, #68]	; (8000c78 <xTaskRemoveFromEventList+0x7c>)
 8000c34:	4410      	add	r0, r2
 8000c36:	f7ff fa99 	bl	800016c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000c3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <xTaskRemoveFromEventList+0x80>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d911      	bls.n	8000c6a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8000c46:	2001      	movs	r0, #1
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <xTaskRemoveFromEventList+0x84>)
 8000c4a:	6018      	str	r0, [r3, #0]
 8000c4c:	bd38      	pop	{r3, r4, r5, pc}
 8000c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c52:	f383 8811 	msr	BASEPRI, r3
 8000c56:	f3bf 8f6f 	isb	sy
 8000c5a:	f3bf 8f4f 	dsb	sy
 8000c5e:	e7fe      	b.n	8000c5e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000c60:	4629      	mov	r1, r5
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <xTaskRemoveFromEventList+0x88>)
 8000c64:	f7ff fa82 	bl	800016c <vListInsertEnd>
 8000c68:	e7e7      	b.n	8000c3a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8000c6a:	2000      	movs	r0, #0
}
 8000c6c:	bd38      	pop	{r3, r4, r5, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000010c 	.word	0x2000010c
 8000c74:	20000114 	.word	0x20000114
 8000c78:	2000003c 	.word	0x2000003c
 8000c7c:	20000030 	.word	0x20000030
 8000c80:	20000178 	.word	0x20000178
 8000c84:	20000148 	.word	0x20000148

08000c88 <app_run>:
		break;
	}
	return result;
}
void app_run(void)
{
 8000c88:	b500      	push	{lr}
 8000c8a:	b085      	sub	sp, #20
    /* Create the task without using any dynamic memory allocation. */
    xTask1Handle = xTaskCreateStatic(
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <app_run+0x44>)
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <app_run+0x48>)
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	2301      	movs	r3, #1
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	490d      	ldr	r1, [pc, #52]	; (8000cd4 <app_run+0x4c>)
 8000c9e:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <app_run+0x50>)
 8000ca0:	f7ff fdbe 	bl	8000820 <xTaskCreateStatic>
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <app_run+0x54>)
 8000ca6:	6018      	str	r0, [r3, #0]
                  (void *) NULL,         /* Parameter passed into the task. */
                  TASK1_PRIORITY,        /* Priority at which the task is created. */
                  xTask1Stack,           /* Array to use as the task's stack. */
                  &xTask1Buffer);        /* Variable to hold the task's data structure. */
    /* Create the task without using any dynamic memory allocation. */
    xTask2Handle = xTaskCreateStatic(
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <app_run+0x58>)
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <app_run+0x5c>)
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <app_run+0x60>)
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <app_run+0x64>)
 8000cbc:	f7ff fdb0 	bl	8000820 <xTaskCreateStatic>
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <app_run+0x68>)
 8000cc2:	6018      	str	r0, [r3, #0]
                  (void *) NULL,         /* Parameter passed into the task. */
                  TASK2_PRIORITY,        /* Priority at which the task is created. */
                  xTask2Stack,           /* Array to use as the task's stack. */
                  &xTask2Buffer);        /* Variable to hold the task's data structure. */

    vTaskStartScheduler();
 8000cc4:	f7ff fde4 	bl	8000890 <vTaskStartScheduler>
 8000cc8:	e7fe      	b.n	8000cc8 <app_run+0x40>
 8000cca:	bf00      	nop
 8000ccc:	2000045c 	.word	0x2000045c
 8000cd0:	20000724 	.word	0x20000724
 8000cd4:	08001c38 	.word	0x08001c38
 8000cd8:	08000d3d 	.word	0x08000d3d
 8000cdc:	200003e0 	.word	0x200003e0
 8000ce0:	200006c0 	.word	0x200006c0
 8000ce4:	200004c0 	.word	0x200004c0
 8000ce8:	08001c40 	.word	0x08001c40
 8000cec:	08000d4d 	.word	0x08000d4d
 8000cf0:	200003e4 	.word	0x200003e4

08000cf4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <vApplicationGetIdleTaskMemory+0x10>)
 8000cf6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <vApplicationGetIdleTaskMemory+0x14>)
 8000cfa:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000037c 	.word	0x2000037c
 8000d08:	2000017c 	.word	0x2000017c

08000d0c <valor_conhecido>:
}*/
static volatile uint8_t valor_recebido = 0;
static volatile uint32_t i;
uint8_t valor_conhecido(uint8_t valor)
{
	valor_recebido = valor;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <valor_conhecido+0x24>)
 8000d0e:	7018      	strb	r0, [r3, #0]
	for(i=0;i<200000;i++);
 8000d10:	2200      	movs	r2, #0
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <valor_conhecido+0x28>)
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e003      	b.n	8000d20 <valor_conhecido+0x14>
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <valor_conhecido+0x28>)
 8000d1a:	6813      	ldr	r3, [r2, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <valor_conhecido+0x28>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <valor_conhecido+0x2c>)
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d9f6      	bls.n	8000d18 <valor_conhecido+0xc>
	return valor_recebido;
 8000d2a:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <valor_conhecido+0x24>)
 8000d2c:	7818      	ldrb	r0, [r3, #0]
}
 8000d2e:	4770      	bx	lr
 8000d30:	200003ec 	.word	0x200003ec
 8000d34:	200003e8 	.word	0x200003e8
 8000d38:	00030d3f 	.word	0x00030d3f

08000d3c <task_1>:
void task_1(void *args)
{
 8000d3c:	b508      	push	{r3, lr}
	while(1){
		if(valor_conhecido('a') != 'a'){
 8000d3e:	2061      	movs	r0, #97	; 0x61
 8000d40:	f7ff ffe4 	bl	8000d0c <valor_conhecido>
 8000d44:	2861      	cmp	r0, #97	; 0x61
 8000d46:	d0fa      	beq.n	8000d3e <task_1+0x2>
 8000d48:	e7fe      	b.n	8000d48 <task_1+0xc>
	...

08000d4c <task_2>:
uint8_t decoderQueueStorageArea[DECODER_QUEUE_LENGTH * DECODER_ITEM_SIZE];
QueueHandle_t decoderQueueHandle;


void task_2(void *args)
{
 8000d4c:	b510      	push	{r4, lr}
 8000d4e:	b082      	sub	sp, #8
    /* Create a queue capable of containing 10 uint8_t values. */
	decoderQueueHandle = xQueueCreateStatic( DECODER_QUEUE_LENGTH,
 8000d50:	2300      	movs	r3, #0
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <task_2+0x8c>)
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <task_2+0x90>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f7ff fbd6 	bl	800050c <xQueueGenericCreateStatic>
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <task_2+0x94>)
 8000d62:	6018      	str	r0, [r3, #0]
											 DECODER_ITEM_SIZE,
											 decoderQueueStorageArea,
											 &decoderStaticQueue );
    /* decoderQueueStorageArea was not NULL so decoderQueueHandle should not be NULL. */
    configASSERT( decoderQueueHandle );
 8000d64:	bb78      	cbnz	r0, 8000dc6 <task_2+0x7a>
 8000d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6a:	f383 8811 	msr	BASEPRI, r3
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	e7fe      	b.n	8000d76 <task_2+0x2a>
	while(1){
        if(run == TRUE){
            run = FALSE;
            uint8_t i;
            for(i=0; i<NUMERO_DADOS_VETOR; i++){
 8000d78:	3401      	adds	r4, #1
 8000d7a:	b2e4      	uxtb	r4, r4
 8000d7c:	2c0a      	cmp	r4, #10
 8000d7e:	d81f      	bhi.n	8000dc0 <task_2+0x74>
                exec_decodificador_avirede(serialData[i]);
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <task_2+0x98>)
 8000d82:	5d18      	ldrb	r0, [r3, r4]
 8000d84:	f000 f890 	bl	8000ea8 <exec_decodificador_avirede>
                if(frame_decodificado() == TRUE){
 8000d88:	f000 f888 	bl	8000e9c <frame_decodificado>
 8000d8c:	2801      	cmp	r0, #1
 8000d8e:	d1f3      	bne.n	8000d78 <task_2+0x2c>
                    modeloDecodificado = recebe_modelo_frame();
 8000d90:	f000 f866 	bl	8000e60 <recebe_modelo_frame>
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <task_2+0x9c>)
 8000d96:	7018      	strb	r0, [r3, #0]
                    idDecodificado = recebe_id_frame();
 8000d98:	f000 f868 	bl	8000e6c <recebe_id_frame>
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <task_2+0xa0>)
 8000d9e:	7018      	strb	r0, [r3, #0]
                    nDadosDecodificado = recebe_dados_frame((uint8_t *)dadosDecodificados);
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <task_2+0xa4>)
 8000da2:	f000 f869 	bl	8000e78 <recebe_dados_frame>
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <task_2+0xa8>)
 8000da8:	7018      	strb	r0, [r3, #0]
                    bsp_led_requisita(
 8000daa:	2314      	movs	r3, #20
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	231e      	movs	r3, #30
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000db6:	4611      	mov	r1, r2
 8000db8:	2002      	movs	r0, #2
 8000dba:	f000 f81f 	bl	8000dfc <bsp_led_requisita>
 8000dbe:	e7db      	b.n	8000d78 <task_2+0x2c>
                            30,
                            20);
                }
            }
        }
        vTaskDelay(10);
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f7ff fea7 	bl	8000b14 <vTaskDelay>
        if(run == TRUE){
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <task_2+0xac>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d1f7      	bne.n	8000dc0 <task_2+0x74>
            run = FALSE;
 8000dd0:	2400      	movs	r4, #0
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <task_2+0xac>)
 8000dd4:	701c      	strb	r4, [r3, #0]
            for(i=0; i<NUMERO_DADOS_VETOR; i++){
 8000dd6:	e7d1      	b.n	8000d7c <task_2+0x30>
 8000dd8:	200003f0 	.word	0x200003f0
 8000ddc:	20000924 	.word	0x20000924
 8000de0:	20000a30 	.word	0x20000a30
 8000de4:	08001c48 	.word	0x08001c48
 8000de8:	20000439 	.word	0x20000439
 8000dec:	20000438 	.word	0x20000438
 8000df0:	20000930 	.word	0x20000930
 8000df4:	2000043a 	.word	0x2000043a
 8000df8:	20000004 	.word	0x20000004

08000dfc <bsp_led_requisita>:
        uint32_t atrasoAntes,
        uint32_t atrasoDepois,
        uint32_t tempoLigado,
        uint32_t tempoDesligado,
        uint8_t ciclos)
{
 8000dfc:	b430      	push	{r4, r5}
 8000dfe:	4605      	mov	r5, r0
    uint8_t resultado = FALSE;

    if(emFuncionamento == TRUE){
 8000e00:	4c10      	ldr	r4, [pc, #64]	; (8000e44 <bsp_led_requisita+0x48>)
 8000e02:	7820      	ldrb	r0, [r4, #0]
 8000e04:	2801      	cmp	r0, #1
 8000e06:	d004      	beq.n	8000e12 <bsp_led_requisita+0x16>
        if(prioridade > pPrioridade){
            resultado = TRUE;
        }
    }else{
        resultado = TRUE;
 8000e08:	2001      	movs	r0, #1
    }

    if(resultado == TRUE){
 8000e0a:	2801      	cmp	r0, #1
 8000e0c:	d007      	beq.n	8000e1e <bsp_led_requisita+0x22>

        emFuncionamento = TRUE;
    }

    return resultado;
}
 8000e0e:	bc30      	pop	{r4, r5}
 8000e10:	4770      	bx	lr
        if(prioridade > pPrioridade){
 8000e12:	4c0d      	ldr	r4, [pc, #52]	; (8000e48 <bsp_led_requisita+0x4c>)
 8000e14:	7824      	ldrb	r4, [r4, #0]
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	d3f7      	bcc.n	8000e0a <bsp_led_requisita+0xe>
    uint8_t resultado = FALSE;
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	e7f5      	b.n	8000e0a <bsp_led_requisita+0xe>
        pPrioridade = prioridade;
 8000e1e:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <bsp_led_requisita+0x4c>)
 8000e20:	7025      	strb	r5, [r4, #0]
        pAtrasoAntes = atrasoAntes;
 8000e22:	4c0a      	ldr	r4, [pc, #40]	; (8000e4c <bsp_led_requisita+0x50>)
 8000e24:	6021      	str	r1, [r4, #0]
        pAtrasoDepois = atrasoDepois;
 8000e26:	490a      	ldr	r1, [pc, #40]	; (8000e50 <bsp_led_requisita+0x54>)
 8000e28:	600a      	str	r2, [r1, #0]
        pTempoLigado = tempoLigado;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <bsp_led_requisita+0x58>)
 8000e2c:	6013      	str	r3, [r2, #0]
        pTempoDesligado = tempoDesligado;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <bsp_led_requisita+0x5c>)
 8000e30:	9a02      	ldr	r2, [sp, #8]
 8000e32:	601a      	str	r2, [r3, #0]
        pCiclos = ciclos;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <bsp_led_requisita+0x60>)
 8000e36:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000e3a:	701a      	strb	r2, [r3, #0]
        emFuncionamento = TRUE;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4b01      	ldr	r3, [pc, #4]	; (8000e44 <bsp_led_requisita+0x48>)
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e7e4      	b.n	8000e0e <bsp_led_requisita+0x12>
 8000e44:	2000043b 	.word	0x2000043b
 8000e48:	20000445 	.word	0x20000445
 8000e4c:	2000043c 	.word	0x2000043c
 8000e50:	20000440 	.word	0x20000440
 8000e54:	2000044c 	.word	0x2000044c
 8000e58:	20000448 	.word	0x20000448
 8000e5c:	20000444 	.word	0x20000444

08000e60 <recebe_modelo_frame>:
uint8_t frameDecodificado = 0;

uint8_t recebe_modelo_frame(void)
{
    return modelo;
}
 8000e60:	4b01      	ldr	r3, [pc, #4]	; (8000e68 <recebe_modelo_frame+0x8>)
 8000e62:	7818      	ldrb	r0, [r3, #0]
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000456 	.word	0x20000456

08000e6c <recebe_id_frame>:

uint8_t recebe_id_frame(void)
{
    return id;
}
 8000e6c:	4b01      	ldr	r3, [pc, #4]	; (8000e74 <recebe_id_frame+0x8>)
 8000e6e:	7818      	ldrb	r0, [r3, #0]
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000455 	.word	0x20000455

08000e78 <recebe_dados_frame>:

uint8_t recebe_dados_frame(uint8_t *pDados)
{
    uint8_t i;
    for(i=0;i<nDados;i++){
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e004      	b.n	8000e86 <recebe_dados_frame+0xe>
        pDados[i] = dados[i];
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <recebe_dados_frame+0x1c>)
 8000e7e:	5cd2      	ldrb	r2, [r2, r3]
 8000e80:	54c2      	strb	r2, [r0, r3]
    for(i=0;i<nDados;i++){
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <recebe_dados_frame+0x20>)
 8000e88:	7812      	ldrb	r2, [r2, #0]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d3f6      	bcc.n	8000e7c <recebe_dados_frame+0x4>
    }
    return nDados;
}
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000a34 	.word	0x20000a34
 8000e98:	20000457 	.word	0x20000457

08000e9c <frame_decodificado>:

uint8_t frame_decodificado(void)
{
    return frameDecodificado;
}
 8000e9c:	4b01      	ldr	r3, [pc, #4]	; (8000ea4 <frame_decodificado+0x8>)
 8000e9e:	7818      	ldrb	r0, [r3, #0]
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000454 	.word	0x20000454

08000ea8 <exec_decodificador_avirede>:

void exec_decodificador_avirede(uint8_t dado)
{
    
    switch(estado){
 8000ea8:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	d868      	bhi.n	8000f82 <exec_decodificador_avirede+0xda>
 8000eb0:	e8df f003 	tbb	[pc, r3]
 8000eb4:	1d171104 	.word	0x1d171104
 8000eb8:	413b3526 	.word	0x413b3526
        case AGUARDA_INICIO_DE_FRAME:
            if(dado == 0xAA){
 8000ebc:	28aa      	cmp	r0, #170	; 0xaa
 8000ebe:	d003      	beq.n	8000ec8 <exec_decodificador_avirede+0x20>
                frameDecodificado = 0;
                estado = AGUARDA_MODELO;
            }else{
                frameDecodificado = 0;
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <exec_decodificador_avirede+0xe8>)
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	4770      	bx	lr
                frameDecodificado = 0;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <exec_decodificador_avirede+0xe8>)
 8000ecc:	701a      	strb	r2, [r3, #0]
                estado = AGUARDA_MODELO;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000ed2:	701a      	strb	r2, [r3, #0]
 8000ed4:	4770      	bx	lr
            }
            break;
            
        case AGUARDA_MODELO:
            modelo = dado;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <exec_decodificador_avirede+0xec>)
 8000ed8:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_ID;
 8000eda:	2202      	movs	r2, #2
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000ede:	701a      	strb	r2, [r3, #0]
            break;
 8000ee0:	4770      	bx	lr
            
        case AGUARDA_ID:
            id = dado;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <exec_decodificador_avirede+0xf0>)
 8000ee4:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_NUMERO_DE_DADOS;
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000eea:	701a      	strb	r2, [r3, #0]
            break;
 8000eec:	4770      	bx	lr
            
        case AGUARDA_NUMERO_DE_DADOS:
            nDados = dado;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <exec_decodificador_avirede+0xf4>)
 8000ef0:	7018      	strb	r0, [r3, #0]
            dataCount = 0;
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <exec_decodificador_avirede+0xf8>)
 8000ef6:	701a      	strb	r2, [r3, #0]
            estado = AGUARDA_DADOS;
 8000ef8:	2204      	movs	r2, #4
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000efc:	701a      	strb	r2, [r3, #0]
            break;
 8000efe:	4770      	bx	lr
            
        case AGUARDA_DADOS:
            dados[dataCount] = dado;
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <exec_decodificador_avirede+0xf8>)
 8000f02:	7813      	ldrb	r3, [r2, #0]
 8000f04:	4927      	ldr	r1, [pc, #156]	; (8000fa4 <exec_decodificador_avirede+0xfc>)
 8000f06:	54c8      	strb	r0, [r1, r3]
            dataCount += 1;
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	7013      	strb	r3, [r2, #0]
            if(dataCount >= nDados){
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <exec_decodificador_avirede+0xf4>)
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d338      	bcc.n	8000f88 <exec_decodificador_avirede+0xe0>
                estado = AGUARDA_CHECKSUM_1;
 8000f16:	2205      	movs	r2, #5
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	4770      	bx	lr
            }
            break;
            
        case AGUARDA_CHECKSUM_1:
            cks1 = dado;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <exec_decodificador_avirede+0x100>)
 8000f20:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_CHECKSUM_2;
 8000f22:	2206      	movs	r2, #6
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000f26:	701a      	strb	r2, [r3, #0]
            break;
 8000f28:	4770      	bx	lr
            
        case AGUARDA_CHECKSUM_2:
            cks2 = dado;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <exec_decodificador_avirede+0x104>)
 8000f2c:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_FIM_DE_FRAME;
 8000f2e:	2207      	movs	r2, #7
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000f32:	701a      	strb	r2, [r3, #0]
            break;
 8000f34:	4770      	bx	lr
        
        case AGUARDA_FIM_DE_FRAME:
            if(dado == 0x55){
 8000f36:	2855      	cmp	r0, #85	; 0x55
 8000f38:	d003      	beq.n	8000f42 <exec_decodificador_avirede+0x9a>
                }else{
                    estado = AGUARDA_INICIO_DE_FRAME;
                }
                
            }else{
                estado = AGUARDA_INICIO_DE_FRAME;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	4770      	bx	lr
                checksumRecebido = cks1;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <exec_decodificador_avirede+0x100>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
                checksumRecebido |= cks2;
 8000f46:	4a19      	ldr	r2, [pc, #100]	; (8000fac <exec_decodificador_avirede+0x104>)
 8000f48:	7810      	ldrb	r0, [r2, #0]
 8000f4a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                for(i=0; i<nDados; i++){
 8000f4e:	2300      	movs	r3, #0
                uint16_t checksumCalculado = 0;
 8000f50:	461a      	mov	r2, r3
                for(i=0; i<nDados; i++){
 8000f52:	4912      	ldr	r1, [pc, #72]	; (8000f9c <exec_decodificador_avirede+0xf4>)
 8000f54:	7809      	ldrb	r1, [r1, #0]
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d206      	bcs.n	8000f68 <exec_decodificador_avirede+0xc0>
                    checksumCalculado += dados[i];
 8000f5a:	4912      	ldr	r1, [pc, #72]	; (8000fa4 <exec_decodificador_avirede+0xfc>)
 8000f5c:	5cc9      	ldrb	r1, [r1, r3]
 8000f5e:	440a      	add	r2, r1
 8000f60:	b292      	uxth	r2, r2
                for(i=0; i<nDados; i++){
 8000f62:	3301      	adds	r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	e7f4      	b.n	8000f52 <exec_decodificador_avirede+0xaa>
                if(checksumCalculado == checksumRecebido){
 8000f68:	4282      	cmp	r2, r0
 8000f6a:	d003      	beq.n	8000f74 <exec_decodificador_avirede+0xcc>
                    estado = AGUARDA_INICIO_DE_FRAME;
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	4770      	bx	lr
                    frameDecodificado = 1;
 8000f74:	2201      	movs	r2, #1
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <exec_decodificador_avirede+0xe8>)
 8000f78:	701a      	strb	r2, [r3, #0]
                    estado = AGUARDA_INICIO_DE_FRAME;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	4770      	bx	lr
            }
            break;
        
        default:
            estado = AGUARDA_INICIO_DE_FRAME;
 8000f82:	2200      	movs	r2, #0
 8000f84:	4b01      	ldr	r3, [pc, #4]	; (8000f8c <exec_decodificador_avirede+0xe4>)
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000453 	.word	0x20000453
 8000f90:	20000454 	.word	0x20000454
 8000f94:	20000456 	.word	0x20000456
 8000f98:	20000455 	.word	0x20000455
 8000f9c:	20000457 	.word	0x20000457
 8000fa0:	20000452 	.word	0x20000452
 8000fa4:	20000a34 	.word	0x20000a34
 8000fa8:	20000450 	.word	0x20000450
 8000fac:	20000451 	.word	0x20000451

08000fb0 <run_current_time>:

static volatile uint32_t currentTime = 0;

void run_current_time(void)
{
    currentTime++;
 8000fb0:	4a02      	ldr	r2, [pc, #8]	; (8000fbc <run_current_time+0xc>)
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000458 	.word	0x20000458

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x20>)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f81b 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 fd50 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f000 fd2c 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	bd08      	pop	{r3, pc}
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x10>)
 8000fe6:	6811      	ldr	r1, [r2, #0]
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_IncTick+0x14>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	440b      	add	r3, r1
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000b34 	.word	0x20000b34
 8000ff8:	20000005 	.word	0x20000005

08000ffc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_GetTick+0x8>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000b34 	.word	0x20000b34

08001008 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800100a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001014:	0200      	lsls	r0, r0, #8
 8001016:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800101c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001020:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001024:	60d0      	str	r0, [r2, #12]
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_NVIC_SetPriority+0x5c>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001036:	f1c3 0407 	rsb	r4, r3, #7
 800103a:	2c04      	cmp	r4, #4
 800103c:	bf28      	it	cs
 800103e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001040:	1d1d      	adds	r5, r3, #4
 8001042:	2d06      	cmp	r5, #6
 8001044:	d917      	bls.n	8001076 <HAL_NVIC_SetPriority+0x4a>
 8001046:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	2501      	movs	r5, #1
 800104a:	fa05 f404 	lsl.w	r4, r5, r4
 800104e:	3c01      	subs	r4, #1
 8001050:	4021      	ands	r1, r4
 8001052:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	fa05 f303 	lsl.w	r3, r5, r3
 8001058:	3b01      	subs	r3, #1
 800105a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800105e:	2800      	cmp	r0, #0
 8001060:	db0b      	blt.n	800107a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	0109      	lsls	r1, r1, #4
 8001064:	b2c9      	uxtb	r1, r1
 8001066:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800106a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800106e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001072:	bc30      	pop	{r4, r5}
 8001074:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	2300      	movs	r3, #0
 8001078:	e7e6      	b.n	8001048 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	f000 000f 	and.w	r0, r0, #15
 800107e:	0109      	lsls	r1, r1, #4
 8001080:	b2c9      	uxtb	r1, r1
 8001082:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_NVIC_SetPriority+0x60>)
 8001084:	5419      	strb	r1, [r3, r0]
 8001086:	e7f4      	b.n	8001072 <HAL_NVIC_SetPriority+0x46>
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000ed14 	.word	0xe000ed14

08001090 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001090:	0942      	lsrs	r2, r0, #5
 8001092:	f000 001f 	and.w	r0, r0, #31
 8001096:	2301      	movs	r3, #1
 8001098:	fa03 f000 	lsl.w	r0, r3, r0
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <HAL_NVIC_EnableIRQ+0x14>)
 800109e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010a8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <RCC_Delay+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <RCC_Delay+0x28>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	0a5b      	lsrs	r3, r3, #9
 80010b6:	fb00 f003 	mul.w	r0, r0, r3
 80010ba:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80010bc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80010be:	9b01      	ldr	r3, [sp, #4]
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	9201      	str	r2, [sp, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f9      	bne.n	80010bc <RCC_Delay+0x14>
}
 80010c8:	b002      	add	sp, #8
 80010ca:	4770      	bx	lr
 80010cc:	20000008 	.word	0x20000008
 80010d0:	10624dd3 	.word	0x10624dd3

080010d4 <HAL_RCC_OscConfig>:
{
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	6803      	ldr	r3, [r0, #0]
 80010dc:	f013 0f01 	tst.w	r3, #1
 80010e0:	d03d      	beq.n	800115e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e2:	4bac      	ldr	r3, [pc, #688]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d02e      	beq.n	800114c <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ee:	4ba9      	ldr	r3, [pc, #676]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d023      	beq.n	8001142 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d051      	beq.n	80011a6 <HAL_RCC_OscConfig+0xd2>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d155      	bne.n	80011b2 <HAL_RCC_OscConfig+0xde>
 8001106:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800110a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800111c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d060      	beq.n	80011e6 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001124:	f7ff ff6a 	bl	8000ffc <HAL_GetTick>
 8001128:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	4b9a      	ldr	r3, [pc, #616]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001132:	d114      	bne.n	800115e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff ff62 	bl	8000ffc <HAL_GetTick>
 8001138:	1b40      	subs	r0, r0, r5
 800113a:	2864      	cmp	r0, #100	; 0x64
 800113c:	d9f5      	bls.n	800112a <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 800113e:	2003      	movs	r0, #3
 8001140:	e1af      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001142:	4b94      	ldr	r3, [pc, #592]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800114a:	d0d6      	beq.n	80010fa <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	4b91      	ldr	r3, [pc, #580]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001154:	d003      	beq.n	800115e <HAL_RCC_OscConfig+0x8a>
 8001156:	6863      	ldr	r3, [r4, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 819f 	beq.w	800149c <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	f013 0f02 	tst.w	r3, #2
 8001164:	d065      	beq.n	8001232 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001166:	4b8b      	ldr	r3, [pc, #556]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f013 0f0c 	tst.w	r3, #12
 800116e:	d04e      	beq.n	800120e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001170:	4b88      	ldr	r3, [pc, #544]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b08      	cmp	r3, #8
 800117a:	d043      	beq.n	8001204 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117c:	6923      	ldr	r3, [r4, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d079      	beq.n	8001276 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8001182:	2201      	movs	r2, #1
 8001184:	4b84      	ldr	r3, [pc, #528]	; (8001398 <HAL_RCC_OscConfig+0x2c4>)
 8001186:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001188:	f7ff ff38 	bl	8000ffc <HAL_GetTick>
 800118c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	4b81      	ldr	r3, [pc, #516]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f013 0f02 	tst.w	r3, #2
 8001196:	d165      	bne.n	8001264 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff ff30 	bl	8000ffc <HAL_GetTick>
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	2802      	cmp	r0, #2
 80011a0:	d9f5      	bls.n	800118e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	e17d      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a6:	4a7b      	ldr	r2, [pc, #492]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e7b5      	b.n	800111e <HAL_RCC_OscConfig+0x4a>
 80011b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b6:	d009      	beq.n	80011cc <HAL_RCC_OscConfig+0xf8>
 80011b8:	4b76      	ldr	r3, [pc, #472]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e7a8      	b.n	800111e <HAL_RCC_OscConfig+0x4a>
 80011cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011d0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e79b      	b.n	800111e <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80011e6:	f7ff ff09 	bl	8000ffc <HAL_GetTick>
 80011ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ec:	4b69      	ldr	r3, [pc, #420]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011f4:	d0b3      	beq.n	800115e <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f6:	f7ff ff01 	bl	8000ffc <HAL_GetTick>
 80011fa:	1b40      	subs	r0, r0, r5
 80011fc:	2864      	cmp	r0, #100	; 0x64
 80011fe:	d9f5      	bls.n	80011ec <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001200:	2003      	movs	r0, #3
 8001202:	e14e      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001204:	4b63      	ldr	r3, [pc, #396]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800120c:	d1b6      	bne.n	800117c <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b61      	ldr	r3, [pc, #388]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f013 0f02 	tst.w	r3, #2
 8001216:	d004      	beq.n	8001222 <HAL_RCC_OscConfig+0x14e>
 8001218:	6923      	ldr	r3, [r4, #16]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 800121e:	2001      	movs	r0, #1
 8001220:	e13f      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4a5c      	ldr	r2, [pc, #368]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800122a:	6961      	ldr	r1, [r4, #20]
 800122c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001230:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	f013 0f08 	tst.w	r3, #8
 8001238:	d032      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123a:	69a3      	ldr	r3, [r4, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d06e      	beq.n	800131e <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8001240:	2201      	movs	r2, #1
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_RCC_OscConfig+0x2c8>)
 8001244:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001246:	f7ff fed9 	bl	8000ffc <HAL_GetTick>
 800124a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	f013 0f02 	tst.w	r3, #2
 8001254:	d121      	bne.n	800129a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fed1 	bl	8000ffc <HAL_GetTick>
 800125a:	1b40      	subs	r0, r0, r5
 800125c:	2802      	cmp	r0, #2
 800125e:	d9f5      	bls.n	800124c <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8001260:	2003      	movs	r0, #3
 8001262:	e11e      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800126c:	6961      	ldr	r1, [r4, #20]
 800126e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e7dd      	b.n	8001232 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8001276:	2200      	movs	r2, #0
 8001278:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_OscConfig+0x2c4>)
 800127a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800127c:	f7ff febe 	bl	8000ffc <HAL_GetTick>
 8001280:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f013 0f02 	tst.w	r3, #2
 800128a:	d0d2      	beq.n	8001232 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff feb6 	bl	8000ffc <HAL_GetTick>
 8001290:	1b40      	subs	r0, r0, r5
 8001292:	2802      	cmp	r0, #2
 8001294:	d9f5      	bls.n	8001282 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001296:	2003      	movs	r0, #3
 8001298:	e103      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff ff04 	bl	80010a8 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f013 0f04 	tst.w	r3, #4
 80012a6:	f000 8099 	beq.w	80013dc <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012b2:	d146      	bne.n	8001342 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012bc:	61da      	str	r2, [r3, #28]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012c8:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_RCC_OscConfig+0x2cc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012d2:	d038      	beq.n	8001346 <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d4:	68e3      	ldr	r3, [r4, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d049      	beq.n	800136e <HAL_RCC_OscConfig+0x29a>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d14d      	bne.n	800137a <HAL_RCC_OscConfig+0x2a6>
 80012de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012e6:	6a1a      	ldr	r2, [r3, #32]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	621a      	str	r2, [r3, #32]
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	f022 0204 	bic.w	r2, r2, #4
 80012f4:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f6:	68e3      	ldr	r3, [r4, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05d      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80012fc:	f7ff fe7e 	bl	8000ffc <HAL_GetTick>
 8001300:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	f013 0f02 	tst.w	r3, #2
 800130a:	d166      	bne.n	80013da <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff fe76 	bl	8000ffc <HAL_GetTick>
 8001310:	1b80      	subs	r0, r0, r6
 8001312:	f241 3388 	movw	r3, #5000	; 0x1388
 8001316:	4298      	cmp	r0, r3
 8001318:	d9f3      	bls.n	8001302 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 800131a:	2003      	movs	r0, #3
 800131c:	e0c1      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 800131e:	2200      	movs	r2, #0
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_RCC_OscConfig+0x2c8>)
 8001322:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001324:	f7ff fe6a 	bl	8000ffc <HAL_GetTick>
 8001328:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	f013 0f02 	tst.w	r3, #2
 8001332:	d0b5      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fe62 	bl	8000ffc <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2802      	cmp	r0, #2
 800133c:	d9f5      	bls.n	800132a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800133e:	2003      	movs	r0, #3
 8001340:	e0af      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2500      	movs	r5, #0
 8001344:	e7c1      	b.n	80012ca <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_RCC_OscConfig+0x2cc>)
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001350:	f7ff fe54 	bl	8000ffc <HAL_GetTick>
 8001354:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_OscConfig+0x2cc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800135e:	d1b9      	bne.n	80012d4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001360:	f7ff fe4c 	bl	8000ffc <HAL_GetTick>
 8001364:	1b80      	subs	r0, r0, r6
 8001366:	2864      	cmp	r0, #100	; 0x64
 8001368:	d9f5      	bls.n	8001356 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 800136a:	2003      	movs	r0, #3
 800136c:	e099      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001370:	6a13      	ldr	r3, [r2, #32]
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6213      	str	r3, [r2, #32]
 8001378:	e7bd      	b.n	80012f6 <HAL_RCC_OscConfig+0x222>
 800137a:	2b05      	cmp	r3, #5
 800137c:	d012      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2d0>
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_RCC_OscConfig+0x2c0>)
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	6a1a      	ldr	r2, [r3, #32]
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	621a      	str	r2, [r3, #32]
 8001390:	e7b1      	b.n	80012f6 <HAL_RCC_OscConfig+0x222>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	42420000 	.word	0x42420000
 800139c:	42420480 	.word	0x42420480
 80013a0:	40007000 	.word	0x40007000
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 80013a6:	6a1a      	ldr	r2, [r3, #32]
 80013a8:	f042 0204 	orr.w	r2, r2, #4
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	621a      	str	r2, [r3, #32]
 80013b6:	e79e      	b.n	80012f6 <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 80013b8:	f7ff fe20 	bl	8000ffc <HAL_GetTick>
 80013bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	f013 0f02 	tst.w	r3, #2
 80013c6:	d008      	beq.n	80013da <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fe18 	bl	8000ffc <HAL_GetTick>
 80013cc:	1b80      	subs	r0, r0, r6
 80013ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80013d2:	4298      	cmp	r0, r3
 80013d4:	d9f3      	bls.n	80013be <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80013d6:	2003      	movs	r0, #3
 80013d8:	e063      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 80013da:	b9e5      	cbnz	r5, 8001416 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013dc:	69e3      	ldr	r3, [r4, #28]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d05e      	beq.n	80014a0 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 80013e4:	6852      	ldr	r2, [r2, #4]
 80013e6:	f002 020c 	and.w	r2, r2, #12
 80013ea:	2a08      	cmp	r2, #8
 80013ec:	d05b      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d017      	beq.n	8001422 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80013f2:	2200      	movs	r2, #0
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_RCC_OscConfig+0x3dc>)
 80013f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013f8:	f7ff fe00 	bl	8000ffc <HAL_GetTick>
 80013fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001406:	d047      	beq.n	8001498 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fdf8 	bl	8000ffc <HAL_GetTick>
 800140c:	1b00      	subs	r0, r0, r4
 800140e:	2802      	cmp	r0, #2
 8001410:	d9f5      	bls.n	80013fe <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
 8001414:	e045      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 8001418:	69d3      	ldr	r3, [r2, #28]
 800141a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141e:	61d3      	str	r3, [r2, #28]
 8001420:	e7dc      	b.n	80013dc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001422:	2200      	movs	r2, #0
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_RCC_OscConfig+0x3dc>)
 8001426:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001428:	f7ff fde8 	bl	8000ffc <HAL_GetTick>
 800142c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001436:	d006      	beq.n	8001446 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fde0 	bl	8000ffc <HAL_GetTick>
 800143c:	1b40      	subs	r0, r0, r5
 800143e:	2802      	cmp	r0, #2
 8001440:	d9f5      	bls.n	800142e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001442:	2003      	movs	r0, #3
 8001444:	e02d      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001446:	6a23      	ldr	r3, [r4, #32]
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144c:	d01a      	beq.n	8001484 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800144e:	4917      	ldr	r1, [pc, #92]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 8001450:	684b      	ldr	r3, [r1, #4]
 8001452:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001456:	6a22      	ldr	r2, [r4, #32]
 8001458:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800145a:	4302      	orrs	r2, r0
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001460:	2201      	movs	r2, #1
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_RCC_OscConfig+0x3dc>)
 8001464:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001466:	f7ff fdc9 	bl	8000ffc <HAL_GetTick>
 800146a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001474:	d10e      	bne.n	8001494 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fdc1 	bl	8000ffc <HAL_GetTick>
 800147a:	1b00      	subs	r0, r0, r4
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f5      	bls.n	800146c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e00e      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_RCC_OscConfig+0x3d8>)
 8001486:	6853      	ldr	r3, [r2, #4]
 8001488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800148c:	68a1      	ldr	r1, [r4, #8]
 800148e:	430b      	orrs	r3, r1
 8001490:	6053      	str	r3, [r2, #4]
 8001492:	e7dc      	b.n	800144e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001494:	2000      	movs	r0, #0
 8001496:	e004      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
 8001498:	2000      	movs	r0, #0
 800149a:	e002      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 800149c:	2001      	movs	r0, #1
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 80014a0:	2000      	movs	r0, #0
}
 80014a2:	b002      	add	sp, #8
 80014a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	e7fb      	b.n	80014a2 <HAL_RCC_OscConfig+0x3ce>
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	42420060 	.word	0x42420060

080014b4 <HAL_RCC_GetSysClockFreq>:
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014b8:	4c15      	ldr	r4, [pc, #84]	; (8001510 <HAL_RCC_GetSysClockFreq+0x5c>)
 80014ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014be:	f10d 0e18 	add.w	lr, sp, #24
 80014c2:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014c6:	8a23      	ldrh	r3, [r4, #16]
 80014c8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_GetSysClockFreq+0x60>)
 80014ce:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014d0:	f003 020c 	and.w	r2, r3, #12
 80014d4:	2a08      	cmp	r2, #8
 80014d6:	d118      	bne.n	800150a <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014d8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80014dc:	4472      	add	r2, lr
 80014de:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014e6:	d103      	bne.n	80014f0 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <HAL_RCC_GetSysClockFreq+0x64>)
 80014ea:	fb00 f002 	mul.w	r0, r0, r2
 80014ee:	e00d      	b.n	800150c <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_RCC_GetSysClockFreq+0x60>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80014f8:	4473      	add	r3, lr
 80014fa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <HAL_RCC_GetSysClockFreq+0x68>)
 8001500:	fb00 f002 	mul.w	r0, r0, r2
 8001504:	fbb0 f0f3 	udiv	r0, r0, r3
 8001508:	e000      	b.n	800150c <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800150c:	b006      	add	sp, #24
 800150e:	bd10      	pop	{r4, pc}
 8001510:	08001c1c 	.word	0x08001c1c
 8001514:	40021000 	.word	0x40021000
 8001518:	003d0900 	.word	0x003d0900
 800151c:	007a1200 	.word	0x007a1200

08001520 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001520:	4b62      	ldr	r3, [pc, #392]	; (80016ac <HAL_RCC_ClockConfig+0x18c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	428b      	cmp	r3, r1
 800152a:	d20c      	bcs.n	8001546 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152c:	4a5f      	ldr	r2, [pc, #380]	; (80016ac <HAL_RCC_ClockConfig+0x18c>)
 800152e:	6813      	ldr	r3, [r2, #0]
 8001530:	f023 0307 	bic.w	r3, r3, #7
 8001534:	430b      	orrs	r3, r1
 8001536:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	4299      	cmp	r1, r3
 8001540:	d001      	beq.n	8001546 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	4770      	bx	lr
{
 8001546:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	6803      	ldr	r3, [r0, #0]
 800154a:	f013 0f02 	tst.w	r3, #2
 800154e:	d017      	beq.n	8001580 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	f013 0f04 	tst.w	r3, #4
 8001554:	d004      	beq.n	8001560 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001556:	4a56      	ldr	r2, [pc, #344]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 8001558:	6853      	ldr	r3, [r2, #4]
 800155a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800155e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	6803      	ldr	r3, [r0, #0]
 8001562:	f013 0f08 	tst.w	r3, #8
 8001566:	d004      	beq.n	8001572 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 800156a:	6853      	ldr	r3, [r2, #4]
 800156c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001570:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001572:	4a4f      	ldr	r2, [pc, #316]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 8001574:	6853      	ldr	r3, [r2, #4]
 8001576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800157a:	6884      	ldr	r4, [r0, #8]
 800157c:	4323      	orrs	r3, r4
 800157e:	6053      	str	r3, [r2, #4]
 8001580:	460d      	mov	r5, r1
 8001582:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001584:	6803      	ldr	r3, [r0, #0]
 8001586:	f013 0f01 	tst.w	r3, #1
 800158a:	d052      	beq.n	8001632 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158c:	6843      	ldr	r3, [r0, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d023      	beq.n	80015da <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001592:	2b02      	cmp	r3, #2
 8001594:	d028      	beq.n	80015e8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4a46      	ldr	r2, [pc, #280]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f012 0f02 	tst.w	r2, #2
 800159e:	f000 8082 	beq.w	80016a6 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a2:	4943      	ldr	r1, [pc, #268]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 80015a4:	684a      	ldr	r2, [r1, #4]
 80015a6:	f022 0203 	bic.w	r2, r2, #3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80015ae:	f7ff fd25 	bl	8000ffc <HAL_GetTick>
 80015b2:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b4:	6863      	ldr	r3, [r4, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d01d      	beq.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d02a      	beq.n	8001614 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f013 0f0c 	tst.w	r3, #12
 80015c6:	d034      	beq.n	8001632 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff fd18 	bl	8000ffc <HAL_GetTick>
 80015cc:	1b80      	subs	r0, r0, r6
 80015ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d9f3      	bls.n	80015be <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 80015d6:	2003      	movs	r0, #3
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4a35      	ldr	r2, [pc, #212]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80015e2:	d1de      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80015e4:	2001      	movs	r0, #1
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e8:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015f0:	d1d7      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d017      	beq.n	8001632 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001602:	f7ff fcfb 	bl	8000ffc <HAL_GetTick>
 8001606:	1b80      	subs	r0, r0, r6
 8001608:	f241 3388 	movw	r3, #5000	; 0x1388
 800160c:	4298      	cmp	r0, r3
 800160e:	d9f2      	bls.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001610:	2003      	movs	r0, #3
 8001612:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d008      	beq.n	8001632 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff fcec 	bl	8000ffc <HAL_GetTick>
 8001624:	1b80      	subs	r0, r0, r6
 8001626:	f241 3388 	movw	r3, #5000	; 0x1388
 800162a:	4298      	cmp	r0, r3
 800162c:	d9f2      	bls.n	8001614 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 800162e:	2003      	movs	r0, #3
 8001630:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_ClockConfig+0x18c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	429d      	cmp	r5, r3
 800163c:	d20c      	bcs.n	8001658 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_RCC_ClockConfig+0x18c>)
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f023 0307 	bic.w	r3, r3, #7
 8001646:	432b      	orrs	r3, r5
 8001648:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	429d      	cmp	r5, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001654:	2001      	movs	r0, #1
}
 8001656:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	f013 0f04 	tst.w	r3, #4
 800165e:	d006      	beq.n	800166e <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 8001662:	6853      	ldr	r3, [r2, #4]
 8001664:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001668:	68e1      	ldr	r1, [r4, #12]
 800166a:	430b      	orrs	r3, r1
 800166c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	f013 0f08 	tst.w	r3, #8
 8001674:	d007      	beq.n	8001686 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 8001678:	6853      	ldr	r3, [r2, #4]
 800167a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800167e:	6921      	ldr	r1, [r4, #16]
 8001680:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001684:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001686:	f7ff ff15 	bl	80014b4 <HAL_RCC_GetSysClockFreq>
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_RCC_ClockConfig+0x194>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	40d8      	lsrs	r0, r3
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_RCC_ClockConfig+0x198>)
 800169a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800169c:	2000      	movs	r0, #0
 800169e:	f000 f9eb 	bl	8001a78 <HAL_InitTick>
  return HAL_OK;
 80016a2:	2000      	movs	r0, #0
 80016a4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
 80016aa:	bf00      	nop
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08001c54 	.word	0x08001c54
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_RCC_GetHCLKFreq>:
}
 80016bc:	4b01      	ldr	r3, [pc, #4]	; (80016c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008

080016c8 <HAL_RCC_GetPCLK1Freq>:
{
 80016c8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ca:	f7ff fff7 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80016d6:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
}    
 80016da:	40d8      	lsrs	r0, r3
 80016dc:	bd08      	pop	{r3, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08001c64 	.word	0x08001c64

080016e8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016e8:	230f      	movs	r3, #15
 80016ea:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_GetClockConfig+0x34>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	f002 0203 	and.w	r2, r2, #3
 80016f4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80016fc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001704:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800170e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_RCC_GetClockConfig+0x38>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	600b      	str	r3, [r1, #0]
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001724:	4770      	bx	lr

08001726 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001726:	6802      	ldr	r2, [r0, #0]
 8001728:	68d3      	ldr	r3, [r2, #12]
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001730:	6802      	ldr	r2, [r0, #0]
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 800173a:	2000      	movs	r0, #0
 800173c:	4770      	bx	lr

0800173e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173e:	4770      	bx	lr

08001740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001740:	4770      	bx	lr

08001742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001742:	4770      	bx	lr

08001744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001744:	4770      	bx	lr

08001746 <HAL_TIM_IRQHandler>:
{
 8001746:	b510      	push	{r4, lr}
 8001748:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800174a:	6803      	ldr	r3, [r0, #0]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	f012 0f02 	tst.w	r2, #2
 8001752:	d011      	beq.n	8001778 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	f012 0f02 	tst.w	r2, #2
 800175a:	d00d      	beq.n	8001778 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800175c:	f06f 0202 	mvn.w	r2, #2
 8001760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001762:	2301      	movs	r3, #1
 8001764:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001766:	6803      	ldr	r3, [r0, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f013 0f03 	tst.w	r3, #3
 800176e:	d070      	beq.n	8001852 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001770:	f7ff ffe6 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001774:	2300      	movs	r3, #0
 8001776:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	f012 0f04 	tst.w	r2, #4
 8001780:	d012      	beq.n	80017a8 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	f012 0f04 	tst.w	r2, #4
 8001788:	d00e      	beq.n	80017a8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800178a:	f06f 0204 	mvn.w	r2, #4
 800178e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001790:	2302      	movs	r3, #2
 8001792:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f413 7f40 	tst.w	r3, #768	; 0x300
 800179c:	d05f      	beq.n	800185e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff ffce 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a4:	2300      	movs	r3, #0
 80017a6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	f012 0f08 	tst.w	r2, #8
 80017b0:	d012      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	f012 0f08 	tst.w	r2, #8
 80017b8:	d00e      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017ba:	f06f 0208 	mvn.w	r2, #8
 80017be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017c0:	2304      	movs	r3, #4
 80017c2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f013 0f03 	tst.w	r3, #3
 80017cc:	d04e      	beq.n	800186c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff ffb6 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d4:	2300      	movs	r3, #0
 80017d6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	f012 0f10 	tst.w	r2, #16
 80017e0:	d012      	beq.n	8001808 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	f012 0f10 	tst.w	r2, #16
 80017e8:	d00e      	beq.n	8001808 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017ea:	f06f 0210 	mvn.w	r2, #16
 80017ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017f0:	2308      	movs	r3, #8
 80017f2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80017fc:	d03d      	beq.n	800187a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff ff9e 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001804:	2300      	movs	r3, #0
 8001806:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	f012 0f01 	tst.w	r2, #1
 8001810:	d003      	beq.n	800181a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	f012 0f01 	tst.w	r2, #1
 8001818:	d136      	bne.n	8001888 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001822:	d003      	beq.n	800182c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	f012 0f80 	tst.w	r2, #128	; 0x80
 800182a:	d134      	bne.n	8001896 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	f012 0f40 	tst.w	r2, #64	; 0x40
 800183c:	d132      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	f012 0f20 	tst.w	r2, #32
 8001846:	d003      	beq.n	8001850 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	f012 0f20 	tst.w	r2, #32
 800184e:	d130      	bne.n	80018b2 <HAL_TIM_IRQHandler+0x16c>
 8001850:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001852:	f7ff ff74 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff ff73 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 800185c:	e78a      	b.n	8001774 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff ff6d 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff ff6c 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 800186a:	e79b      	b.n	80017a4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff ff66 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff ff65 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 8001878:	e7ac      	b.n	80017d4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff ff5f 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff ff5e 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 8001886:	e7bd      	b.n	8001804 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001888:	f06f 0201 	mvn.w	r2, #1
 800188c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800188e:	4620      	mov	r0, r4
 8001890:	f000 f8c4 	bl	8001a1c <HAL_TIM_PeriodElapsedCallback>
 8001894:	e7c1      	b.n	800181a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001896:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800189a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800189c:	4620      	mov	r0, r4
 800189e:	f000 f865 	bl	800196c <HAL_TIMEx_BreakCallback>
 80018a2:	e7c3      	b.n	800182c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ff4a 	bl	8001744 <HAL_TIM_TriggerCallback>
 80018b0:	e7c5      	b.n	800183e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018b2:	f06f 0220 	mvn.w	r2, #32
 80018b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80018b8:	4620      	mov	r0, r4
 80018ba:	f000 f856 	bl	800196a <HAL_TIMEx_CommutationCallback>
}
 80018be:	e7c7      	b.n	8001850 <HAL_TIM_IRQHandler+0x10a>

080018c0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80018c0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018c2:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <TIM_Base_SetConfig+0x74>)
 80018c4:	4290      	cmp	r0, r2
 80018c6:	d027      	beq.n	8001918 <TIM_Base_SetConfig+0x58>
 80018c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018cc:	d024      	beq.n	8001918 <TIM_Base_SetConfig+0x58>
 80018ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018d2:	4290      	cmp	r0, r2
 80018d4:	d020      	beq.n	8001918 <TIM_Base_SetConfig+0x58>
 80018d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018da:	4290      	cmp	r0, r2
 80018dc:	d01c      	beq.n	8001918 <TIM_Base_SetConfig+0x58>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <TIM_Base_SetConfig+0x74>)
 80018e0:	4290      	cmp	r0, r2
 80018e2:	d01e      	beq.n	8001922 <TIM_Base_SetConfig+0x62>
 80018e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018e8:	d01b      	beq.n	8001922 <TIM_Base_SetConfig+0x62>
 80018ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018ee:	4290      	cmp	r0, r2
 80018f0:	d017      	beq.n	8001922 <TIM_Base_SetConfig+0x62>
 80018f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018f6:	4290      	cmp	r0, r2
 80018f8:	d013      	beq.n	8001922 <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80018fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80018fe:	694a      	ldr	r2, [r1, #20]
 8001900:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001902:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001904:	688b      	ldr	r3, [r1, #8]
 8001906:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001908:	680b      	ldr	r3, [r1, #0]
 800190a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <TIM_Base_SetConfig+0x74>)
 800190e:	4298      	cmp	r0, r3
 8001910:	d00c      	beq.n	800192c <TIM_Base_SetConfig+0x6c>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001912:	2301      	movs	r3, #1
 8001914:	6143      	str	r3, [r0, #20]
 8001916:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800191c:	684a      	ldr	r2, [r1, #4]
 800191e:	4313      	orrs	r3, r2
 8001920:	e7dd      	b.n	80018de <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001926:	68ca      	ldr	r2, [r1, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	e7e6      	b.n	80018fa <TIM_Base_SetConfig+0x3a>
    TIMx->RCR = Structure->RepetitionCounter;
 800192c:	690b      	ldr	r3, [r1, #16]
 800192e:	6303      	str	r3, [r0, #48]	; 0x30
 8001930:	e7ef      	b.n	8001912 <TIM_Base_SetConfig+0x52>
 8001932:	bf00      	nop
 8001934:	40012c00 	.word	0x40012c00

08001938 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001938:	b1a8      	cbz	r0, 8001966 <HAL_TIM_Base_Init+0x2e>
{
 800193a:	b510      	push	{r4, lr}
 800193c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800193e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001942:	b15b      	cbz	r3, 800195c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001944:	2302      	movs	r3, #2
 8001946:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194a:	1d21      	adds	r1, r4, #4
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	f7ff ffb7 	bl	80018c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001952:	2301      	movs	r3, #1
 8001954:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001958:	2000      	movs	r0, #0
 800195a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800195c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001960:	f7ff fee0 	bl	8001724 <HAL_TIM_Base_MspInit>
 8001964:	e7ee      	b.n	8001944 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
 8001968:	4770      	bx	lr

0800196a <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800196a:	4770      	bx	lr

0800196c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800196c:	4770      	bx	lr
	...

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_GPIO_Init+0x40>)
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	f042 0210 	orr.w	r2, r2, #16
 800197a:	619a      	str	r2, [r3, #24]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	f002 0210 	and.w	r2, r2, #16
 8001982:	9201      	str	r2, [sp, #4]
 8001984:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	f042 0220 	orr.w	r2, r2, #32
 800198c:	619a      	str	r2, [r3, #24]
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	f002 0220 	and.w	r2, r2, #32
 8001994:	9202      	str	r2, [sp, #8]
 8001996:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	f042 0204 	orr.w	r2, r2, #4
 800199e:	619a      	str	r2, [r3, #24]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	9303      	str	r3, [sp, #12]
 80019a8:	9b03      	ldr	r3, [sp, #12]

}
 80019aa:	b004      	add	sp, #16
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000

080019b4 <SystemClock_Config>:
{
 80019b4:	b530      	push	{r4, r5, lr}
 80019b6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b8:	2228      	movs	r2, #40	; 0x28
 80019ba:	2100      	movs	r1, #0
 80019bc:	a806      	add	r0, sp, #24
 80019be:	f000 f919 	bl	8001bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c2:	2400      	movs	r4, #0
 80019c4:	9401      	str	r4, [sp, #4]
 80019c6:	9402      	str	r4, [sp, #8]
 80019c8:	9403      	str	r4, [sp, #12]
 80019ca:	9404      	str	r4, [sp, #16]
 80019cc:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ce:	2201      	movs	r2, #1
 80019d0:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2502      	movs	r5, #2
 80019dc:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019e4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	a806      	add	r0, sp, #24
 80019e8:	f7ff fb74 	bl	80010d4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fa:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019fc:	4629      	mov	r1, r5
 80019fe:	a801      	add	r0, sp, #4
 8001a00:	f7ff fd8e 	bl	8001520 <HAL_RCC_ClockConfig>
}
 8001a04:	b011      	add	sp, #68	; 0x44
 8001a06:	bd30      	pop	{r4, r5, pc}

08001a08 <main>:
{
 8001a08:	b508      	push	{r3, lr}
  HAL_Init();
 8001a0a:	f7ff fad9 	bl	8000fc0 <HAL_Init>
  SystemClock_Config();
 8001a0e:	f7ff ffd1 	bl	80019b4 <SystemClock_Config>
  MX_GPIO_Init();
 8001a12:	f7ff ffad 	bl	8001970 <MX_GPIO_Init>
  app_run();
 8001a16:	f7ff f937 	bl	8000c88 <app_run>
 8001a1a:	e7fe      	b.n	8001a1a <main+0x12>

08001a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001a1e:	6802      	ldr	r2, [r0, #0]
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d000      	beq.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001a26:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001a28:	f7ff fadc 	bl	8000fe4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a2c:	e7fb      	b.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001a2e:	bf00      	nop
 8001a30:	40000800 	.word	0x40000800

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_MspInit+0x3c>)
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	f002 0201 	and.w	r2, r2, #1
 8001a46:	9200      	str	r2, [sp, #0]
 8001a48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a50:	61da      	str	r2, [r3, #28]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a5c:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <HAL_MspInit+0x40>)
 8001a5e:	6853      	ldr	r3, [r2, #4]
 8001a60:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6a:	b002      	add	sp, #8
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000

08001a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b500      	push	{lr}
 8001a7a:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4601      	mov	r1, r0
 8001a80:	201e      	movs	r0, #30
 8001a82:	f7ff fad3 	bl	800102c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001a86:	201e      	movs	r0, #30
 8001a88:	f7ff fb02 	bl	8001090 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_InitTick+0x6c>)
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	f042 0204 	orr.w	r2, r2, #4
 8001a94:	61da      	str	r2, [r3, #28]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa0:	a902      	add	r1, sp, #8
 8001aa2:	a803      	add	r0, sp, #12
 8001aa4:	f7ff fe20 	bl	80016e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001aa8:	f7ff fe0e 	bl	80016c8 <HAL_RCC_GetPCLK1Freq>
 8001aac:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001aae:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <HAL_InitTick+0x70>)
 8001ab0:	fba0 2303 	umull	r2, r3, r0, r3
 8001ab4:	0c9b      	lsrs	r3, r3, #18
 8001ab6:	3b01      	subs	r3, #1
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <HAL_InitTick+0x74>)
 8001aba:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_InitTick+0x78>)
 8001abc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001abe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac2:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001ac4:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001acc:	f7ff ff34 	bl	8001938 <HAL_TIM_Base_Init>
 8001ad0:	b118      	cbz	r0, 8001ada <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
}
 8001ad4:	b009      	add	sp, #36	; 0x24
 8001ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 8001ada:	4804      	ldr	r0, [pc, #16]	; (8001aec <HAL_InitTick+0x74>)
 8001adc:	f7ff fe23 	bl	8001726 <HAL_TIM_Base_Start_IT>
 8001ae0:	e7f8      	b.n	8001ad4 <HAL_InitTick+0x5c>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	20000b38 	.word	0x20000b38
 8001af0:	40000800 	.word	0x40000800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	4770      	bx	lr

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler>

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	4770      	bx	lr

08001b00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
    run_current_time();
 8001b02:	f7ff fa55 	bl	8000fb0 <run_current_time>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b06:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM4_IRQHandler+0x10>)
 8001b08:	f7ff fe1d 	bl	8001746 <HAL_TIM_IRQHandler>
 8001b0c:	bd08      	pop	{r3, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000b38 	.word	0x20000b38

08001b14 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <SystemInit+0x40>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <SystemInit+0x44>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b30:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b38:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001b40:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b42:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b46:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <SystemInit+0x48>)
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	f8ff0000 	.word	0xf8ff0000
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b62:	e003      	b.n	8001b6c <LoopCopyDataInit>

08001b64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b6a:	3104      	adds	r1, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b6c:	480a      	ldr	r0, [pc, #40]	; (8001b98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b74:	d3f6      	bcc.n	8001b64 <CopyDataInit>
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b78:	e002      	b.n	8001b80 <LoopFillZerobss>

08001b7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b7c:	f842 3b04 	str.w	r3, [r2], #4

08001b80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b84:	d3f9      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b86:	f7ff ffc5 	bl	8001b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f000 f80f 	bl	8001bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8e:	f7ff ff3b 	bl	8001a08 <main>
  bx lr
 8001b92:	4770      	bx	lr
  ldr r3, =_sidata
 8001b94:	08001c74 	.word	0x08001c74
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ba0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001ba4:	20000b78 	.word	0x20000b78

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <__libc_init_array>:
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4e0c      	ldr	r6, [pc, #48]	; (8001be4 <__libc_init_array+0x38>)
 8001bb2:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <__libc_init_array+0x3c>)
 8001bb4:	1ba4      	subs	r4, r4, r6
 8001bb6:	10a4      	asrs	r4, r4, #2
 8001bb8:	42a5      	cmp	r5, r4
 8001bba:	d109      	bne.n	8001bd0 <__libc_init_array+0x24>
 8001bbc:	f000 f822 	bl	8001c04 <_init>
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	4e0a      	ldr	r6, [pc, #40]	; (8001bec <__libc_init_array+0x40>)
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <__libc_init_array+0x44>)
 8001bc6:	1ba4      	subs	r4, r4, r6
 8001bc8:	10a4      	asrs	r4, r4, #2
 8001bca:	42a5      	cmp	r5, r4
 8001bcc:	d105      	bne.n	8001bda <__libc_init_array+0x2e>
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd4:	4798      	blx	r3
 8001bd6:	3501      	adds	r5, #1
 8001bd8:	e7ee      	b.n	8001bb8 <__libc_init_array+0xc>
 8001bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bde:	4798      	blx	r3
 8001be0:	3501      	adds	r5, #1
 8001be2:	e7f2      	b.n	8001bca <__libc_init_array+0x1e>
 8001be4:	08001c6c 	.word	0x08001c6c
 8001be8:	08001c6c 	.word	0x08001c6c
 8001bec:	08001c6c 	.word	0x08001c6c
 8001bf0:	08001c70 	.word	0x08001c70

08001bf4 <memset>:
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4402      	add	r2, r0
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d100      	bne.n	8001bfe <memset+0xa>
 8001bfc:	4770      	bx	lr
 8001bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8001c02:	e7f9      	b.n	8001bf8 <memset+0x4>

08001c04 <_init>:
 8001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c06:	bf00      	nop
 8001c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0a:	bc08      	pop	{r3}
 8001c0c:	469e      	mov	lr, r3
 8001c0e:	4770      	bx	lr

08001c10 <_fini>:
 8001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c12:	bf00      	nop
 8001c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c16:	bc08      	pop	{r3}
 8001c18:	469e      	mov	lr, r3
 8001c1a:	4770      	bx	lr
