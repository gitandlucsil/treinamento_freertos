
Treinamento1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002480  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080025e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b74  2000000c  080025f4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000b80  080025f4  00020b80  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015acf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ed6  00000000  00000000  00035b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007e51  00000000  00000000  000389da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c48  00000000  00000000  00040830  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d40  00000000  00000000  00041478  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006bb2  00000000  00000000  000421b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004462  00000000  00000000  00048d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d1cc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ed4  00000000  00000000  0004d248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002578 	.word	0x08002578

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002578 	.word	0x08002578

08000150 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000150:	f100 0308 	add.w	r3, r0, #8
 8000154:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000156:	f04f 32ff 	mov.w	r2, #4294967295
 800015a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800015c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800015e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000160:	2300      	movs	r3, #0
 8000162:	6003      	str	r3, [r0, #0]
 8000164:	4770      	bx	lr

08000166 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000166:	2300      	movs	r3, #0
 8000168:	6103      	str	r3, [r0, #16]
 800016a:	4770      	bx	lr

0800016c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800016c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800016e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000170:	689a      	ldr	r2, [r3, #8]
 8000172:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000174:	689a      	ldr	r2, [r3, #8]
 8000176:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000178:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800017a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800017c:	6803      	ldr	r3, [r0, #0]
 800017e:	3301      	adds	r3, #1
 8000180:	6003      	str	r3, [r0, #0]
 8000182:	4770      	bx	lr

08000184 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000184:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000186:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000188:	f1b5 3fff 	cmp.w	r5, #4294967295
 800018c:	d002      	beq.n	8000194 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800018e:	f100 0208 	add.w	r2, r0, #8
 8000192:	e002      	b.n	800019a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8000194:	6902      	ldr	r2, [r0, #16]
 8000196:	e004      	b.n	80001a2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000198:	461a      	mov	r2, r3
 800019a:	6853      	ldr	r3, [r2, #4]
 800019c:	681c      	ldr	r4, [r3, #0]
 800019e:	42a5      	cmp	r5, r4
 80001a0:	d2fa      	bcs.n	8000198 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80001a2:	6853      	ldr	r3, [r2, #4]
 80001a4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80001a6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80001a8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80001aa:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80001ac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80001ae:	6803      	ldr	r3, [r0, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	6003      	str	r3, [r0, #0]
}
 80001b4:	bc30      	pop	{r4, r5}
 80001b6:	4770      	bx	lr

080001b8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80001b8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001ba:	6842      	ldr	r2, [r0, #4]
 80001bc:	6881      	ldr	r1, [r0, #8]
 80001be:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c0:	6882      	ldr	r2, [r0, #8]
 80001c2:	6841      	ldr	r1, [r0, #4]
 80001c4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001c6:	685a      	ldr	r2, [r3, #4]
 80001c8:	4290      	cmp	r0, r2
 80001ca:	d006      	beq.n	80001da <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80001cc:	2200      	movs	r2, #0
 80001ce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	3a01      	subs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001da:	6882      	ldr	r2, [r0, #8]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	e7f5      	b.n	80001cc <uxListRemove+0x14>

080001e0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80001e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <prvTaskExitError+0x3c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ee:	d008      	beq.n	8000202 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80001f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001f4:	f383 8811 	msr	BASEPRI, r3
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f3bf 8f4f 	dsb	sy
 8000200:	e7fe      	b.n	8000200 <prvTaskExitError+0x20>
 8000202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000206:	f383 8811 	msr	BASEPRI, r3
 800020a:	f3bf 8f6f 	isb	sy
 800020e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000212:	9b01      	ldr	r3, [sp, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d0fc      	beq.n	8000212 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000218:	b002      	add	sp, #8
 800021a:	4770      	bx	lr
 800021c:	20000000 	.word	0x20000000

08000220 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <prvPortStartFirstTask+0x1c>)
 8000222:	6800      	ldr	r0, [r0, #0]
 8000224:	6800      	ldr	r0, [r0, #0]
 8000226:	f380 8808 	msr	MSP, r0
 800022a:	b662      	cpsie	i
 800022c:	b661      	cpsie	f
 800022e:	f3bf 8f4f 	dsb	sy
 8000232:	f3bf 8f6f 	isb	sy
 8000236:	df00      	svc	0
 8000238:	bf00      	nop
 800023a:	0000      	.short	0x0000
 800023c:	e000ed08 	.word	0xe000ed08

08000240 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000244:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000248:	f021 0101 	bic.w	r1, r1, #1
 800024c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <pxPortInitialiseStack+0x20>)
 8000252:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000256:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800025a:	3840      	subs	r0, #64	; 0x40
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	080001e1 	.word	0x080001e1
	...

08000270 <SVC_Handler>:
	__asm volatile (
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <pxCurrentTCBConst2>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	6808      	ldr	r0, [r1, #0]
 8000276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800027a:	f380 8809 	msr	PSP, r0
 800027e:	f3bf 8f6f 	isb	sy
 8000282:	f04f 0000 	mov.w	r0, #0
 8000286:	f380 8811 	msr	BASEPRI, r0
 800028a:	f04e 0e0d 	orr.w	lr, lr, #13
 800028e:	4770      	bx	lr

08000290 <pxCurrentTCBConst2>:
 8000290:	20000030 	.word	0x20000030

08000294 <vPortEnterCritical>:
 8000294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000298:	f383 8811 	msr	BASEPRI, r3
 800029c:	f3bf 8f6f 	isb	sy
 80002a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <vPortEnterCritical+0x3c>)
 80002a6:	6813      	ldr	r3, [r2, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d10d      	bne.n	80002cc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <vPortEnterCritical+0x40>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80002b8:	d008      	beq.n	80002cc <vPortEnterCritical+0x38>
 80002ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002be:	f383 8811 	msr	BASEPRI, r3
 80002c2:	f3bf 8f6f 	isb	sy
 80002c6:	f3bf 8f4f 	dsb	sy
 80002ca:	e7fe      	b.n	80002ca <vPortEnterCritical+0x36>
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <vPortExitCritical+0x28>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	b943      	cbnz	r3, 80002f0 <vPortExitCritical+0x18>
 80002de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e2:	f383 8811 	msr	BASEPRI, r3
 80002e6:	f3bf 8f6f 	isb	sy
 80002ea:	f3bf 8f4f 	dsb	sy
 80002ee:	e7fe      	b.n	80002ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a03      	ldr	r2, [pc, #12]	; (8000300 <vPortExitCritical+0x28>)
 80002f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80002f6:	b90b      	cbnz	r3, 80002fc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002f8:	f383 8811 	msr	BASEPRI, r3
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000000 	.word	0x20000000
	...

08000310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000310:	f3ef 8009 	mrs	r0, PSP
 8000314:	f3bf 8f6f 	isb	sy
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <pxCurrentTCBConst>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000320:	6010      	str	r0, [r2, #0]
 8000322:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000326:	f04f 0050 	mov.w	r0, #80	; 0x50
 800032a:	f380 8811 	msr	BASEPRI, r0
 800032e:	f000 feaf 	bl	8001090 <vTaskSwitchContext>
 8000332:	f04f 0000 	mov.w	r0, #0
 8000336:	f380 8811 	msr	BASEPRI, r0
 800033a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	6808      	ldr	r0, [r1, #0]
 8000342:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000346:	f380 8809 	msr	PSP, r0
 800034a:	f3bf 8f6f 	isb	sy
 800034e:	4770      	bx	lr

08000350 <pxCurrentTCBConst>:
 8000350:	20000030 	.word	0x20000030

08000354 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000354:	b508      	push	{r3, lr}
	__asm volatile
 8000356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035a:	f383 8811 	msr	BASEPRI, r3
 800035e:	f3bf 8f6f 	isb	sy
 8000362:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000366:	f000 fd6d 	bl	8000e44 <xTaskIncrementTick>
 800036a:	b118      	cbz	r0, 8000374 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800036c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000370:	4b02      	ldr	r3, [pc, #8]	; (800037c <SysTick_Handler+0x28>)
 8000372:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000374:	2300      	movs	r3, #0
 8000376:	f383 8811 	msr	BASEPRI, r3
 800037a:	bd08      	pop	{r3, pc}
 800037c:	e000ed04 	.word	0xe000ed04

08000380 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <vPortSetupTimerInterrupt+0x24>)
 8000382:	2300      	movs	r3, #0
 8000384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000386:	4908      	ldr	r1, [pc, #32]	; (80003a8 <vPortSetupTimerInterrupt+0x28>)
 8000388:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <vPortSetupTimerInterrupt+0x2c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4908      	ldr	r1, [pc, #32]	; (80003b0 <vPortSetupTimerInterrupt+0x30>)
 8000390:	fba1 1303 	umull	r1, r3, r1, r3
 8000394:	099b      	lsrs	r3, r3, #6
 8000396:	3b01      	subs	r3, #1
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <vPortSetupTimerInterrupt+0x34>)
 800039a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800039c:	2307      	movs	r3, #7
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010
 80003a8:	e000e018 	.word	0xe000e018
 80003ac:	20000008 	.word	0x20000008
 80003b0:	10624dd3 	.word	0x10624dd3
 80003b4:	e000e014 	.word	0xe000e014

080003b8 <xPortStartScheduler>:
{
 80003b8:	b510      	push	{r4, lr}
 80003ba:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <xPortStartScheduler+0xa4>)
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80003c4:	22ff      	movs	r2, #255	; 0xff
 80003c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80003d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80003d8:	4a21      	ldr	r2, [pc, #132]	; (8000460 <xPortStartScheduler+0xa8>)
 80003da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80003dc:	2207      	movs	r2, #7
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <xPortStartScheduler+0xac>)
 80003e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003e2:	e009      	b.n	80003f8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80003e4:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <xPortStartScheduler+0xac>)
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80003ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80003fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000400:	d1f0      	bne.n	80003e4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <xPortStartScheduler+0xac>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b03      	cmp	r3, #3
 8000408:	d008      	beq.n	800041c <xPortStartScheduler+0x64>
	__asm volatile
 800040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800040e:	f383 8811 	msr	BASEPRI, r3
 8000412:	f3bf 8f6f 	isb	sy
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	e7fe      	b.n	800041a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800041c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800041e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000422:	4a10      	ldr	r2, [pc, #64]	; (8000464 <xPortStartScheduler+0xac>)
 8000424:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000426:	9b01      	ldr	r3, [sp, #4]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4a0c      	ldr	r2, [pc, #48]	; (800045c <xPortStartScheduler+0xa4>)
 800042c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <xPortStartScheduler+0xb0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000436:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800043e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8000440:	f7ff ff9e 	bl	8000380 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000444:	2400      	movs	r4, #0
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <xPortStartScheduler+0xb4>)
 8000448:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800044a:	f7ff fee9 	bl	8000220 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800044e:	f000 fe1f 	bl	8001090 <vTaskSwitchContext>
	prvTaskExitError();
 8000452:	f7ff fec5 	bl	80001e0 <prvTaskExitError>
}
 8000456:	4620      	mov	r0, r4
 8000458:	b002      	add	sp, #8
 800045a:	bd10      	pop	{r4, pc}
 800045c:	e000e400 	.word	0xe000e400
 8000460:	20000028 	.word	0x20000028
 8000464:	2000002c 	.word	0x2000002c
 8000468:	e000ed20 	.word	0xe000ed20
 800046c:	20000000 	.word	0x20000000

08000470 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000470:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000474:	2b0f      	cmp	r3, #15
 8000476:	d90f      	bls.n	8000498 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <vPortValidateInterruptPriority+0x4c>)
 800047a:	5c9b      	ldrb	r3, [r3, r2]
 800047c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <vPortValidateInterruptPriority+0x50>)
 8000480:	7812      	ldrb	r2, [r2, #0]
 8000482:	4293      	cmp	r3, r2
 8000484:	d208      	bcs.n	8000498 <vPortValidateInterruptPriority+0x28>
 8000486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800048a:	f383 8811 	msr	BASEPRI, r3
 800048e:	f3bf 8f6f 	isb	sy
 8000492:	f3bf 8f4f 	dsb	sy
 8000496:	e7fe      	b.n	8000496 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <vPortValidateInterruptPriority+0x54>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004a0:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <vPortValidateInterruptPriority+0x58>)
 80004a2:	6812      	ldr	r2, [r2, #0]
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d908      	bls.n	80004ba <vPortValidateInterruptPriority+0x4a>
 80004a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004ac:	f383 8811 	msr	BASEPRI, r3
 80004b0:	f3bf 8f6f 	isb	sy
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	e7fe      	b.n	80004b8 <vPortValidateInterruptPriority+0x48>
 80004ba:	4770      	bx	lr
 80004bc:	e000e3f0 	.word	0xe000e3f0
 80004c0:	20000028 	.word	0x20000028
 80004c4:	e000ed0c 	.word	0xe000ed0c
 80004c8:	2000002c 	.word	0x2000002c

080004cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80004cc:	b510      	push	{r4, lr}
 80004ce:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80004d0:	f7ff fee0 	bl	8000294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80004d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80004d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004d8:	429a      	cmp	r2, r3
 80004da:	d004      	beq.n	80004e6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80004dc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80004de:	f7ff fefb 	bl	80002d8 <vPortExitCritical>

	return xReturn;
}
 80004e2:	4620      	mov	r0, r4
 80004e4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80004e6:	2401      	movs	r4, #1
 80004e8:	e7f9      	b.n	80004de <prvIsQueueFull+0x12>

080004ea <prvIsQueueEmpty>:
{
 80004ea:	b510      	push	{r4, lr}
 80004ec:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80004ee:	f7ff fed1 	bl	8000294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80004f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80004f4:	b123      	cbz	r3, 8000500 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80004f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80004f8:	f7ff feee 	bl	80002d8 <vPortExitCritical>
}
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8000500:	2401      	movs	r4, #1
 8000502:	e7f9      	b.n	80004f8 <prvIsQueueEmpty+0xe>

08000504 <prvCopyDataToQueue>:
{
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	4604      	mov	r4, r0
 8000508:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800050a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800050c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800050e:	b94a      	cbnz	r2, 8000524 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000510:	6803      	ldr	r3, [r0, #0]
 8000512:	bb53      	cbnz	r3, 800056a <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000514:	6880      	ldr	r0, [r0, #8]
 8000516:	f000 ff19 	bl	800134c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800051a:	2300      	movs	r3, #0
 800051c:	60a3      	str	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800051e:	3501      	adds	r5, #1
 8000520:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8000522:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8000524:	b96e      	cbnz	r6, 8000542 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000526:	6840      	ldr	r0, [r0, #4]
 8000528:	f002 f812 	bl	8002550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800052c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800052e:	6863      	ldr	r3, [r4, #4]
 8000530:	4413      	add	r3, r2
 8000532:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000534:	68a2      	ldr	r2, [r4, #8]
 8000536:	4293      	cmp	r3, r2
 8000538:	d319      	bcc.n	800056e <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800053e:	2000      	movs	r0, #0
 8000540:	e7ed      	b.n	800051e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000542:	68c0      	ldr	r0, [r0, #12]
 8000544:	f002 f804 	bl	8002550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000548:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800054a:	425b      	negs	r3, r3
 800054c:	68e2      	ldr	r2, [r4, #12]
 800054e:	441a      	add	r2, r3
 8000550:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000552:	6821      	ldr	r1, [r4, #0]
 8000554:	428a      	cmp	r2, r1
 8000556:	d202      	bcs.n	800055e <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000558:	68a2      	ldr	r2, [r4, #8]
 800055a:	4413      	add	r3, r2
 800055c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800055e:	2e02      	cmp	r6, #2
 8000560:	d107      	bne.n	8000572 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000562:	b145      	cbz	r5, 8000576 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8000564:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8000566:	2000      	movs	r0, #0
 8000568:	e7d9      	b.n	800051e <prvCopyDataToQueue+0x1a>
 800056a:	2000      	movs	r0, #0
 800056c:	e7d7      	b.n	800051e <prvCopyDataToQueue+0x1a>
 800056e:	2000      	movs	r0, #0
 8000570:	e7d5      	b.n	800051e <prvCopyDataToQueue+0x1a>
 8000572:	2000      	movs	r0, #0
 8000574:	e7d3      	b.n	800051e <prvCopyDataToQueue+0x1a>
 8000576:	2000      	movs	r0, #0
 8000578:	e7d1      	b.n	800051e <prvCopyDataToQueue+0x1a>

0800057a <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800057a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800057c:	b172      	cbz	r2, 800059c <prvCopyDataFromQueue+0x22>
{
 800057e:	b510      	push	{r4, lr}
 8000580:	4603      	mov	r3, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000582:	68c4      	ldr	r4, [r0, #12]
 8000584:	4414      	add	r4, r2
 8000586:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000588:	6880      	ldr	r0, [r0, #8]
 800058a:	4284      	cmp	r4, r0
 800058c:	d301      	bcc.n	8000592 <prvCopyDataFromQueue+0x18>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	60d8      	str	r0, [r3, #12]
 8000592:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000594:	68d9      	ldr	r1, [r3, #12]
 8000596:	f001 ffdb 	bl	8002550 <memcpy>
 800059a:	bd10      	pop	{r4, pc}
 800059c:	4770      	bx	lr

0800059e <prvUnlockQueue>:
{
 800059e:	b538      	push	{r3, r4, r5, lr}
 80005a0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80005a2:	f7ff fe77 	bl	8000294 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80005a6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80005aa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80005ac:	e001      	b.n	80005b2 <prvUnlockQueue+0x14>
			--cTxLock;
 80005ae:	3c01      	subs	r4, #1
 80005b0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	dd0a      	ble.n	80005cc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80005b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80005b8:	b143      	cbz	r3, 80005cc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80005ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80005be:	f000 fe2d 	bl	800121c <xTaskRemoveFromEventList>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d0f3      	beq.n	80005ae <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80005c6:	f000 febb 	bl	8001340 <vTaskMissedYield>
 80005ca:	e7f0      	b.n	80005ae <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80005d2:	f7ff fe81 	bl	80002d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80005d6:	f7ff fe5d 	bl	8000294 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80005da:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80005de:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80005e0:	e001      	b.n	80005e6 <prvUnlockQueue+0x48>
				--cRxLock;
 80005e2:	3c01      	subs	r4, #1
 80005e4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80005e6:	2c00      	cmp	r4, #0
 80005e8:	dd0a      	ble.n	8000600 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005ea:	692b      	ldr	r3, [r5, #16]
 80005ec:	b143      	cbz	r3, 8000600 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005ee:	f105 0010 	add.w	r0, r5, #16
 80005f2:	f000 fe13 	bl	800121c <xTaskRemoveFromEventList>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d0f3      	beq.n	80005e2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80005fa:	f000 fea1 	bl	8001340 <vTaskMissedYield>
 80005fe:	e7f0      	b.n	80005e2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8000600:	23ff      	movs	r3, #255	; 0xff
 8000602:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8000606:	f7ff fe67 	bl	80002d8 <vPortExitCritical>
 800060a:	bd38      	pop	{r3, r4, r5, pc}

0800060c <xQueueGenericReset>:
{
 800060c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800060e:	b330      	cbz	r0, 800065e <xQueueGenericReset+0x52>
 8000610:	4604      	mov	r4, r0
 8000612:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8000614:	f7ff fe3e 	bl	8000294 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000618:	6821      	ldr	r1, [r4, #0]
 800061a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800061c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800061e:	fb03 1002 	mla	r0, r3, r2, r1
 8000622:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000624:	2000      	movs	r0, #0
 8000626:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000628:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800062a:	3a01      	subs	r2, #1
 800062c:	fb02 1303 	mla	r3, r2, r3, r1
 8000630:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000632:	23ff      	movs	r3, #255	; 0xff
 8000634:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800063c:	b9c5      	cbnz	r5, 8000670 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800063e:	6923      	ldr	r3, [r4, #16]
 8000640:	b1f3      	cbz	r3, 8000680 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000642:	f104 0010 	add.w	r0, r4, #16
 8000646:	f000 fde9 	bl	800121c <xTaskRemoveFromEventList>
 800064a:	b1c8      	cbz	r0, 8000680 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 800064c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <xQueueGenericReset+0x7c>)
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	e010      	b.n	8000680 <xQueueGenericReset+0x74>
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	e7fe      	b.n	800066e <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000670:	f104 0010 	add.w	r0, r4, #16
 8000674:	f7ff fd6c 	bl	8000150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000678:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800067c:	f7ff fd68 	bl	8000150 <vListInitialise>
	taskEXIT_CRITICAL();
 8000680:	f7ff fe2a 	bl	80002d8 <vPortExitCritical>
}
 8000684:	2001      	movs	r0, #1
 8000686:	bd38      	pop	{r3, r4, r5, pc}
 8000688:	e000ed04 	.word	0xe000ed04

0800068c <prvInitialiseNewQueue>:
{
 800068c:	b510      	push	{r4, lr}
 800068e:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8000690:	460c      	mov	r4, r1
 8000692:	b939      	cbnz	r1, 80006a4 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000694:	601b      	str	r3, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8000696:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000698:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffb5 	bl	800060c <xQueueGenericReset>
 80006a2:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e7f6      	b.n	8000696 <prvInitialiseNewQueue+0xa>

080006a8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80006a8:	b940      	cbnz	r0, 80006bc <xQueueGenericCreateStatic+0x14>
 80006aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	e7fe      	b.n	80006ba <xQueueGenericCreateStatic+0x12>
	{
 80006bc:	b510      	push	{r4, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80006c2:	b163      	cbz	r3, 80006de <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80006c4:	b1a2      	cbz	r2, 80006f0 <xQueueGenericCreateStatic+0x48>
 80006c6:	b1a9      	cbz	r1, 80006f4 <xQueueGenericCreateStatic+0x4c>
 80006c8:	2001      	movs	r0, #1
 80006ca:	b9a8      	cbnz	r0, 80006f8 <xQueueGenericCreateStatic+0x50>
 80006cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d0:	f383 8811 	msr	BASEPRI, r3
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	e7fe      	b.n	80006dc <xQueueGenericCreateStatic+0x34>
 80006de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e2:	f383 8811 	msr	BASEPRI, r3
 80006e6:	f3bf 8f6f 	isb	sy
 80006ea:	f3bf 8f4f 	dsb	sy
 80006ee:	e7fe      	b.n	80006ee <xQueueGenericCreateStatic+0x46>
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7ea      	b.n	80006ca <xQueueGenericCreateStatic+0x22>
 80006f4:	2000      	movs	r0, #0
 80006f6:	e7e8      	b.n	80006ca <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80006f8:	b90a      	cbnz	r2, 80006fe <xQueueGenericCreateStatic+0x56>
 80006fa:	b101      	cbz	r1, 80006fe <xQueueGenericCreateStatic+0x56>
 80006fc:	2000      	movs	r0, #0
 80006fe:	b940      	cbnz	r0, 8000712 <xQueueGenericCreateStatic+0x6a>
 8000700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000704:	f383 8811 	msr	BASEPRI, r3
 8000708:	f3bf 8f6f 	isb	sy
 800070c:	f3bf 8f4f 	dsb	sy
 8000710:	e7fe      	b.n	8000710 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000712:	2048      	movs	r0, #72	; 0x48
 8000714:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000716:	9803      	ldr	r0, [sp, #12]
 8000718:	2848      	cmp	r0, #72	; 0x48
 800071a:	d008      	beq.n	800072e <xQueueGenericCreateStatic+0x86>
 800071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000720:	f383 8811 	msr	BASEPRI, r3
 8000724:	f3bf 8f6f 	isb	sy
 8000728:	f3bf 8f4f 	dsb	sy
 800072c:	e7fe      	b.n	800072c <xQueueGenericCreateStatic+0x84>
 800072e:	4620      	mov	r0, r4
 8000730:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000732:	9b03      	ldr	r3, [sp, #12]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000734:	9400      	str	r4, [sp, #0]
 8000736:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800073a:	f7ff ffa7 	bl	800068c <prvInitialiseNewQueue>
	}
 800073e:	4620      	mov	r0, r4
 8000740:	b004      	add	sp, #16
 8000742:	bd10      	pop	{r4, pc}

08000744 <xQueueGenericSend>:
{
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	b085      	sub	sp, #20
 8000748:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800074a:	b160      	cbz	r0, 8000766 <xQueueGenericSend+0x22>
 800074c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800074e:	b199      	cbz	r1, 8000778 <xQueueGenericSend+0x34>
 8000750:	2201      	movs	r2, #1
 8000752:	b9ba      	cbnz	r2, 8000784 <xQueueGenericSend+0x40>
 8000754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	e7fe      	b.n	8000764 <xQueueGenericSend+0x20>
 8000766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076a:	f383 8811 	msr	BASEPRI, r3
 800076e:	f3bf 8f6f 	isb	sy
 8000772:	f3bf 8f4f 	dsb	sy
 8000776:	e7fe      	b.n	8000776 <xQueueGenericSend+0x32>
 8000778:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800077a:	b90a      	cbnz	r2, 8000780 <xQueueGenericSend+0x3c>
 800077c:	2201      	movs	r2, #1
 800077e:	e7e8      	b.n	8000752 <xQueueGenericSend+0xe>
 8000780:	2200      	movs	r2, #0
 8000782:	e7e6      	b.n	8000752 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000784:	2b02      	cmp	r3, #2
 8000786:	d009      	beq.n	800079c <xQueueGenericSend+0x58>
 8000788:	b96a      	cbnz	r2, 80007a6 <xQueueGenericSend+0x62>
 800078a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078e:	f383 8811 	msr	BASEPRI, r3
 8000792:	f3bf 8f6f 	isb	sy
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	e7fe      	b.n	800079a <xQueueGenericSend+0x56>
 800079c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800079e:	2801      	cmp	r0, #1
 80007a0:	d0f2      	beq.n	8000788 <xQueueGenericSend+0x44>
 80007a2:	2200      	movs	r2, #0
 80007a4:	e7f0      	b.n	8000788 <xQueueGenericSend+0x44>
 80007a6:	461d      	mov	r5, r3
 80007a8:	460e      	mov	r6, r1
 80007aa:	2700      	movs	r7, #0
 80007ac:	e039      	b.n	8000822 <xQueueGenericSend+0xde>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80007ae:	462a      	mov	r2, r5
 80007b0:	4631      	mov	r1, r6
 80007b2:	4620      	mov	r0, r4
 80007b4:	f7ff fea6 	bl	8000504 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007ba:	b18b      	cbz	r3, 80007e0 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80007c0:	f000 fd2c 	bl	800121c <xTaskRemoveFromEventList>
 80007c4:	b138      	cbz	r0, 80007d6 <xQueueGenericSend+0x92>
							queueYIELD_IF_USING_PREEMPTION();
 80007c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <xQueueGenericSend+0x16c>)
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	f3bf 8f4f 	dsb	sy
 80007d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80007d6:	f7ff fd7f 	bl	80002d8 <vPortExitCritical>
				return pdPASS;
 80007da:	2001      	movs	r0, #1
}
 80007dc:	b005      	add	sp, #20
 80007de:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d0f8      	beq.n	80007d6 <xQueueGenericSend+0x92>
						queueYIELD_IF_USING_PREEMPTION();
 80007e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <xQueueGenericSend+0x16c>)
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	f3bf 8f6f 	isb	sy
 80007f4:	e7ef      	b.n	80007d6 <xQueueGenericSend+0x92>
					taskEXIT_CRITICAL();
 80007f6:	f7ff fd6f 	bl	80002d8 <vPortExitCritical>
					return errQUEUE_FULL;
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ee      	b.n	80007dc <xQueueGenericSend+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80007fe:	a802      	add	r0, sp, #8
 8000800:	f000 fd52 	bl	80012a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000804:	2701      	movs	r7, #1
 8000806:	e019      	b.n	800083c <xQueueGenericSend+0xf8>
		prvLockQueue( pxQueue );
 8000808:	2300      	movs	r3, #0
 800080a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800080e:	e021      	b.n	8000854 <xQueueGenericSend+0x110>
 8000810:	2300      	movs	r3, #0
 8000812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000816:	e023      	b.n	8000860 <xQueueGenericSend+0x11c>
				prvUnlockQueue( pxQueue );
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fec0 	bl	800059e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800081e:	f000 fb91 	bl	8000f44 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8000822:	f7ff fd37 	bl	8000294 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000826:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800082a:	429a      	cmp	r2, r3
 800082c:	d3bf      	bcc.n	80007ae <xQueueGenericSend+0x6a>
 800082e:	2d02      	cmp	r5, #2
 8000830:	d0bd      	beq.n	80007ae <xQueueGenericSend+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000832:	9b01      	ldr	r3, [sp, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0de      	beq.n	80007f6 <xQueueGenericSend+0xb2>
				else if( xEntryTimeSet == pdFALSE )
 8000838:	2f00      	cmp	r7, #0
 800083a:	d0e0      	beq.n	80007fe <xQueueGenericSend+0xba>
		taskEXIT_CRITICAL();
 800083c:	f7ff fd4c 	bl	80002d8 <vPortExitCritical>
		vTaskSuspendAll();
 8000840:	f000 faf8 	bl	8000e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000844:	f7ff fd26 	bl	8000294 <vPortEnterCritical>
 8000848:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800084c:	b25b      	sxtb	r3, r3
 800084e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000852:	d0d9      	beq.n	8000808 <xQueueGenericSend+0xc4>
 8000854:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000858:	b25b      	sxtb	r3, r3
 800085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085e:	d0d7      	beq.n	8000810 <xQueueGenericSend+0xcc>
 8000860:	f7ff fd3a 	bl	80002d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000864:	a901      	add	r1, sp, #4
 8000866:	a802      	add	r0, sp, #8
 8000868:	f000 fd2a 	bl	80012c0 <xTaskCheckForTimeOut>
 800086c:	b9c8      	cbnz	r0, 80008a2 <xQueueGenericSend+0x15e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800086e:	4620      	mov	r0, r4
 8000870:	f7ff fe2c 	bl	80004cc <prvIsQueueFull>
 8000874:	2800      	cmp	r0, #0
 8000876:	d0cf      	beq.n	8000818 <xQueueGenericSend+0xd4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000878:	9901      	ldr	r1, [sp, #4]
 800087a:	f104 0010 	add.w	r0, r4, #16
 800087e:	f000 fcb5 	bl	80011ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff fe8b 	bl	800059e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000888:	f000 fb5c 	bl	8000f44 <xTaskResumeAll>
 800088c:	2800      	cmp	r0, #0
 800088e:	d1c8      	bne.n	8000822 <xQueueGenericSend+0xde>
					portYIELD_WITHIN_API();
 8000890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <xQueueGenericSend+0x16c>)
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	f3bf 8f4f 	dsb	sy
 800089c:	f3bf 8f6f 	isb	sy
 80008a0:	e7bf      	b.n	8000822 <xQueueGenericSend+0xde>
			prvUnlockQueue( pxQueue );
 80008a2:	4620      	mov	r0, r4
 80008a4:	f7ff fe7b 	bl	800059e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80008a8:	f000 fb4c 	bl	8000f44 <xTaskResumeAll>
			return errQUEUE_FULL;
 80008ac:	2000      	movs	r0, #0
 80008ae:	e795      	b.n	80007dc <xQueueGenericSend+0x98>
 80008b0:	e000ed04 	.word	0xe000ed04

080008b4 <xQueueGenericSendFromISR>:
{
 80008b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80008b8:	b160      	cbz	r0, 80008d4 <xQueueGenericSendFromISR+0x20>
 80008ba:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008bc:	b199      	cbz	r1, 80008e6 <xQueueGenericSendFromISR+0x32>
 80008be:	2001      	movs	r0, #1
 80008c0:	b9b8      	cbnz	r0, 80008f2 <xQueueGenericSendFromISR+0x3e>
 80008c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c6:	f383 8811 	msr	BASEPRI, r3
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	e7fe      	b.n	80008d2 <xQueueGenericSendFromISR+0x1e>
 80008d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	e7fe      	b.n	80008e4 <xQueueGenericSendFromISR+0x30>
 80008e6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80008e8:	b908      	cbnz	r0, 80008ee <xQueueGenericSendFromISR+0x3a>
 80008ea:	2001      	movs	r0, #1
 80008ec:	e7e8      	b.n	80008c0 <xQueueGenericSendFromISR+0xc>
 80008ee:	2000      	movs	r0, #0
 80008f0:	e7e6      	b.n	80008c0 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d009      	beq.n	800090a <xQueueGenericSendFromISR+0x56>
 80008f6:	b968      	cbnz	r0, 8000914 <xQueueGenericSendFromISR+0x60>
 80008f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fc:	f383 8811 	msr	BASEPRI, r3
 8000900:	f3bf 8f6f 	isb	sy
 8000904:	f3bf 8f4f 	dsb	sy
 8000908:	e7fe      	b.n	8000908 <xQueueGenericSendFromISR+0x54>
 800090a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800090c:	2d01      	cmp	r5, #1
 800090e:	d0f2      	beq.n	80008f6 <xQueueGenericSendFromISR+0x42>
 8000910:	2000      	movs	r0, #0
 8000912:	e7f0      	b.n	80008f6 <xQueueGenericSendFromISR+0x42>
 8000914:	461f      	mov	r7, r3
 8000916:	4690      	mov	r8, r2
 8000918:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800091a:	f7ff fda9 	bl	8000470 <vPortValidateInterruptPriority>
	__asm volatile
 800091e:	f3ef 8611 	mrs	r6, BASEPRI
 8000922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000926:	f383 8811 	msr	BASEPRI, r3
 800092a:	f3bf 8f6f 	isb	sy
 800092e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000932:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000934:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000936:	429a      	cmp	r2, r3
 8000938:	d301      	bcc.n	800093e <xQueueGenericSendFromISR+0x8a>
 800093a:	2f02      	cmp	r7, #2
 800093c:	d121      	bne.n	8000982 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800093e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8000942:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000944:	463a      	mov	r2, r7
 8000946:	4649      	mov	r1, r9
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff fddb 	bl	8000504 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800094e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000952:	d110      	bne.n	8000976 <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000956:	b1b3      	cbz	r3, 8000986 <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000958:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800095c:	f000 fc5e 	bl	800121c <xTaskRemoveFromEventList>
 8000960:	b198      	cbz	r0, 800098a <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 8000962:	f1b8 0f00 	cmp.w	r8, #0
 8000966:	d012      	beq.n	800098e <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000968:	2001      	movs	r0, #1
 800096a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800096e:	f386 8811 	msr	BASEPRI, r6
}
 8000972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000976:	1c6b      	adds	r3, r5, #1
 8000978:	b25b      	sxtb	r3, r3
 800097a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800097e:	2001      	movs	r0, #1
 8000980:	e7f5      	b.n	800096e <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8000982:	2000      	movs	r0, #0
 8000984:	e7f3      	b.n	800096e <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 8000986:	2001      	movs	r0, #1
 8000988:	e7f1      	b.n	800096e <xQueueGenericSendFromISR+0xba>
 800098a:	2001      	movs	r0, #1
 800098c:	e7ef      	b.n	800096e <xQueueGenericSendFromISR+0xba>
 800098e:	2001      	movs	r0, #1
 8000990:	e7ed      	b.n	800096e <xQueueGenericSendFromISR+0xba>
	...

08000994 <xQueueReceive>:
{
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800099a:	b160      	cbz	r0, 80009b6 <xQueueReceive+0x22>
 800099c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800099e:	b199      	cbz	r1, 80009c8 <xQueueReceive+0x34>
 80009a0:	2301      	movs	r3, #1
 80009a2:	b9bb      	cbnz	r3, 80009d4 <xQueueReceive+0x40>
	__asm volatile
 80009a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a8:	f383 8811 	msr	BASEPRI, r3
 80009ac:	f3bf 8f6f 	isb	sy
 80009b0:	f3bf 8f4f 	dsb	sy
 80009b4:	e7fe      	b.n	80009b4 <xQueueReceive+0x20>
 80009b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ba:	f383 8811 	msr	BASEPRI, r3
 80009be:	f3bf 8f6f 	isb	sy
 80009c2:	f3bf 8f4f 	dsb	sy
 80009c6:	e7fe      	b.n	80009c6 <xQueueReceive+0x32>
 80009c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009ca:	b90b      	cbnz	r3, 80009d0 <xQueueReceive+0x3c>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e7e8      	b.n	80009a2 <xQueueReceive+0xe>
 80009d0:	2300      	movs	r3, #0
 80009d2:	e7e6      	b.n	80009a2 <xQueueReceive+0xe>
 80009d4:	460e      	mov	r6, r1
 80009d6:	2700      	movs	r7, #0
 80009d8:	e03a      	b.n	8000a50 <xQueueReceive+0xbc>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80009da:	4631      	mov	r1, r6
 80009dc:	4620      	mov	r0, r4
 80009de:	f7ff fdcc 	bl	800057a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80009e2:	3d01      	subs	r5, #1
 80009e4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009e6:	6923      	ldr	r3, [r4, #16]
 80009e8:	b163      	cbz	r3, 8000a04 <xQueueReceive+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009ea:	f104 0010 	add.w	r0, r4, #16
 80009ee:	f000 fc15 	bl	800121c <xTaskRemoveFromEventList>
 80009f2:	b138      	cbz	r0, 8000a04 <xQueueReceive+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 80009f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f8:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <xQueueReceive+0x13c>)
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	f3bf 8f4f 	dsb	sy
 8000a00:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8000a04:	f7ff fc68 	bl	80002d8 <vPortExitCritical>
				return pdPASS;
 8000a08:	2001      	movs	r0, #1
}
 8000a0a:	b005      	add	sp, #20
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8000a0e:	f7ff fc63 	bl	80002d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8000a12:	2000      	movs	r0, #0
 8000a14:	e7f9      	b.n	8000a0a <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000a16:	a802      	add	r0, sp, #8
 8000a18:	f000 fc46 	bl	80012a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000a1c:	2701      	movs	r7, #1
 8000a1e:	e021      	b.n	8000a64 <xQueueReceive+0xd0>
		prvLockQueue( pxQueue );
 8000a20:	2300      	movs	r3, #0
 8000a22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000a26:	e029      	b.n	8000a7c <xQueueReceive+0xe8>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a2e:	e02b      	b.n	8000a88 <xQueueReceive+0xf4>
				prvUnlockQueue( pxQueue );
 8000a30:	4620      	mov	r0, r4
 8000a32:	f7ff fdb4 	bl	800059e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000a36:	f000 fa85 	bl	8000f44 <xTaskResumeAll>
 8000a3a:	e009      	b.n	8000a50 <xQueueReceive+0xbc>
			prvUnlockQueue( pxQueue );
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fdae 	bl	800059e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000a42:	f000 fa7f 	bl	8000f44 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a46:	4620      	mov	r0, r4
 8000a48:	f7ff fd4f 	bl	80004ea <prvIsQueueEmpty>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d13d      	bne.n	8000acc <xQueueReceive+0x138>
		taskENTER_CRITICAL();
 8000a50:	f7ff fc20 	bl	8000294 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a54:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d1bf      	bne.n	80009da <xQueueReceive+0x46>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000a5a:	9b01      	ldr	r3, [sp, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0d6      	beq.n	8000a0e <xQueueReceive+0x7a>
				else if( xEntryTimeSet == pdFALSE )
 8000a60:	2f00      	cmp	r7, #0
 8000a62:	d0d8      	beq.n	8000a16 <xQueueReceive+0x82>
		taskEXIT_CRITICAL();
 8000a64:	f7ff fc38 	bl	80002d8 <vPortExitCritical>
		vTaskSuspendAll();
 8000a68:	f000 f9e4 	bl	8000e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a6c:	f7ff fc12 	bl	8000294 <vPortEnterCritical>
 8000a70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7a:	d0d1      	beq.n	8000a20 <xQueueReceive+0x8c>
 8000a7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a86:	d0cf      	beq.n	8000a28 <xQueueReceive+0x94>
 8000a88:	f7ff fc26 	bl	80002d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a8c:	a901      	add	r1, sp, #4
 8000a8e:	a802      	add	r0, sp, #8
 8000a90:	f000 fc16 	bl	80012c0 <xTaskCheckForTimeOut>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d1d1      	bne.n	8000a3c <xQueueReceive+0xa8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f7ff fd26 	bl	80004ea <prvIsQueueEmpty>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d0c6      	beq.n	8000a30 <xQueueReceive+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000aa2:	9901      	ldr	r1, [sp, #4]
 8000aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000aa8:	f000 fba0 	bl	80011ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000aac:	4620      	mov	r0, r4
 8000aae:	f7ff fd76 	bl	800059e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000ab2:	f000 fa47 	bl	8000f44 <xTaskResumeAll>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d1ca      	bne.n	8000a50 <xQueueReceive+0xbc>
					portYIELD_WITHIN_API();
 8000aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <xQueueReceive+0x13c>)
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	f3bf 8f4f 	dsb	sy
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	e7c1      	b.n	8000a50 <xQueueReceive+0xbc>
				return errQUEUE_EMPTY;
 8000acc:	2000      	movs	r0, #0
 8000ace:	e79c      	b.n	8000a0a <xQueueReceive+0x76>
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <prvIdleTask+0x1c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d9fb      	bls.n	8000ad4 <prvIdleTask>
			{
				taskYIELD();
 8000adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <prvIdleTask+0x20>)
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	f3bf 8f4f 	dsb	sy
 8000ae8:	f3bf 8f6f 	isb	sy
 8000aec:	e7f2      	b.n	8000ad4 <prvIdleTask>
 8000aee:	bf00      	nop
 8000af0:	2000003c 	.word	0x2000003c
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <prvResetNextTaskUnblockTime+0x24>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	b13b      	cbz	r3, 8000b10 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <prvResetNextTaskUnblockTime+0x24>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <prvResetNextTaskUnblockTime+0x28>)
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <prvResetNextTaskUnblockTime+0x28>)
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000034 	.word	0x20000034
 8000b20:	20000140 	.word	0x20000140

08000b24 <prvInitialiseNewTask>:
{
 8000b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b28:	4681      	mov	r9, r0
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	9e08      	ldr	r6, [sp, #32]
 8000b2e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8000b32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b34:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000b36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000b3a:	3a01      	subs	r2, #1
 8000b3c:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b40:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d136      	bne.n	8000bb6 <prvInitialiseNewTask+0x92>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000b4e:	e00b      	b.n	8000b68 <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b50:	5cd0      	ldrb	r0, [r2, r3]
 8000b52:	18e1      	adds	r1, r4, r3
 8000b54:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8000b58:	5cd1      	ldrb	r1, [r2, r3]
 8000b5a:	b111      	cbz	r1, 8000b62 <prvInitialiseNewTask+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	2b09      	cmp	r3, #9
 8000b60:	d9f6      	bls.n	8000b50 <prvInitialiseNewTask+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b62:	2300      	movs	r3, #0
 8000b64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000b68:	2e09      	cmp	r6, #9
 8000b6a:	d900      	bls.n	8000b6e <prvInitialiseNewTask+0x4a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000b6c:	2609      	movs	r6, #9
	pxNewTCB->uxPriority = uxPriority;
 8000b6e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8000b70:	6426      	str	r6, [r4, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8000b72:	2500      	movs	r5, #0
 8000b74:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000b76:	1d20      	adds	r0, r4, #4
 8000b78:	f7ff faf5 	bl	8000166 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b7c:	f104 0018 	add.w	r0, r4, #24
 8000b80:	f7ff faf1 	bl	8000166 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b84:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b86:	f1c6 060a 	rsb	r6, r6, #10
 8000b8a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b8c:	6264      	str	r4, [r4, #36]	; 0x24
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8000b8e:	462b      	mov	r3, r5
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d913      	bls.n	8000bbc <prvInitialiseNewTask+0x98>
		pxNewTCB->ulNotifiedValue = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	65e3      	str	r3, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000b98:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b9c:	4652      	mov	r2, sl
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	4638      	mov	r0, r7
 8000ba2:	f7ff fb4d 	bl	8000240 <pxPortInitialiseStack>
 8000ba6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8000ba8:	f1b8 0f00 	cmp.w	r8, #0
 8000bac:	d001      	beq.n	8000bb2 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000bae:	f8c8 4000 	str.w	r4, [r8]
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	460a      	mov	r2, r1
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e7d0      	b.n	8000b5e <prvInitialiseNewTask+0x3a>
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8000bbc:	f103 0212 	add.w	r2, r3, #18
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	e7e2      	b.n	8000b90 <prvInitialiseNewTask+0x6c>
	...

08000bcc <prvInitialiseTaskLists>:
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2c09      	cmp	r4, #9
 8000bd2:	d912      	bls.n	8000bfa <prvInitialiseTaskLists+0x2e>
	vListInitialise( &xDelayedTaskList1 );
 8000bd4:	4d0d      	ldr	r5, [pc, #52]	; (8000c0c <prvInitialiseTaskLists+0x40>)
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f7ff faba 	bl	8000150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000bdc:	4c0c      	ldr	r4, [pc, #48]	; (8000c10 <prvInitialiseTaskLists+0x44>)
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff fab6 	bl	8000150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <prvInitialiseTaskLists+0x48>)
 8000be6:	f7ff fab3 	bl	8000150 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <prvInitialiseTaskLists+0x4c>)
 8000bec:	f7ff fab0 	bl	8000150 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <prvInitialiseTaskLists+0x50>)
 8000bf2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <prvInitialiseTaskLists+0x54>)
 8000bf6:	601c      	str	r4, [r3, #0]
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000bfa:	2014      	movs	r0, #20
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <prvInitialiseTaskLists+0x58>)
 8000bfe:	fb00 3004 	mla	r0, r0, r4, r3
 8000c02:	f7ff faa5 	bl	8000150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c06:	3401      	adds	r4, #1
 8000c08:	e7e2      	b.n	8000bd0 <prvInitialiseTaskLists+0x4>
 8000c0a:	bf00      	nop
 8000c0c:	20000118 	.word	0x20000118
 8000c10:	2000012c 	.word	0x2000012c
 8000c14:	20000148 	.word	0x20000148
 8000c18:	20000160 	.word	0x20000160
 8000c1c:	20000034 	.word	0x20000034
 8000c20:	20000038 	.word	0x20000038
 8000c24:	2000003c 	.word	0x2000003c

08000c28 <prvAddNewTaskToReadyList>:
{
 8000c28:	b510      	push	{r4, lr}
 8000c2a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8000c2c:	f7ff fb32 	bl	8000294 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <prvAddNewTaskToReadyList+0x8c>)
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <prvAddNewTaskToReadyList+0x90>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d12c      	bne.n	8000c9a <prvAddNewTaskToReadyList+0x72>
			pxCurrentTCB = pxNewTCB;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <prvAddNewTaskToReadyList+0x90>)
 8000c42:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c44:	6813      	ldr	r3, [r2, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d101      	bne.n	8000c4e <prvAddNewTaskToReadyList+0x26>
				prvInitialiseTaskLists();
 8000c4a:	f7ff ffbf 	bl	8000bcc <prvInitialiseTaskLists>
		uxTaskNumber++;
 8000c4e:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <prvAddNewTaskToReadyList+0x94>)
 8000c50:	6813      	ldr	r3, [r2, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8000c56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <prvAddNewTaskToReadyList+0x98>)
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d901      	bls.n	8000c64 <prvAddNewTaskToReadyList+0x3c>
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <prvAddNewTaskToReadyList+0x98>)
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	1d21      	adds	r1, r4, #4
 8000c66:	2014      	movs	r0, #20
 8000c68:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <prvAddNewTaskToReadyList+0x9c>)
 8000c6a:	fb00 2003 	mla	r0, r0, r3, r2
 8000c6e:	f7ff fa7d 	bl	800016c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8000c72:	f7ff fb31 	bl	80002d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <prvAddNewTaskToReadyList+0xa0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b16b      	cbz	r3, 8000c98 <prvAddNewTaskToReadyList+0x70>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <prvAddNewTaskToReadyList+0x90>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <prvAddNewTaskToReadyList+0x70>
			taskYIELD_IF_USING_PREEMPTION();
 8000c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <prvAddNewTaskToReadyList+0xa4>)
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	f3bf 8f6f 	isb	sy
 8000c98:	bd10      	pop	{r4, pc}
			if( xSchedulerRunning == pdFALSE )
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <prvAddNewTaskToReadyList+0xa0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1d5      	bne.n	8000c4e <prvAddNewTaskToReadyList+0x26>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <prvAddNewTaskToReadyList+0x90>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d8cf      	bhi.n	8000c4e <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8000cae:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <prvAddNewTaskToReadyList+0x90>)
 8000cb0:	601c      	str	r4, [r3, #0]
 8000cb2:	e7cc      	b.n	8000c4e <prvAddNewTaskToReadyList+0x26>
 8000cb4:	20000104 	.word	0x20000104
 8000cb8:	20000030 	.word	0x20000030
 8000cbc:	20000110 	.word	0x20000110
 8000cc0:	20000114 	.word	0x20000114
 8000cc4:	2000003c 	.word	0x2000003c
 8000cc8:	2000015c 	.word	0x2000015c
 8000ccc:	e000ed04 	.word	0xe000ed04

08000cd0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <prvAddCurrentTaskToDelayedList+0x64>)
 8000cd8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <prvAddCurrentTaskToDelayedList+0x68>)
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	3004      	adds	r0, #4
 8000ce0:	f7ff fa6a 	bl	80001b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000ce4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ce8:	d013      	beq.n	8000d12 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8000cea:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <prvAddCurrentTaskToDelayedList+0x68>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d816      	bhi.n	8000d24 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <prvAddCurrentTaskToDelayedList+0x6c>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <prvAddCurrentTaskToDelayedList+0x68>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	3104      	adds	r1, #4
 8000d00:	f7ff fa40 	bl	8000184 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <prvAddCurrentTaskToDelayedList+0x70>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d201      	bcs.n	8000d10 <prvAddCurrentTaskToDelayedList+0x40>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <prvAddCurrentTaskToDelayedList+0x70>)
 8000d0e:	601c      	str	r4, [r3, #0]
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e9      	beq.n	8000cea <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <prvAddCurrentTaskToDelayedList+0x68>)
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	3104      	adds	r1, #4
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <prvAddCurrentTaskToDelayedList+0x74>)
 8000d1e:	f7ff fa25 	bl	800016c <vListInsertEnd>
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <prvAddCurrentTaskToDelayedList+0x78>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <prvAddCurrentTaskToDelayedList+0x68>)
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	3104      	adds	r1, #4
 8000d2e:	f7ff fa29 	bl	8000184 <vListInsert>
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	20000174 	.word	0x20000174
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	20000140 	.word	0x20000140
 8000d44:	20000160 	.word	0x20000160
 8000d48:	20000038 	.word	0x20000038

08000d4c <xTaskCreateStatic>:
	{
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8000d54:	b175      	cbz	r5, 8000d74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000d56:	b1b4      	cbz	r4, 8000d86 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8000d58:	2664      	movs	r6, #100	; 0x64
 8000d5a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000d5c:	9e04      	ldr	r6, [sp, #16]
 8000d5e:	2e64      	cmp	r6, #100	; 0x64
 8000d60:	d01a      	beq.n	8000d98 <xTaskCreateStatic+0x4c>
 8000d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d66:	f383 8811 	msr	BASEPRI, r3
 8000d6a:	f3bf 8f6f 	isb	sy
 8000d6e:	f3bf 8f4f 	dsb	sy
 8000d72:	e7fe      	b.n	8000d72 <xTaskCreateStatic+0x26>
 8000d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d78:	f383 8811 	msr	BASEPRI, r3
 8000d7c:	f3bf 8f6f 	isb	sy
 8000d80:	f3bf 8f4f 	dsb	sy
 8000d84:	e7fe      	b.n	8000d84 <xTaskCreateStatic+0x38>
 8000d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8a:	f383 8811 	msr	BASEPRI, r3
 8000d8e:	f3bf 8f6f 	isb	sy
 8000d92:	f3bf 8f4f 	dsb	sy
 8000d96:	e7fe      	b.n	8000d96 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000d98:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000d9a:	6325      	str	r5, [r4, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	9503      	str	r5, [sp, #12]
 8000da0:	9402      	str	r4, [sp, #8]
 8000da2:	ad05      	add	r5, sp, #20
 8000da4:	9501      	str	r5, [sp, #4]
 8000da6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000da8:	9500      	str	r5, [sp, #0]
 8000daa:	f7ff febb 	bl	8000b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff ff3a 	bl	8000c28 <prvAddNewTaskToReadyList>
	}
 8000db4:	9805      	ldr	r0, [sp, #20]
 8000db6:	b006      	add	sp, #24
 8000db8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000dbc <vTaskStartScheduler>:
{
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8000dc4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8000dc6:	aa07      	add	r2, sp, #28
 8000dc8:	a906      	add	r1, sp, #24
 8000dca:	a805      	add	r0, sp, #20
 8000dcc:	f000 fb3c 	bl	8001448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8000dd0:	9b05      	ldr	r3, [sp, #20]
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	9b06      	ldr	r3, [sp, #24]
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	9400      	str	r4, [sp, #0]
 8000dda:	4623      	mov	r3, r4
 8000ddc:	9a07      	ldr	r2, [sp, #28]
 8000dde:	4910      	ldr	r1, [pc, #64]	; (8000e20 <vTaskStartScheduler+0x64>)
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <vTaskStartScheduler+0x68>)
 8000de2:	f7ff ffb3 	bl	8000d4c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8000de6:	b118      	cbz	r0, 8000df0 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8000de8:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 8000dea:	b91b      	cbnz	r3, 8000df4 <vTaskStartScheduler+0x38>
}
 8000dec:	b008      	add	sp, #32
 8000dee:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e7fa      	b.n	8000dea <vTaskStartScheduler+0x2e>
 8000df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df8:	f383 8811 	msr	BASEPRI, r3
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <vTaskStartScheduler+0x6c>)
 8000e0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <vTaskStartScheduler+0x70>)
 8000e10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000e12:	2200      	movs	r2, #0
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <vTaskStartScheduler+0x74>)
 8000e16:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8000e18:	f7ff face 	bl	80003b8 <xPortStartScheduler>
 8000e1c:	e7e6      	b.n	8000dec <vTaskStartScheduler+0x30>
 8000e1e:	bf00      	nop
 8000e20:	080025a4 	.word	0x080025a4
 8000e24:	08000ad5 	.word	0x08000ad5
 8000e28:	20000140 	.word	0x20000140
 8000e2c:	2000015c 	.word	0x2000015c
 8000e30:	20000174 	.word	0x20000174

08000e34 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8000e34:	4a02      	ldr	r2, [pc, #8]	; (8000e40 <vTaskSuspendAll+0xc>)
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000010c 	.word	0x2000010c

08000e44 <xTaskIncrementTick>:
{
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <xTaskIncrementTick+0xd4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d159      	bne.n	8000f02 <xTaskIncrementTick+0xbe>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <xTaskIncrementTick+0xd8>)
 8000e50:	681c      	ldr	r4, [r3, #0]
 8000e52:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8000e54:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e56:	b9c4      	cbnz	r4, 8000e8a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <xTaskIncrementTick+0xdc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b143      	cbz	r3, 8000e72 <xTaskIncrementTick+0x2e>
 8000e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e64:	f383 8811 	msr	BASEPRI, r3
 8000e68:	f3bf 8f6f 	isb	sy
 8000e6c:	f3bf 8f4f 	dsb	sy
 8000e70:	e7fe      	b.n	8000e70 <xTaskIncrementTick+0x2c>
 8000e72:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <xTaskIncrementTick+0xdc>)
 8000e74:	6811      	ldr	r1, [r2, #0]
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <xTaskIncrementTick+0xe0>)
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	6010      	str	r0, [r2, #0]
 8000e7c:	6019      	str	r1, [r3, #0]
 8000e7e:	4a2a      	ldr	r2, [pc, #168]	; (8000f28 <xTaskIncrementTick+0xe4>)
 8000e80:	6813      	ldr	r3, [r2, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	f7ff fe37 	bl	8000af8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <xTaskIncrementTick+0xe8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429c      	cmp	r4, r3
 8000e90:	d22d      	bcs.n	8000eee <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 8000e92:	2600      	movs	r6, #0
 8000e94:	e03a      	b.n	8000f0c <xTaskIncrementTick+0xc8>
							xSwitchRequired = pdTRUE;
 8000e96:	2601      	movs	r6, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <xTaskIncrementTick+0xdc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b343      	cbz	r3, 8000ef2 <xTaskIncrementTick+0xae>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <xTaskIncrementTick+0xdc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ea8:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8000eaa:	429c      	cmp	r4, r3
 8000eac:	d326      	bcc.n	8000efc <xTaskIncrementTick+0xb8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000eae:	1d2f      	adds	r7, r5, #4
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	f7ff f981 	bl	80001b8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000eb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000eb8:	b11b      	cbz	r3, 8000ec2 <xTaskIncrementTick+0x7e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000eba:	f105 0018 	add.w	r0, r5, #24
 8000ebe:	f7ff f97b 	bl	80001b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000ec2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <xTaskIncrementTick+0xec>)
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d901      	bls.n	8000ed0 <xTaskIncrementTick+0x8c>
 8000ecc:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <xTaskIncrementTick+0xec>)
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ed4:	009a      	lsls	r2, r3, #2
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	4816      	ldr	r0, [pc, #88]	; (8000f34 <xTaskIncrementTick+0xf0>)
 8000eda:	4410      	add	r0, r2
 8000edc:	f7ff f946 	bl	800016c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ee0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <xTaskIncrementTick+0xf4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d2d4      	bcs.n	8000e96 <xTaskIncrementTick+0x52>
 8000eec:	e7d4      	b.n	8000e98 <xTaskIncrementTick+0x54>
 8000eee:	2600      	movs	r6, #0
 8000ef0:	e7d2      	b.n	8000e98 <xTaskIncrementTick+0x54>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <xTaskIncrementTick+0xe8>)
 8000ef8:	601a      	str	r2, [r3, #0]
					break;
 8000efa:	e007      	b.n	8000f0c <xTaskIncrementTick+0xc8>
						xNextTaskUnblockTime = xItemValue;
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <xTaskIncrementTick+0xe8>)
 8000efe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000f00:	e004      	b.n	8000f0c <xTaskIncrementTick+0xc8>
		++uxPendedTicks;
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <xTaskIncrementTick+0xf8>)
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8000f0a:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <xTaskIncrementTick+0xfc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	b103      	cbz	r3, 8000f14 <xTaskIncrementTick+0xd0>
			xSwitchRequired = pdTRUE;
 8000f12:	2601      	movs	r6, #1
}
 8000f14:	4630      	mov	r0, r6
 8000f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f18:	2000010c 	.word	0x2000010c
 8000f1c:	20000174 	.word	0x20000174
 8000f20:	20000034 	.word	0x20000034
 8000f24:	20000038 	.word	0x20000038
 8000f28:	20000144 	.word	0x20000144
 8000f2c:	20000140 	.word	0x20000140
 8000f30:	20000114 	.word	0x20000114
 8000f34:	2000003c 	.word	0x2000003c
 8000f38:	20000030 	.word	0x20000030
 8000f3c:	20000108 	.word	0x20000108
 8000f40:	20000178 	.word	0x20000178

08000f44 <xTaskResumeAll>:
{
 8000f44:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8000f46:	4b35      	ldr	r3, [pc, #212]	; (800101c <xTaskResumeAll+0xd8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	b943      	cbnz	r3, 8000f5e <xTaskResumeAll+0x1a>
 8000f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f50:	f383 8811 	msr	BASEPRI, r3
 8000f54:	f3bf 8f6f 	isb	sy
 8000f58:	f3bf 8f4f 	dsb	sy
 8000f5c:	e7fe      	b.n	8000f5c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8000f5e:	f7ff f999 	bl	8000294 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <xTaskResumeAll+0xd8>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	3a01      	subs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d150      	bne.n	8001012 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <xTaskResumeAll+0xdc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	b923      	cbnz	r3, 8000f80 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8000f76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8000f78:	f7ff f9ae 	bl	80002d8 <vPortExitCritical>
}
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <xTaskResumeAll+0xe0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b31b      	cbz	r3, 8000fd0 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <xTaskResumeAll+0xe0>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f8e:	f104 0018 	add.w	r0, r4, #24
 8000f92:	f7ff f911 	bl	80001b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f96:	1d25      	adds	r5, r4, #4
 8000f98:	4628      	mov	r0, r5
 8000f9a:	f7ff f90d 	bl	80001b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000f9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <xTaskResumeAll+0xe4>)
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d901      	bls.n	8000fac <xTaskResumeAll+0x68>
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <xTaskResumeAll+0xe4>)
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fb0:	009a      	lsls	r2, r3, #2
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	481d      	ldr	r0, [pc, #116]	; (800102c <xTaskResumeAll+0xe8>)
 8000fb6:	4410      	add	r0, r2
 8000fb8:	f7ff f8d8 	bl	800016c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <xTaskResumeAll+0xec>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3dc      	bcc.n	8000f82 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <xTaskResumeAll+0xf0>)
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e7d8      	b.n	8000f82 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8000fd0:	b10c      	cbz	r4, 8000fd6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8000fd2:	f7ff fd91 	bl	8000af8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <xTaskResumeAll+0xf4>)
 8000fd8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000fda:	b974      	cbnz	r4, 8000ffa <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <xTaskResumeAll+0xf0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	b1cb      	cbz	r3, 8001016 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8000fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <xTaskResumeAll+0xf8>)
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8000ff2:	2401      	movs	r4, #1
 8000ff4:	e7c0      	b.n	8000f78 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000ff6:	3c01      	subs	r4, #1
 8000ff8:	d007      	beq.n	800100a <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8000ffa:	f7ff ff23 	bl	8000e44 <xTaskIncrementTick>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d0f9      	beq.n	8000ff6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8001002:	2201      	movs	r2, #1
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <xTaskResumeAll+0xf0>)
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e7f5      	b.n	8000ff6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 800100a:	2200      	movs	r2, #0
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <xTaskResumeAll+0xf4>)
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e7e4      	b.n	8000fdc <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8001012:	2400      	movs	r4, #0
 8001014:	e7b0      	b.n	8000f78 <xTaskResumeAll+0x34>
 8001016:	2400      	movs	r4, #0
 8001018:	e7ae      	b.n	8000f78 <xTaskResumeAll+0x34>
 800101a:	bf00      	nop
 800101c:	2000010c 	.word	0x2000010c
 8001020:	20000104 	.word	0x20000104
 8001024:	20000148 	.word	0x20000148
 8001028:	20000114 	.word	0x20000114
 800102c:	2000003c 	.word	0x2000003c
 8001030:	20000030 	.word	0x20000030
 8001034:	20000178 	.word	0x20000178
 8001038:	20000108 	.word	0x20000108
 800103c:	e000ed04 	.word	0xe000ed04

08001040 <vTaskDelay>:
	{
 8001040:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001042:	b1a8      	cbz	r0, 8001070 <vTaskDelay+0x30>
 8001044:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <vTaskDelay+0x48>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b143      	cbz	r3, 800105e <vTaskDelay+0x1e>
 800104c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001050:	f383 8811 	msr	BASEPRI, r3
 8001054:	f3bf 8f6f 	isb	sy
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	e7fe      	b.n	800105c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800105e:	f7ff fee9 	bl	8000e34 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001062:	2100      	movs	r1, #0
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff fe33 	bl	8000cd0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800106a:	f7ff ff6b 	bl	8000f44 <xTaskResumeAll>
 800106e:	e000      	b.n	8001072 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8001070:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8001072:	b938      	cbnz	r0, 8001084 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8001074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <vTaskDelay+0x4c>)
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	f3bf 8f4f 	dsb	sy
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	bd10      	pop	{r4, pc}
 8001086:	bf00      	nop
 8001088:	2000010c 	.word	0x2000010c
 800108c:	e000ed04 	.word	0xe000ed04

08001090 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <vTaskSwitchContext+0x84>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b96b      	cbnz	r3, 80010b2 <vTaskSwitchContext+0x22>
		xYieldPending = pdFALSE;
 8001096:	2200      	movs	r2, #0
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <vTaskSwitchContext+0x88>)
 800109a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <vTaskSwitchContext+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010a4:	008a      	lsls	r2, r1, #2
 80010a6:	491e      	ldr	r1, [pc, #120]	; (8001120 <vTaskSwitchContext+0x90>)
 80010a8:	588a      	ldr	r2, [r1, r2]
 80010aa:	b97a      	cbnz	r2, 80010cc <vTaskSwitchContext+0x3c>
 80010ac:	b12b      	cbz	r3, 80010ba <vTaskSwitchContext+0x2a>
 80010ae:	3b01      	subs	r3, #1
 80010b0:	e7f6      	b.n	80010a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80010b2:	2201      	movs	r2, #1
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <vTaskSwitchContext+0x88>)
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010be:	f383 8811 	msr	BASEPRI, r3
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	f3bf 8f4f 	dsb	sy
 80010ca:	e7fe      	b.n	80010ca <vTaskSwitchContext+0x3a>
{
 80010cc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010ce:	4608      	mov	r0, r1
 80010d0:	009a      	lsls	r2, r3, #2
 80010d2:	18d4      	adds	r4, r2, r3
 80010d4:	00a1      	lsls	r1, r4, #2
 80010d6:	4401      	add	r1, r0
 80010d8:	684c      	ldr	r4, [r1, #4]
 80010da:	6864      	ldr	r4, [r4, #4]
 80010dc:	604c      	str	r4, [r1, #4]
 80010de:	441a      	add	r2, r3
 80010e0:	0091      	lsls	r1, r2, #2
 80010e2:	3108      	adds	r1, #8
 80010e4:	4408      	add	r0, r1
 80010e6:	4284      	cmp	r4, r0
 80010e8:	d00c      	beq.n	8001104 <vTaskSwitchContext+0x74>
 80010ea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80010ee:	0091      	lsls	r1, r2, #2
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <vTaskSwitchContext+0x90>)
 80010f2:	440a      	add	r2, r1
 80010f4:	6852      	ldr	r2, [r2, #4]
 80010f6:	68d1      	ldr	r1, [r2, #12]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <vTaskSwitchContext+0x94>)
 80010fa:	6011      	str	r1, [r2, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <vTaskSwitchContext+0x8c>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bc10      	pop	{r4}
 8001102:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001104:	6860      	ldr	r0, [r4, #4]
 8001106:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800110a:	0091      	lsls	r1, r2, #2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <vTaskSwitchContext+0x90>)
 800110e:	440a      	add	r2, r1
 8001110:	6050      	str	r0, [r2, #4]
 8001112:	e7ea      	b.n	80010ea <vTaskSwitchContext+0x5a>
 8001114:	2000010c 	.word	0x2000010c
 8001118:	20000178 	.word	0x20000178
 800111c:	20000114 	.word	0x20000114
 8001120:	2000003c 	.word	0x2000003c
 8001124:	20000030 	.word	0x20000030

08001128 <vTaskSuspend>:
	{
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800112c:	f7ff f8b2 	bl	8000294 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001130:	b1e4      	cbz	r4, 800116c <vTaskSuspend+0x44>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001132:	1d25      	adds	r5, r4, #4
 8001134:	4628      	mov	r0, r5
 8001136:	f7ff f83f 	bl	80001b8 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800113a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800113c:	b11b      	cbz	r3, 8001146 <vTaskSuspend+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800113e:	f104 0018 	add.w	r0, r4, #24
 8001142:	f7ff f839 	bl	80001b8 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001146:	4629      	mov	r1, r5
 8001148:	4822      	ldr	r0, [pc, #136]	; (80011d4 <vTaskSuspend+0xac>)
 800114a:	f7ff f80f 	bl	800016c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800114e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d00c      	beq.n	8001172 <vTaskSuspend+0x4a>
		taskEXIT_CRITICAL();
 8001158:	f7ff f8be 	bl	80002d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <vTaskSuspend+0xb0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b95b      	cbnz	r3, 800117a <vTaskSuspend+0x52>
		if( pxTCB == pxCurrentTCB )
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <vTaskSuspend+0xb4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	429c      	cmp	r4, r3
 8001168:	d00e      	beq.n	8001188 <vTaskSuspend+0x60>
 800116a:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <vTaskSuspend+0xb4>)
 800116e:	681c      	ldr	r4, [r3, #0]
 8001170:	e7df      	b.n	8001132 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001172:	2300      	movs	r3, #0
 8001174:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8001178:	e7ee      	b.n	8001158 <vTaskSuspend+0x30>
			taskENTER_CRITICAL();
 800117a:	f7ff f88b 	bl	8000294 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800117e:	f7ff fcbb 	bl	8000af8 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8001182:	f7ff f8a9 	bl	80002d8 <vPortExitCritical>
 8001186:	e7ec      	b.n	8001162 <vTaskSuspend+0x3a>
			if( xSchedulerRunning != pdFALSE )
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <vTaskSuspend+0xb0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b1a3      	cbz	r3, 80011b8 <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <vTaskSuspend+0xb8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	b143      	cbz	r3, 80011a6 <vTaskSuspend+0x7e>
 8001194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001198:	f383 8811 	msr	BASEPRI, r3
 800119c:	f3bf 8f6f 	isb	sy
 80011a0:	f3bf 8f4f 	dsb	sy
 80011a4:	e7fe      	b.n	80011a4 <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
 80011a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <vTaskSuspend+0xbc>)
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	f3bf 8f4f 	dsb	sy
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <vTaskSuspend+0xac>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <vTaskSuspend+0xc0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d103      	bne.n	80011cc <vTaskSuspend+0xa4>
					pxCurrentTCB = NULL;
 80011c4:	2200      	movs	r2, #0
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <vTaskSuspend+0xb4>)
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
					vTaskSwitchContext();
 80011cc:	f7ff ff60 	bl	8001090 <vTaskSwitchContext>
	}
 80011d0:	e7cb      	b.n	800116a <vTaskSuspend+0x42>
 80011d2:	bf00      	nop
 80011d4:	20000160 	.word	0x20000160
 80011d8:	2000015c 	.word	0x2000015c
 80011dc:	20000030 	.word	0x20000030
 80011e0:	2000010c 	.word	0x2000010c
 80011e4:	e000ed04 	.word	0xe000ed04
 80011e8:	20000104 	.word	0x20000104

080011ec <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80011ec:	b940      	cbnz	r0, 8001200 <vTaskPlaceOnEventList+0x14>
 80011ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f2:	f383 8811 	msr	BASEPRI, r3
 80011f6:	f3bf 8f6f 	isb	sy
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	e7fe      	b.n	80011fe <vTaskPlaceOnEventList+0x12>
{
 8001200:	b510      	push	{r4, lr}
 8001202:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <vTaskPlaceOnEventList+0x2c>)
 8001206:	6819      	ldr	r1, [r3, #0]
 8001208:	3118      	adds	r1, #24
 800120a:	f7fe ffbb 	bl	8000184 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800120e:	2101      	movs	r1, #1
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff fd5d 	bl	8000cd0 <prvAddCurrentTaskToDelayedList>
 8001216:	bd10      	pop	{r4, pc}
 8001218:	20000030 	.word	0x20000030

0800121c <xTaskRemoveFromEventList>:
{
 800121c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800121e:	68c3      	ldr	r3, [r0, #12]
 8001220:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8001222:	b324      	cbz	r4, 800126e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001224:	f104 0518 	add.w	r5, r4, #24
 8001228:	4628      	mov	r0, r5
 800122a:	f7fe ffc5 	bl	80001b8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <xTaskRemoveFromEventList+0x74>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	bb2b      	cbnz	r3, 8001280 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001234:	1d25      	adds	r5, r4, #4
 8001236:	4628      	mov	r0, r5
 8001238:	f7fe ffbe 	bl	80001b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800123c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <xTaskRemoveFromEventList+0x78>)
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	4293      	cmp	r3, r2
 8001244:	d901      	bls.n	800124a <xTaskRemoveFromEventList+0x2e>
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <xTaskRemoveFromEventList+0x78>)
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800124e:	009a      	lsls	r2, r3, #2
 8001250:	4629      	mov	r1, r5
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <xTaskRemoveFromEventList+0x7c>)
 8001254:	4410      	add	r0, r2
 8001256:	f7fe ff89 	bl	800016c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800125a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <xTaskRemoveFromEventList+0x80>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	429a      	cmp	r2, r3
 8001264:	d911      	bls.n	800128a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8001266:	2001      	movs	r0, #1
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <xTaskRemoveFromEventList+0x84>)
 800126a:	6018      	str	r0, [r3, #0]
 800126c:	bd38      	pop	{r3, r4, r5, pc}
 800126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001272:	f383 8811 	msr	BASEPRI, r3
 8001276:	f3bf 8f6f 	isb	sy
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	e7fe      	b.n	800127e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001280:	4629      	mov	r1, r5
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <xTaskRemoveFromEventList+0x88>)
 8001284:	f7fe ff72 	bl	800016c <vListInsertEnd>
 8001288:	e7e7      	b.n	800125a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800128a:	2000      	movs	r0, #0
}
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	bf00      	nop
 8001290:	2000010c 	.word	0x2000010c
 8001294:	20000114 	.word	0x20000114
 8001298:	2000003c 	.word	0x2000003c
 800129c:	20000030 	.word	0x20000030
 80012a0:	20000178 	.word	0x20000178
 80012a4:	20000148 	.word	0x20000148

080012a8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <vTaskInternalSetTimeOutState+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <vTaskInternalSetTimeOutState+0x14>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6043      	str	r3, [r0, #4]
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000144 	.word	0x20000144
 80012bc:	20000174 	.word	0x20000174

080012c0 <xTaskCheckForTimeOut>:
{
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80012c2:	b1e0      	cbz	r0, 80012fe <xTaskCheckForTimeOut+0x3e>
 80012c4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80012c6:	b319      	cbz	r1, 8001310 <xTaskCheckForTimeOut+0x50>
 80012c8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 80012ca:	f7fe ffe3 	bl	8000294 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <xTaskCheckForTimeOut+0x78>)
 80012d0:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80012d2:	6869      	ldr	r1, [r5, #4]
 80012d4:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d028      	beq.n	8001330 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80012de:	682f      	ldr	r7, [r5, #0]
 80012e0:	4e16      	ldr	r6, [pc, #88]	; (800133c <xTaskCheckForTimeOut+0x7c>)
 80012e2:	6836      	ldr	r6, [r6, #0]
 80012e4:	42b7      	cmp	r7, r6
 80012e6:	d001      	beq.n	80012ec <xTaskCheckForTimeOut+0x2c>
 80012e8:	4288      	cmp	r0, r1
 80012ea:	d223      	bcs.n	8001334 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d318      	bcc.n	8001322 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80012f4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80012f6:	f7fe ffef 	bl	80002d8 <vPortExitCritical>
}
 80012fa:	4620      	mov	r0, r4
 80012fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	e7fe      	b.n	800130e <xTaskCheckForTimeOut+0x4e>
 8001310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	f3bf 8f6f 	isb	sy
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	e7fe      	b.n	8001320 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001326:	4628      	mov	r0, r5
 8001328:	f7ff ffbe 	bl	80012a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800132c:	2400      	movs	r4, #0
 800132e:	e7e2      	b.n	80012f6 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
 8001330:	2400      	movs	r4, #0
 8001332:	e7e0      	b.n	80012f6 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 8001334:	2401      	movs	r4, #1
 8001336:	e7de      	b.n	80012f6 <xTaskCheckForTimeOut+0x36>
 8001338:	20000174 	.word	0x20000174
 800133c:	20000144 	.word	0x20000144

08001340 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8001340:	2201      	movs	r2, #1
 8001342:	4b01      	ldr	r3, [pc, #4]	; (8001348 <vTaskMissedYield+0x8>)
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	4770      	bx	lr
 8001348:	20000178 	.word	0x20000178

0800134c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800134c:	2800      	cmp	r0, #0
 800134e:	d039      	beq.n	80013c4 <xTaskPriorityDisinherit+0x78>
	{
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <xTaskPriorityDisinherit+0x84>)
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4290      	cmp	r0, r2
 800135a:	d008      	beq.n	800136e <xTaskPriorityDisinherit+0x22>
 800135c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001360:	f383 8811 	msr	BASEPRI, r3
 8001364:	f3bf 8f6f 	isb	sy
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	e7fe      	b.n	800136c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800136e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001370:	b942      	cbnz	r2, 8001384 <xTaskPriorityDisinherit+0x38>
 8001372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001376:	f383 8811 	msr	BASEPRI, r3
 800137a:	f3bf 8f6f 	isb	sy
 800137e:	f3bf 8f4f 	dsb	sy
 8001382:	e7fe      	b.n	8001382 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8001384:	3a01      	subs	r2, #1
 8001386:	6442      	str	r2, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001388:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800138a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800138c:	4288      	cmp	r0, r1
 800138e:	d01b      	beq.n	80013c8 <xTaskPriorityDisinherit+0x7c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001390:	b9e2      	cbnz	r2, 80013cc <xTaskPriorityDisinherit+0x80>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001392:	1d25      	adds	r5, r4, #4
 8001394:	4628      	mov	r0, r5
 8001396:	f7fe ff0f 	bl	80001b8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800139a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800139c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800139e:	f1c3 020a 	rsb	r2, r3, #10
 80013a2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <xTaskPriorityDisinherit+0x88>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <xTaskPriorityDisinherit+0x64>
 80013ac:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <xTaskPriorityDisinherit+0x88>)
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013b4:	009a      	lsls	r2, r3, #2
 80013b6:	4629      	mov	r1, r5
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <xTaskPriorityDisinherit+0x8c>)
 80013ba:	4410      	add	r0, r2
 80013bc:	f7fe fed6 	bl	800016c <vListInsertEnd>
					xReturn = pdTRUE;
 80013c0:	2001      	movs	r0, #1
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80013c4:	2000      	movs	r0, #0
 80013c6:	4770      	bx	lr
 80013c8:	2000      	movs	r0, #0
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
 80013cc:	2000      	movs	r0, #0
	}
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	20000030 	.word	0x20000030
 80013d4:	20000114 	.word	0x20000114
 80013d8:	2000003c 	.word	0x2000003c

080013dc <app_run>:
		break;
	}
	return result;
}
void app_run(void)
{
 80013dc:	b500      	push	{lr}
 80013de:	b085      	sub	sp, #20
    /* Create the task without using any dynamic memory allocation. */
    xTask1Handle = xTaskCreateStatic(
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <app_run+0x44>)
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <app_run+0x48>)
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2301      	movs	r3, #1
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	490d      	ldr	r1, [pc, #52]	; (8001428 <app_run+0x4c>)
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <app_run+0x50>)
 80013f4:	f7ff fcaa 	bl	8000d4c <xTaskCreateStatic>
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <app_run+0x54>)
 80013fa:	6018      	str	r0, [r3, #0]
                  (void *) NULL,         /* Parameter passed into the task. */
                  TASK1_PRIORITY,        /* Priority at which the task is created. */
                  xTask1Stack,           /* Array to use as the task's stack. */
                  &xTask1Buffer);        /* Variable to hold the task's data structure. */
    /* Create the task without using any dynamic memory allocation. */
    xDecodificationTaskHandle = xTaskCreateStatic(
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <app_run+0x58>)
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <app_run+0x5c>)
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	2302      	movs	r3, #2
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2300      	movs	r3, #0
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	490b      	ldr	r1, [pc, #44]	; (800143c <app_run+0x60>)
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <app_run+0x64>)
 8001410:	f7ff fc9c 	bl	8000d4c <xTaskCreateStatic>
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <app_run+0x68>)
 8001416:	6018      	str	r0, [r3, #0]
                  (void *) NULL,         /* Parameter passed into the task. */
				  DECODIFICATION_TASK_PRIORITY,        /* Priority at which the task is created. */
                  xDecodificationTaskStack,           /* Array to use as the task's stack. */
                  &xDecodificationTaskBuffer);        /* Variable to hold the task's data structure. */

    vTaskStartScheduler();
 8001418:	f7ff fcd0 	bl	8000dbc <vTaskStartScheduler>
 800141c:	e7fe      	b.n	800141c <app_run+0x40>
 800141e:	bf00      	nop
 8001420:	20000460 	.word	0x20000460
 8001424:	200006c4 	.word	0x200006c4
 8001428:	080025ac 	.word	0x080025ac
 800142c:	0800156d 	.word	0x0800156d
 8001430:	200003e4 	.word	0x200003e4
 8001434:	200008c4 	.word	0x200008c4
 8001438:	200004c4 	.word	0x200004c4
 800143c:	080025b4 	.word	0x080025b4
 8001440:	080014c9 	.word	0x080014c9
 8001444:	2000037c 	.word	0x2000037c

08001448 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <vApplicationGetIdleTaskMemory+0x10>)
 800144a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <vApplicationGetIdleTaskMemory+0x14>)
 800144e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000380 	.word	0x20000380
 800145c:	2000017c 	.word	0x2000017c

08001460 <envia_dados_decodificador>:
QueueHandle_t decoderQueueHandle;

uint8_t dataReceived;

uint8_t envia_dados_decodificador(uint8_t dado)
{
 8001460:	b500      	push	{lr}
 8001462:	b083      	sub	sp, #12
 8001464:	f88d 0007 	strb.w	r0, [sp, #7]
	uint8_t result = FALSE;
	if(decoderQueueHandle != NULL){
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <envia_dados_decodificador+0x30>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	b158      	cbz	r0, 8001486 <envia_dados_decodificador+0x26>
		if(xQueueSend(decoderQueueHandle,(void *)&dado,(TickType_t)0) == pdTRUE){
 800146e:	2300      	movs	r3, #0
 8001470:	461a      	mov	r2, r3
 8001472:	f10d 0107 	add.w	r1, sp, #7
 8001476:	f7ff f965 	bl	8000744 <xQueueGenericSend>
 800147a:	2801      	cmp	r0, #1
 800147c:	d005      	beq.n	800148a <envia_dados_decodificador+0x2a>
	uint8_t result = FALSE;
 800147e:	2000      	movs	r0, #0
			result = TRUE;
		}
	}
	return result;
}
 8001480:	b003      	add	sp, #12
 8001482:	f85d fb04 	ldr.w	pc, [sp], #4
	uint8_t result = FALSE;
 8001486:	2000      	movs	r0, #0
 8001488:	e7fa      	b.n	8001480 <envia_dados_decodificador+0x20>
			result = TRUE;
 800148a:	2001      	movs	r0, #1
 800148c:	e7f8      	b.n	8001480 <envia_dados_decodificador+0x20>
 800148e:	bf00      	nop
 8001490:	20000a34 	.word	0x20000a34

08001494 <envia_dados_decodificador_isr>:
uint8_t envia_dados_decodificador_isr(uint8_t dado)
{
 8001494:	b500      	push	{lr}
 8001496:	b083      	sub	sp, #12
 8001498:	f88d 0007 	strb.w	r0, [sp, #7]
    uint8_t resultado = FALSE;
    if(decoderQueueHandle != NULL){
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <envia_dados_decodificador_isr+0x30>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	b158      	cbz	r0, 80014ba <envia_dados_decodificador_isr+0x26>
        if(xQueueSendFromISR(decoderQueueHandle, &dado, NULL) == pdTRUE){
 80014a2:	2300      	movs	r3, #0
 80014a4:	461a      	mov	r2, r3
 80014a6:	f10d 0107 	add.w	r1, sp, #7
 80014aa:	f7ff fa03 	bl	80008b4 <xQueueGenericSendFromISR>
 80014ae:	2801      	cmp	r0, #1
 80014b0:	d005      	beq.n	80014be <envia_dados_decodificador_isr+0x2a>
    uint8_t resultado = FALSE;
 80014b2:	2000      	movs	r0, #0
            resultado = TRUE;
        }
    }
    return resultado;
}
 80014b4:	b003      	add	sp, #12
 80014b6:	f85d fb04 	ldr.w	pc, [sp], #4
    uint8_t resultado = FALSE;
 80014ba:	2000      	movs	r0, #0
 80014bc:	e7fa      	b.n	80014b4 <envia_dados_decodificador_isr+0x20>
            resultado = TRUE;
 80014be:	2001      	movs	r0, #1
 80014c0:	e7f8      	b.n	80014b4 <envia_dados_decodificador_isr+0x20>
 80014c2:	bf00      	nop
 80014c4:	20000a34 	.word	0x20000a34

080014c8 <decodification_task>:
void decodification_task(void *args)
{
 80014c8:	b500      	push	{lr}
 80014ca:	b083      	sub	sp, #12
    /* Create a queue capable of containing 10 uint8_t values. */
	decoderQueueHandle = xQueueCreateStatic( DECODER_QUEUE_LENGTH,
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <decodification_task+0x84>)
 80014d2:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <decodification_task+0x88>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	200a      	movs	r0, #10
 80014d8:	f7ff f8e6 	bl	80006a8 <xQueueGenericCreateStatic>
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <decodification_task+0x8c>)
 80014de:	6018      	str	r0, [r3, #0]
											 DECODER_ITEM_SIZE,
											 decoderQueueStorageArea,
											 &decoderStaticQueue );
    /* decoderQueueStorageArea was not NULL so decoderQueueHandle should not be NULL. */
    configASSERT( decoderQueueHandle );
 80014e0:	b958      	cbnz	r0, 80014fa <decodification_task+0x32>
 80014e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e6:	f383 8811 	msr	BASEPRI, r3
 80014ea:	f3bf 8f6f 	isb	sy
 80014ee:	f3bf 8f4f 	dsb	sy
 80014f2:	e7fe      	b.n	80014f2 <decodification_task+0x2a>
                        30,
                        30,
                        20);
            }
	    }
        vTaskDelay(10);
 80014f4:	200a      	movs	r0, #10
 80014f6:	f7ff fda3 	bl	8001040 <vTaskDelay>
	    if(xQueueReceive(decoderQueueHandle,&dataReceived,(TickType_t)10) == pdTRUE){
 80014fa:	220a      	movs	r2, #10
 80014fc:	4916      	ldr	r1, [pc, #88]	; (8001558 <decodification_task+0x90>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <decodification_task+0x8c>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	f7ff fa47 	bl	8000994 <xQueueReceive>
 8001506:	2801      	cmp	r0, #1
 8001508:	d1f4      	bne.n	80014f4 <decodification_task+0x2c>
            exec_decodificador_avirede(dataReceived);
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <decodification_task+0x90>)
 800150c:	7818      	ldrb	r0, [r3, #0]
 800150e:	f000 f967 	bl	80017e0 <exec_decodificador_avirede>
            if(frame_decodificado() == TRUE){
 8001512:	f000 f95f 	bl	80017d4 <frame_decodificado>
 8001516:	2801      	cmp	r0, #1
 8001518:	d1ec      	bne.n	80014f4 <decodification_task+0x2c>
                modeloDecodificado = recebe_modelo_frame();
 800151a:	f000 f93d 	bl	8001798 <recebe_modelo_frame>
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <decodification_task+0x94>)
 8001520:	7018      	strb	r0, [r3, #0]
                idDecodificado = recebe_id_frame();
 8001522:	f000 f93f 	bl	80017a4 <recebe_id_frame>
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <decodification_task+0x98>)
 8001528:	7018      	strb	r0, [r3, #0]
                nDadosDecodificado = recebe_dados_frame((uint8_t *)dadosDecodificados);
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <decodification_task+0x9c>)
 800152c:	f000 f940 	bl	80017b0 <recebe_dados_frame>
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <decodification_task+0xa0>)
 8001532:	7018      	strb	r0, [r3, #0]
                bsp_led_requisita(
 8001534:	2314      	movs	r3, #20
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	231e      	movs	r3, #30
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001540:	4611      	mov	r1, r2
 8001542:	2002      	movs	r0, #2
 8001544:	f000 f82c 	bl	80015a0 <bsp_led_requisita>
 8001548:	e7d4      	b.n	80014f4 <decodification_task+0x2c>
 800154a:	bf00      	nop
 800154c:	200003e8 	.word	0x200003e8
 8001550:	20000928 	.word	0x20000928
 8001554:	20000a34 	.word	0x20000a34
 8001558:	20000a33 	.word	0x20000a33
 800155c:	20000431 	.word	0x20000431
 8001560:	20000430 	.word	0x20000430
 8001564:	20000934 	.word	0x20000934
 8001568:	20000432 	.word	0x20000432

0800156c <task_1>:
 */
#include "task1.h"

TaskHandle_t taskToSuspend = NULL;
void task_1(void *args)
{
 800156c:	b500      	push	{lr}
 800156e:	b083      	sub	sp, #12
   while(1){
	    envia_dados_decodificador(12);
 8001570:	200c      	movs	r0, #12
 8001572:	f7ff ff75 	bl	8001460 <envia_dados_decodificador>
        bsp_led_fsm_run();
 8001576:	f000 f869 	bl	800164c <bsp_led_fsm_run>
        bsp_led_requisita(
 800157a:	2303      	movs	r3, #3
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	2396      	movs	r3, #150	; 0x96
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	231e      	movs	r3, #30
 8001584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001588:	4611      	mov	r1, r2
 800158a:	2001      	movs	r0, #1
 800158c:	f000 f808 	bl	80015a0 <bsp_led_requisita>
                500,
                500,
                30,
                150,
                3);
        vTaskSuspend(taskToSuspend);
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <task_1+0x30>)
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f7ff fdc8 	bl	8001128 <vTaskSuspend>
 8001598:	e7ea      	b.n	8001570 <task_1+0x4>
 800159a:	bf00      	nop
 800159c:	20000434 	.word	0x20000434

080015a0 <bsp_led_requisita>:
        uint32_t atrasoAntes,
        uint32_t atrasoDepois,
        uint32_t tempoLigado,
        uint32_t tempoDesligado,
        uint8_t ciclos)
{
 80015a0:	b430      	push	{r4, r5}
 80015a2:	4605      	mov	r5, r0
    uint8_t resultado = FALSE;

    if(emFuncionamento == TRUE){
 80015a4:	4c10      	ldr	r4, [pc, #64]	; (80015e8 <bsp_led_requisita+0x48>)
 80015a6:	7820      	ldrb	r0, [r4, #0]
 80015a8:	2801      	cmp	r0, #1
 80015aa:	d004      	beq.n	80015b6 <bsp_led_requisita+0x16>
        if(prioridade > pPrioridade){
            resultado = TRUE;
        }
    }else{
        resultado = TRUE;
 80015ac:	2001      	movs	r0, #1
    }

    if(resultado == TRUE){
 80015ae:	2801      	cmp	r0, #1
 80015b0:	d007      	beq.n	80015c2 <bsp_led_requisita+0x22>

        emFuncionamento = TRUE;
    }

    return resultado;
}
 80015b2:	bc30      	pop	{r4, r5}
 80015b4:	4770      	bx	lr
        if(prioridade > pPrioridade){
 80015b6:	4c0d      	ldr	r4, [pc, #52]	; (80015ec <bsp_led_requisita+0x4c>)
 80015b8:	7824      	ldrb	r4, [r4, #0]
 80015ba:	42ac      	cmp	r4, r5
 80015bc:	d3f7      	bcc.n	80015ae <bsp_led_requisita+0xe>
    uint8_t resultado = FALSE;
 80015be:	2000      	movs	r0, #0
 80015c0:	e7f5      	b.n	80015ae <bsp_led_requisita+0xe>
        pPrioridade = prioridade;
 80015c2:	4c0a      	ldr	r4, [pc, #40]	; (80015ec <bsp_led_requisita+0x4c>)
 80015c4:	7025      	strb	r5, [r4, #0]
        pAtrasoAntes = atrasoAntes;
 80015c6:	4c0a      	ldr	r4, [pc, #40]	; (80015f0 <bsp_led_requisita+0x50>)
 80015c8:	6021      	str	r1, [r4, #0]
        pAtrasoDepois = atrasoDepois;
 80015ca:	490a      	ldr	r1, [pc, #40]	; (80015f4 <bsp_led_requisita+0x54>)
 80015cc:	600a      	str	r2, [r1, #0]
        pTempoLigado = tempoLigado;
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <bsp_led_requisita+0x58>)
 80015d0:	6013      	str	r3, [r2, #0]
        pTempoDesligado = tempoDesligado;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <bsp_led_requisita+0x5c>)
 80015d4:	9a02      	ldr	r2, [sp, #8]
 80015d6:	601a      	str	r2, [r3, #0]
        pCiclos = ciclos;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <bsp_led_requisita+0x60>)
 80015da:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80015de:	701a      	strb	r2, [r3, #0]
        emFuncionamento = TRUE;
 80015e0:	2201      	movs	r2, #1
 80015e2:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <bsp_led_requisita+0x48>)
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e7e4      	b.n	80015b2 <bsp_led_requisita+0x12>
 80015e8:	20000438 	.word	0x20000438
 80015ec:	20000449 	.word	0x20000449
 80015f0:	20000440 	.word	0x20000440
 80015f4:	20000444 	.word	0x20000444
 80015f8:	20000450 	.word	0x20000450
 80015fc:	2000044c 	.word	0x2000044c
 8001600:	20000448 	.word	0x20000448

08001604 <liga_led>:

uint32_t marcoDeTempo = 0;

void liga_led(void)
{
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 8001604:	4a02      	ldr	r2, [pc, #8]	; (8001610 <liga_led+0xc>)
 8001606:	6913      	ldr	r3, [r2, #16]
 8001608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800160c:	6113      	str	r3, [r2, #16]
 800160e:	4770      	bx	lr
 8001610:	40011000 	.word	0x40011000

08001614 <desliga_led>:
}

void desliga_led(void)
{
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 8001614:	4a02      	ldr	r2, [pc, #8]	; (8001620 <desliga_led+0xc>)
 8001616:	6913      	ldr	r3, [r2, #16]
 8001618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161c:	6113      	str	r3, [r2, #16]
 800161e:	4770      	bx	lr
 8001620:	40011000 	.word	0x40011000

08001624 <configura_led>:
}

void configura_led(void)
{
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <configura_led+0x20>)
 8001626:	6993      	ldr	r3, [r2, #24]
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6193      	str	r3, [r2, #24]
    GPIOC->CRH &= ~(uint32_t)GPIO_CRH_CNF13;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <configura_led+0x24>)
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001636:	605a      	str	r2, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13_1;
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	40011000 	.word	0x40011000

0800164c <bsp_led_fsm_run>:
}

void bsp_led_fsm_run(void)
{
 800164c:	b508      	push	{r3, lr}
    switch(estado){
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <bsp_led_fsm_run+0xf0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b07      	cmp	r3, #7
 8001654:	d86e      	bhi.n	8001734 <bsp_led_fsm_run+0xe8>
 8001656:	e8df f003 	tbb	[pc, r3]
 800165a:	0a04      	.short	0x0a04
 800165c:	3a2e2418 	.word	0x3a2e2418
 8001660:	5e44      	.short	0x5e44
        case ESTADO_CONFIGURANDO:
        	configura_led();
 8001662:	f7ff ffdf 	bl	8001624 <configura_led>
            estado = ESTADO_AGUARDA_REQUISICAO;
 8001666:	2201      	movs	r2, #1
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <bsp_led_fsm_run+0xf0>)
 800166a:	701a      	strb	r2, [r3, #0]
            break;
 800166c:	bd08      	pop	{r3, pc}

        case ESTADO_AGUARDA_REQUISICAO:
            if(emFuncionamento == TRUE){
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <bsp_led_fsm_run+0xf4>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d161      	bne.n	800173a <bsp_led_fsm_run+0xee>
                desliga_led();
 8001676:	f7ff ffcd 	bl	8001614 <desliga_led>
                marcoDeTempo = get_current_time();
 800167a:	f000 f93d 	bl	80018f8 <get_current_time>
 800167e:	4b31      	ldr	r3, [pc, #196]	; (8001744 <bsp_led_fsm_run+0xf8>)
 8001680:	6018      	str	r0, [r3, #0]
                estado = ESTADO_AGUARDA_T_ANTES;
 8001682:	2202      	movs	r2, #2
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <bsp_led_fsm_run+0xf0>)
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	bd08      	pop	{r3, pc}
            }
            break;

        case ESTADO_AGUARDA_T_ANTES:
            if(elapsed_time(marcoDeTempo) >= pAtrasoAntes){
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <bsp_led_fsm_run+0xf8>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f000 f939 	bl	8001904 <elapsed_time>
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <bsp_led_fsm_run+0xfc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4298      	cmp	r0, r3
 8001698:	d34f      	bcc.n	800173a <bsp_led_fsm_run+0xee>
                estado = ESTADO_LIGAR_LED;
 800169a:	2203      	movs	r2, #3
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <bsp_led_fsm_run+0xf0>)
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	bd08      	pop	{r3, pc}
            }
            break;

        case ESTADO_LIGAR_LED:
            liga_led();
 80016a2:	f7ff ffaf 	bl	8001604 <liga_led>
            marcoDeTempo = get_current_time();
 80016a6:	f000 f927 	bl	80018f8 <get_current_time>
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <bsp_led_fsm_run+0xf8>)
 80016ac:	6018      	str	r0, [r3, #0]
            estado = ESTADO_AGUARDA_T_LIGADO;
 80016ae:	2204      	movs	r2, #4
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <bsp_led_fsm_run+0xf0>)
 80016b2:	701a      	strb	r2, [r3, #0]
            break;
 80016b4:	bd08      	pop	{r3, pc}

        case ESTADO_AGUARDA_T_LIGADO:
            if(elapsed_time(marcoDeTempo) >= pTempoLigado){
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <bsp_led_fsm_run+0xf8>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f000 f923 	bl	8001904 <elapsed_time>
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <bsp_led_fsm_run+0x100>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4298      	cmp	r0, r3
 80016c4:	d339      	bcc.n	800173a <bsp_led_fsm_run+0xee>
                estado = ESTADO_DESLIGA_LED;
 80016c6:	2205      	movs	r2, #5
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <bsp_led_fsm_run+0xf0>)
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	bd08      	pop	{r3, pc}
            }
            break;

        case ESTADO_DESLIGA_LED:
            desliga_led();
 80016ce:	f7ff ffa1 	bl	8001614 <desliga_led>
            marcoDeTempo = get_current_time();
 80016d2:	f000 f911 	bl	80018f8 <get_current_time>
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <bsp_led_fsm_run+0xf8>)
 80016d8:	6018      	str	r0, [r3, #0]
            estado = ESTADO_AGUARDA_T_DESLIGADO;
 80016da:	2206      	movs	r2, #6
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <bsp_led_fsm_run+0xf0>)
 80016de:	701a      	strb	r2, [r3, #0]
            break;
 80016e0:	bd08      	pop	{r3, pc}

        case ESTADO_AGUARDA_T_DESLIGADO:
            if(elapsed_time(marcoDeTempo) >= pTempoDesligado){
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <bsp_led_fsm_run+0xf8>)
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	f000 f90d 	bl	8001904 <elapsed_time>
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <bsp_led_fsm_run+0x104>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d323      	bcc.n	800173a <bsp_led_fsm_run+0xee>
                pCiclos--;
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <bsp_led_fsm_run+0x108>)
 80016f4:	7813      	ldrb	r3, [r2, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	7013      	strb	r3, [r2, #0]
                if(pCiclos > 0){
 80016fc:	b11b      	cbz	r3, 8001706 <bsp_led_fsm_run+0xba>
                    estado = ESTADO_LIGAR_LED;
 80016fe:	2203      	movs	r2, #3
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <bsp_led_fsm_run+0xf0>)
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	bd08      	pop	{r3, pc}
                }else{
                    marcoDeTempo = get_current_time();
 8001706:	f000 f8f7 	bl	80018f8 <get_current_time>
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <bsp_led_fsm_run+0xf8>)
 800170c:	6018      	str	r0, [r3, #0]
                    estado = ESTADO_AGUARDA_T_DEPOIS;
 800170e:	2207      	movs	r2, #7
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <bsp_led_fsm_run+0xf0>)
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	bd08      	pop	{r3, pc}
                }
            }
            break;

        case ESTADO_AGUARDA_T_DEPOIS:
            if(elapsed_time(marcoDeTempo) >= pAtrasoDepois){
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <bsp_led_fsm_run+0xf8>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f000 f8f3 	bl	8001904 <elapsed_time>
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <bsp_led_fsm_run+0x10c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4298      	cmp	r0, r3
 8001724:	d309      	bcc.n	800173a <bsp_led_fsm_run+0xee>
            	emFuncionamento = FALSE;
 8001726:	2200      	movs	r2, #0
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <bsp_led_fsm_run+0xf4>)
 800172a:	701a      	strb	r2, [r3, #0]
                estado = ESTADO_AGUARDA_REQUISICAO;
 800172c:	2201      	movs	r2, #1
 800172e:	4b03      	ldr	r3, [pc, #12]	; (800173c <bsp_led_fsm_run+0xf0>)
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	bd08      	pop	{r3, pc}
            }
            break;

        default:
            estado = ESTADO_CONFIGURANDO;
 8001734:	2200      	movs	r2, #0
 8001736:	4b01      	ldr	r3, [pc, #4]	; (800173c <bsp_led_fsm_run+0xf0>)
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	bd08      	pop	{r3, pc}
 800173c:	20000439 	.word	0x20000439
 8001740:	20000438 	.word	0x20000438
 8001744:	2000043c 	.word	0x2000043c
 8001748:	20000440 	.word	0x20000440
 800174c:	20000450 	.word	0x20000450
 8001750:	2000044c 	.word	0x2000044c
 8001754:	20000448 	.word	0x20000448
 8001758:	20000444 	.word	0x20000444

0800175c <USART1_IRQHandler>:

volatile uint8_t txData;
volatile uint8_t rxData;

void USART1_IRQHandler(void)
{
 800175c:	b508      	push	{r3, lr}
    uint32_t flags = USART1->SR;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <USART1_IRQHandler+0x30>)
 8001760:	6819      	ldr	r1, [r3, #0]
    USART1->SR &= ~(uint32_t)USART_SR_RXNE;
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f022 0220 	bic.w	r2, r2, #32
 8001768:	601a      	str	r2, [r3, #0]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800176a:	2220      	movs	r2, #32
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <USART1_IRQHandler+0x34>)
 800176e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC_ClearPendingIRQ(USART1_IRQn);

    if((flags & USART_SR_RXNE) == USART_SR_RXNE){
 8001772:	f011 0f20 	tst.w	r1, #32
 8001776:	d100      	bne.n	800177a <USART1_IRQHandler+0x1e>
 8001778:	bd08      	pop	{r3, pc}
        rxData = USART1->DR;
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <USART1_IRQHandler+0x30>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <USART1_IRQHandler+0x38>)
 8001782:	7013      	strb	r3, [r2, #0]
        envia_dados_decodificador_isr(rxData);
 8001784:	7810      	ldrb	r0, [r2, #0]
 8001786:	f7ff fe85 	bl	8001494 <envia_dados_decodificador_isr>
    }
}
 800178a:	e7f5      	b.n	8001778 <USART1_IRQHandler+0x1c>
 800178c:	40013800 	.word	0x40013800
 8001790:	e000e100 	.word	0xe000e100
 8001794:	20000a38 	.word	0x20000a38

08001798 <recebe_modelo_frame>:
uint8_t frameDecodificado = 0;

uint8_t recebe_modelo_frame(void)
{
    return modelo;
}
 8001798:	4b01      	ldr	r3, [pc, #4]	; (80017a0 <recebe_modelo_frame+0x8>)
 800179a:	7818      	ldrb	r0, [r3, #0]
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000045a 	.word	0x2000045a

080017a4 <recebe_id_frame>:

uint8_t recebe_id_frame(void)
{
    return id;
}
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <recebe_id_frame+0x8>)
 80017a6:	7818      	ldrb	r0, [r3, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000459 	.word	0x20000459

080017b0 <recebe_dados_frame>:

uint8_t recebe_dados_frame(uint8_t *pDados)
{
    uint8_t i;
    for(i=0;i<nDados;i++){
 80017b0:	2300      	movs	r3, #0
 80017b2:	e004      	b.n	80017be <recebe_dados_frame+0xe>
        pDados[i] = dados[i];
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <recebe_dados_frame+0x1c>)
 80017b6:	5cd2      	ldrb	r2, [r2, r3]
 80017b8:	54c2      	strb	r2, [r0, r3]
    for(i=0;i<nDados;i++){
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <recebe_dados_frame+0x20>)
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d3f6      	bcc.n	80017b4 <recebe_dados_frame+0x4>
    }
    return nDados;
}
 80017c6:	4610      	mov	r0, r2
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000a3c 	.word	0x20000a3c
 80017d0:	2000045b 	.word	0x2000045b

080017d4 <frame_decodificado>:

uint8_t frame_decodificado(void)
{
    return frameDecodificado;
}
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <frame_decodificado+0x8>)
 80017d6:	7818      	ldrb	r0, [r3, #0]
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000458 	.word	0x20000458

080017e0 <exec_decodificador_avirede>:

void exec_decodificador_avirede(uint8_t dado)
{
    
    switch(estado){
 80017e0:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b07      	cmp	r3, #7
 80017e6:	d868      	bhi.n	80018ba <exec_decodificador_avirede+0xda>
 80017e8:	e8df f003 	tbb	[pc, r3]
 80017ec:	1d171104 	.word	0x1d171104
 80017f0:	413b3526 	.word	0x413b3526
        case AGUARDA_INICIO_DE_FRAME:
            if(dado == 0xAA){
 80017f4:	28aa      	cmp	r0, #170	; 0xaa
 80017f6:	d003      	beq.n	8001800 <exec_decodificador_avirede+0x20>
                frameDecodificado = 0;
                estado = AGUARDA_MODELO;
            }else{
                frameDecodificado = 0;
 80017f8:	2200      	movs	r2, #0
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <exec_decodificador_avirede+0xe8>)
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	4770      	bx	lr
                frameDecodificado = 0;
 8001800:	2200      	movs	r2, #0
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <exec_decodificador_avirede+0xe8>)
 8001804:	701a      	strb	r2, [r3, #0]
                estado = AGUARDA_MODELO;
 8001806:	2201      	movs	r2, #1
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	4770      	bx	lr
            }
            break;
            
        case AGUARDA_MODELO:
            modelo = dado;
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <exec_decodificador_avirede+0xec>)
 8001810:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_ID;
 8001812:	2202      	movs	r2, #2
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 8001816:	701a      	strb	r2, [r3, #0]
            break;
 8001818:	4770      	bx	lr
            
        case AGUARDA_ID:
            id = dado;
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <exec_decodificador_avirede+0xf0>)
 800181c:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_NUMERO_DE_DADOS;
 800181e:	2203      	movs	r2, #3
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 8001822:	701a      	strb	r2, [r3, #0]
            break;
 8001824:	4770      	bx	lr
            
        case AGUARDA_NUMERO_DE_DADOS:
            nDados = dado;
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <exec_decodificador_avirede+0xf4>)
 8001828:	7018      	strb	r0, [r3, #0]
            dataCount = 0;
 800182a:	2200      	movs	r2, #0
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <exec_decodificador_avirede+0xf8>)
 800182e:	701a      	strb	r2, [r3, #0]
            estado = AGUARDA_DADOS;
 8001830:	2204      	movs	r2, #4
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 8001834:	701a      	strb	r2, [r3, #0]
            break;
 8001836:	4770      	bx	lr
            
        case AGUARDA_DADOS:
            dados[dataCount] = dado;
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <exec_decodificador_avirede+0xf8>)
 800183a:	7813      	ldrb	r3, [r2, #0]
 800183c:	4927      	ldr	r1, [pc, #156]	; (80018dc <exec_decodificador_avirede+0xfc>)
 800183e:	54c8      	strb	r0, [r1, r3]
            dataCount += 1;
 8001840:	3301      	adds	r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	7013      	strb	r3, [r2, #0]
            if(dataCount >= nDados){
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <exec_decodificador_avirede+0xf4>)
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	4293      	cmp	r3, r2
 800184c:	d338      	bcc.n	80018c0 <exec_decodificador_avirede+0xe0>
                estado = AGUARDA_CHECKSUM_1;
 800184e:	2205      	movs	r2, #5
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	4770      	bx	lr
            }
            break;
            
        case AGUARDA_CHECKSUM_1:
            cks1 = dado;
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <exec_decodificador_avirede+0x100>)
 8001858:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_CHECKSUM_2;
 800185a:	2206      	movs	r2, #6
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 800185e:	701a      	strb	r2, [r3, #0]
            break;
 8001860:	4770      	bx	lr
            
        case AGUARDA_CHECKSUM_2:
            cks2 = dado;
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <exec_decodificador_avirede+0x104>)
 8001864:	7018      	strb	r0, [r3, #0]
            estado = AGUARDA_FIM_DE_FRAME;
 8001866:	2207      	movs	r2, #7
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 800186a:	701a      	strb	r2, [r3, #0]
            break;
 800186c:	4770      	bx	lr
        
        case AGUARDA_FIM_DE_FRAME:
            if(dado == 0x55){
 800186e:	2855      	cmp	r0, #85	; 0x55
 8001870:	d003      	beq.n	800187a <exec_decodificador_avirede+0x9a>
                }else{
                    estado = AGUARDA_INICIO_DE_FRAME;
                }
                
            }else{
                estado = AGUARDA_INICIO_DE_FRAME;
 8001872:	2200      	movs	r2, #0
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	4770      	bx	lr
                checksumRecebido = cks1;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <exec_decodificador_avirede+0x100>)
 800187c:	781b      	ldrb	r3, [r3, #0]
                checksumRecebido |= cks2;
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <exec_decodificador_avirede+0x104>)
 8001880:	7810      	ldrb	r0, [r2, #0]
 8001882:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                for(i=0; i<nDados; i++){
 8001886:	2300      	movs	r3, #0
                uint16_t checksumCalculado = 0;
 8001888:	461a      	mov	r2, r3
                for(i=0; i<nDados; i++){
 800188a:	4912      	ldr	r1, [pc, #72]	; (80018d4 <exec_decodificador_avirede+0xf4>)
 800188c:	7809      	ldrb	r1, [r1, #0]
 800188e:	428b      	cmp	r3, r1
 8001890:	d206      	bcs.n	80018a0 <exec_decodificador_avirede+0xc0>
                    checksumCalculado += dados[i];
 8001892:	4912      	ldr	r1, [pc, #72]	; (80018dc <exec_decodificador_avirede+0xfc>)
 8001894:	5cc9      	ldrb	r1, [r1, r3]
 8001896:	440a      	add	r2, r1
 8001898:	b292      	uxth	r2, r2
                for(i=0; i<nDados; i++){
 800189a:	3301      	adds	r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e7f4      	b.n	800188a <exec_decodificador_avirede+0xaa>
                if(checksumCalculado == checksumRecebido){
 80018a0:	4282      	cmp	r2, r0
 80018a2:	d003      	beq.n	80018ac <exec_decodificador_avirede+0xcc>
                    estado = AGUARDA_INICIO_DE_FRAME;
 80018a4:	2200      	movs	r2, #0
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	4770      	bx	lr
                    frameDecodificado = 1;
 80018ac:	2201      	movs	r2, #1
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <exec_decodificador_avirede+0xe8>)
 80018b0:	701a      	strb	r2, [r3, #0]
                    estado = AGUARDA_INICIO_DE_FRAME;
 80018b2:	2200      	movs	r2, #0
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	4770      	bx	lr
            }
            break;
        
        default:
            estado = AGUARDA_INICIO_DE_FRAME;
 80018ba:	2200      	movs	r2, #0
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <exec_decodificador_avirede+0xe4>)
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000457 	.word	0x20000457
 80018c8:	20000458 	.word	0x20000458
 80018cc:	2000045a 	.word	0x2000045a
 80018d0:	20000459 	.word	0x20000459
 80018d4:	2000045b 	.word	0x2000045b
 80018d8:	20000456 	.word	0x20000456
 80018dc:	20000a3c 	.word	0x20000a3c
 80018e0:	20000454 	.word	0x20000454
 80018e4:	20000455 	.word	0x20000455

080018e8 <run_current_time>:

static volatile uint32_t currentTime = 0;

void run_current_time(void)
{
    currentTime++;
 80018e8:	4a02      	ldr	r2, [pc, #8]	; (80018f4 <run_current_time+0xc>)
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000045c 	.word	0x2000045c

080018f8 <get_current_time>:
}
uint32_t get_current_time(void)
{
    return currentTime;
 80018f8:	4b01      	ldr	r3, [pc, #4]	; (8001900 <get_current_time+0x8>)
 80018fa:	6818      	ldr	r0, [r3, #0]
}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000045c 	.word	0x2000045c

08001904 <elapsed_time>:
uint32_t elapsed_time(uint32_t timeMark)
{
    uint32_t result;
    uint32_t buffer = currentTime;
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <elapsed_time+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
    if(buffer >= timeMark){
 8001908:	4283      	cmp	r3, r0
 800190a:	d202      	bcs.n	8001912 <elapsed_time+0xe>
        result = buffer - timeMark;
    }else{
        result = buffer + ((uint32_t)0xFFFFFFFF - timeMark);
 800190c:	1a18      	subs	r0, r3, r0
 800190e:	3801      	subs	r0, #1
    }
    return result;
}
 8001910:	4770      	bx	lr
        result = buffer - timeMark;
 8001912:	1a18      	subs	r0, r3, r0
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000045c 	.word	0x2000045c

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_Init+0x20>)
 8001920:	6813      	ldr	r3, [r2, #0]
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f81b 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f000 fd50 	bl	80023d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f000 fd2c 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001938:	2000      	movs	r0, #0
 800193a:	bd08      	pop	{r3, pc}
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <HAL_IncTick+0x10>)
 8001942:	6811      	ldr	r1, [r2, #0]
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_IncTick+0x14>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	440b      	add	r3, r1
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000b3c 	.word	0x20000b3c
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <HAL_GetTick+0x8>)
 800195a:	6818      	ldr	r0, [r3, #0]
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000b3c 	.word	0x20000b3c

08001964 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001966:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001968:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001970:	0200      	lsls	r0, r0, #8
 8001972:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001976:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001978:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800197c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001980:	60d0      	str	r0, [r2, #12]
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001988:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_NVIC_SetPriority+0x5c>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001992:	f1c3 0407 	rsb	r4, r3, #7
 8001996:	2c04      	cmp	r4, #4
 8001998:	bf28      	it	cs
 800199a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199c:	1d1d      	adds	r5, r3, #4
 800199e:	2d06      	cmp	r5, #6
 80019a0:	d917      	bls.n	80019d2 <HAL_NVIC_SetPriority+0x4a>
 80019a2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	2501      	movs	r5, #1
 80019a6:	fa05 f404 	lsl.w	r4, r5, r4
 80019aa:	3c01      	subs	r4, #1
 80019ac:	4021      	ands	r1, r4
 80019ae:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	fa05 f303 	lsl.w	r3, r5, r3
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80019ba:	2800      	cmp	r0, #0
 80019bc:	db0b      	blt.n	80019d6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	0109      	lsls	r1, r1, #4
 80019c0:	b2c9      	uxtb	r1, r1
 80019c2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019c6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019ca:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019ce:	bc30      	pop	{r4, r5}
 80019d0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	2300      	movs	r3, #0
 80019d4:	e7e6      	b.n	80019a4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	f000 000f 	and.w	r0, r0, #15
 80019da:	0109      	lsls	r1, r1, #4
 80019dc:	b2c9      	uxtb	r1, r1
 80019de:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_NVIC_SetPriority+0x60>)
 80019e0:	5419      	strb	r1, [r3, r0]
 80019e2:	e7f4      	b.n	80019ce <HAL_NVIC_SetPriority+0x46>
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	e000ed14 	.word	0xe000ed14

080019ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019ec:	0942      	lsrs	r2, r0, #5
 80019ee:	f000 001f 	and.w	r0, r0, #31
 80019f2:	2301      	movs	r3, #1
 80019f4:	fa03 f000 	lsl.w	r0, r3, r0
 80019f8:	4b01      	ldr	r3, [pc, #4]	; (8001a00 <HAL_NVIC_EnableIRQ+0x14>)
 80019fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a04:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <RCC_Delay+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <RCC_Delay+0x28>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0a5b      	lsrs	r3, r3, #9
 8001a12:	fb00 f003 	mul.w	r0, r0, r3
 8001a16:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001a18:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	9201      	str	r2, [sp, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f9      	bne.n	8001a18 <RCC_Delay+0x14>
}
 8001a24:	b002      	add	sp, #8
 8001a26:	4770      	bx	lr
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	10624dd3 	.word	0x10624dd3

08001a30 <HAL_RCC_OscConfig>:
{
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	6803      	ldr	r3, [r0, #0]
 8001a38:	f013 0f01 	tst.w	r3, #1
 8001a3c:	d03d      	beq.n	8001aba <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a3e:	4bac      	ldr	r3, [pc, #688]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d02e      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4a:	4ba9      	ldr	r3, [pc, #676]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d023      	beq.n	8001a9e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a56:	6863      	ldr	r3, [r4, #4]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d051      	beq.n	8001b02 <HAL_RCC_OscConfig+0xd2>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d155      	bne.n	8001b0e <HAL_RCC_OscConfig+0xde>
 8001a62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a66:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a78:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d060      	beq.n	8001b42 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001a80:	f7ff ff6a 	bl	8001958 <HAL_GetTick>
 8001a84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b9a      	ldr	r3, [pc, #616]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a8e:	d114      	bne.n	8001aba <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff ff62 	bl	8001958 <HAL_GetTick>
 8001a94:	1b40      	subs	r0, r0, r5
 8001a96:	2864      	cmp	r0, #100	; 0x64
 8001a98:	d9f5      	bls.n	8001a86 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	e1af      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9e:	4b94      	ldr	r3, [pc, #592]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001aa6:	d0d6      	beq.n	8001a56 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	4b91      	ldr	r3, [pc, #580]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_OscConfig+0x8a>
 8001ab2:	6863      	ldr	r3, [r4, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 819f 	beq.w	8001df8 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	f013 0f02 	tst.w	r3, #2
 8001ac0:	d065      	beq.n	8001b8e <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f013 0f0c 	tst.w	r3, #12
 8001aca:	d04e      	beq.n	8001b6a <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001acc:	4b88      	ldr	r3, [pc, #544]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d043      	beq.n	8001b60 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad8:	6923      	ldr	r3, [r4, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d079      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4b84      	ldr	r3, [pc, #528]	; (8001cf4 <HAL_RCC_OscConfig+0x2c4>)
 8001ae2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae4:	f7ff ff38 	bl	8001958 <HAL_GetTick>
 8001ae8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f013 0f02 	tst.w	r3, #2
 8001af2:	d165      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff ff30 	bl	8001958 <HAL_GetTick>
 8001af8:	1b40      	subs	r0, r0, r5
 8001afa:	2802      	cmp	r0, #2
 8001afc:	d9f5      	bls.n	8001aea <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8001afe:	2003      	movs	r0, #3
 8001b00:	e17d      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	4a7b      	ldr	r2, [pc, #492]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001b04:	6813      	ldr	r3, [r2, #0]
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e7b5      	b.n	8001a7a <HAL_RCC_OscConfig+0x4a>
 8001b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b12:	d009      	beq.n	8001b28 <HAL_RCC_OscConfig+0xf8>
 8001b14:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e7a8      	b.n	8001a7a <HAL_RCC_OscConfig+0x4a>
 8001b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b2c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e79b      	b.n	8001a7a <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8001b42:	f7ff ff09 	bl	8001958 <HAL_GetTick>
 8001b46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b48:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b50:	d0b3      	beq.n	8001aba <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b52:	f7ff ff01 	bl	8001958 <HAL_GetTick>
 8001b56:	1b40      	subs	r0, r0, r5
 8001b58:	2864      	cmp	r0, #100	; 0x64
 8001b5a:	d9f5      	bls.n	8001b48 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	e14e      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b60:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b68:	d1b6      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f013 0f02 	tst.w	r3, #2
 8001b72:	d004      	beq.n	8001b7e <HAL_RCC_OscConfig+0x14e>
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	e13f      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4a5c      	ldr	r2, [pc, #368]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b86:	6961      	ldr	r1, [r4, #20]
 8001b88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b8c:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	f013 0f08 	tst.w	r3, #8
 8001b94:	d032      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	69a3      	ldr	r3, [r4, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d06e      	beq.n	8001c7a <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_RCC_OscConfig+0x2c8>)
 8001ba0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fed9 	bl	8001958 <HAL_GetTick>
 8001ba6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba8:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f013 0f02 	tst.w	r3, #2
 8001bb0:	d121      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fed1 	bl	8001958 <HAL_GetTick>
 8001bb6:	1b40      	subs	r0, r0, r5
 8001bb8:	2802      	cmp	r0, #2
 8001bba:	d9f5      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	e11e      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bc8:	6961      	ldr	r1, [r4, #20]
 8001bca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e7dd      	b.n	8001b8e <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_OscConfig+0x2c4>)
 8001bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bd8:	f7ff febe 	bl	8001958 <HAL_GetTick>
 8001bdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f013 0f02 	tst.w	r3, #2
 8001be6:	d0d2      	beq.n	8001b8e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff feb6 	bl	8001958 <HAL_GetTick>
 8001bec:	1b40      	subs	r0, r0, r5
 8001bee:	2802      	cmp	r0, #2
 8001bf0:	d9f5      	bls.n	8001bde <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	e103      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff ff04 	bl	8001a04 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	f013 0f04 	tst.w	r3, #4
 8001c02:	f000 8099 	beq.w	8001d38 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c0e:	d146      	bne.n	8001c9e <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001c12:	69da      	ldr	r2, [r3, #28]
 8001c14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c18:	61da      	str	r2, [r3, #28]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c24:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_OscConfig+0x2cc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c2e:	d038      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	68e3      	ldr	r3, [r4, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d049      	beq.n	8001cca <HAL_RCC_OscConfig+0x29a>
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d14d      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2a6>
 8001c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c3e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c42:	6a1a      	ldr	r2, [r3, #32]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	621a      	str	r2, [r3, #32]
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	f022 0204 	bic.w	r2, r2, #4
 8001c50:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c52:	68e3      	ldr	r3, [r4, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05d      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001c58:	f7ff fe7e 	bl	8001958 <HAL_GetTick>
 8001c5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	f013 0f02 	tst.w	r3, #2
 8001c66:	d166      	bne.n	8001d36 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff fe76 	bl	8001958 <HAL_GetTick>
 8001c6c:	1b80      	subs	r0, r0, r6
 8001c6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c72:	4298      	cmp	r0, r3
 8001c74:	d9f3      	bls.n	8001c5e <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8001c76:	2003      	movs	r0, #3
 8001c78:	e0c1      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_OscConfig+0x2c8>)
 8001c7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c80:	f7ff fe6a 	bl	8001958 <HAL_GetTick>
 8001c84:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f013 0f02 	tst.w	r3, #2
 8001c8e:	d0b5      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff fe62 	bl	8001958 <HAL_GetTick>
 8001c94:	1b40      	subs	r0, r0, r5
 8001c96:	2802      	cmp	r0, #2
 8001c98:	d9f5      	bls.n	8001c86 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	e0af      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2500      	movs	r5, #0
 8001ca0:	e7c1      	b.n	8001c26 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_RCC_OscConfig+0x2cc>)
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cac:	f7ff fe54 	bl	8001958 <HAL_GetTick>
 8001cb0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_OscConfig+0x2cc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cba:	d1b9      	bne.n	8001c30 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbc:	f7ff fe4c 	bl	8001958 <HAL_GetTick>
 8001cc0:	1b80      	subs	r0, r0, r6
 8001cc2:	2864      	cmp	r0, #100	; 0x64
 8001cc4:	d9f5      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	e099      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001ccc:	6a13      	ldr	r3, [r2, #32]
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e7bd      	b.n	8001c52 <HAL_RCC_OscConfig+0x222>
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d012      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2d0>
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_OscConfig+0x2c0>)
 8001cdc:	6a1a      	ldr	r2, [r3, #32]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	621a      	str	r2, [r3, #32]
 8001ce4:	6a1a      	ldr	r2, [r3, #32]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	621a      	str	r2, [r3, #32]
 8001cec:	e7b1      	b.n	8001c52 <HAL_RCC_OscConfig+0x222>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	42420000 	.word	0x42420000
 8001cf8:	42420480 	.word	0x42420480
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	f042 0204 	orr.w	r2, r2, #4
 8001d08:	621a      	str	r2, [r3, #32]
 8001d0a:	6a1a      	ldr	r2, [r3, #32]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	621a      	str	r2, [r3, #32]
 8001d12:	e79e      	b.n	8001c52 <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8001d14:	f7ff fe20 	bl	8001958 <HAL_GetTick>
 8001d18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	f013 0f02 	tst.w	r3, #2
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff fe18 	bl	8001958 <HAL_GetTick>
 8001d28:	1b80      	subs	r0, r0, r6
 8001d2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d2e:	4298      	cmp	r0, r3
 8001d30:	d9f3      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001d32:	2003      	movs	r0, #3
 8001d34:	e063      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8001d36:	b9e5      	cbnz	r5, 8001d72 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d38:	69e3      	ldr	r3, [r4, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d05e      	beq.n	8001dfc <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3e:	4a32      	ldr	r2, [pc, #200]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001d40:	6852      	ldr	r2, [r2, #4]
 8001d42:	f002 020c 	and.w	r2, r2, #12
 8001d46:	2a08      	cmp	r2, #8
 8001d48:	d05b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d017      	beq.n	8001d7e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_RCC_OscConfig+0x3dc>)
 8001d52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d54:	f7ff fe00 	bl	8001958 <HAL_GetTick>
 8001d58:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d62:	d047      	beq.n	8001df4 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff fdf8 	bl	8001958 <HAL_GetTick>
 8001d68:	1b00      	subs	r0, r0, r4
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d9f5      	bls.n	8001d5a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001d6e:	2003      	movs	r0, #3
 8001d70:	e045      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001d74:	69d3      	ldr	r3, [r2, #28]
 8001d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	61d3      	str	r3, [r2, #28]
 8001d7c:	e7dc      	b.n	8001d38 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_OscConfig+0x3dc>)
 8001d82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d84:	f7ff fde8 	bl	8001958 <HAL_GetTick>
 8001d88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d92:	d006      	beq.n	8001da2 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff fde0 	bl	8001958 <HAL_GetTick>
 8001d98:	1b40      	subs	r0, r0, r5
 8001d9a:	2802      	cmp	r0, #2
 8001d9c:	d9f5      	bls.n	8001d8a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001d9e:	2003      	movs	r0, #3
 8001da0:	e02d      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da2:	6a23      	ldr	r3, [r4, #32]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d01a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001daa:	4917      	ldr	r1, [pc, #92]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001dac:	684b      	ldr	r3, [r1, #4]
 8001dae:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001db2:	6a22      	ldr	r2, [r4, #32]
 8001db4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001db6:	4302      	orrs	r2, r0
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_OscConfig+0x3dc>)
 8001dc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fdc9 	bl	8001958 <HAL_GetTick>
 8001dc6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dd0:	d10e      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fdc1 	bl	8001958 <HAL_GetTick>
 8001dd6:	1b00      	subs	r0, r0, r4
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9f5      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001ddc:	2003      	movs	r0, #3
 8001dde:	e00e      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de0:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <HAL_RCC_OscConfig+0x3d8>)
 8001de2:	6853      	ldr	r3, [r2, #4]
 8001de4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001de8:	68a1      	ldr	r1, [r4, #8]
 8001dea:	430b      	orrs	r3, r1
 8001dec:	6053      	str	r3, [r2, #4]
 8001dee:	e7dc      	b.n	8001daa <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001df0:	2000      	movs	r0, #0
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
 8001df4:	2000      	movs	r0, #0
 8001df6:	e002      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8001df8:	2001      	movs	r0, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8001dfc:	2000      	movs	r0, #0
}
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e7fb      	b.n	8001dfe <HAL_RCC_OscConfig+0x3ce>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420060 	.word	0x42420060

08001e10 <HAL_RCC_GetSysClockFreq>:
{
 8001e10:	b510      	push	{r4, lr}
 8001e12:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e14:	4c15      	ldr	r4, [pc, #84]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001e16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e1a:	f10d 0e18 	add.w	lr, sp, #24
 8001e1e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e22:	8a23      	ldrh	r3, [r4, #16]
 8001e24:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x60>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e2c:	f003 020c 	and.w	r2, r3, #12
 8001e30:	2a08      	cmp	r2, #8
 8001e32:	d118      	bne.n	8001e66 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e34:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001e38:	4472      	add	r2, lr
 8001e3a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e42:	d103      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e46:	fb00 f002 	mul.w	r0, r0, r2
 8001e4a:	e00d      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x60>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001e54:	4473      	add	r3, lr
 8001e56:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x68>)
 8001e5c:	fb00 f002 	mul.w	r0, r0, r2
 8001e60:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001e68:	b006      	add	sp, #24
 8001e6a:	bd10      	pop	{r4, pc}
 8001e6c:	08002590 	.word	0x08002590
 8001e70:	40021000 	.word	0x40021000
 8001e74:	003d0900 	.word	0x003d0900
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e7c:	4b62      	ldr	r3, [pc, #392]	; (8002008 <HAL_RCC_ClockConfig+0x18c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d20c      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e88:	4a5f      	ldr	r2, [pc, #380]	; (8002008 <HAL_RCC_ClockConfig+0x18c>)
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	f023 0307 	bic.w	r3, r3, #7
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e94:	6813      	ldr	r3, [r2, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	4299      	cmp	r1, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	4770      	bx	lr
{
 8001ea2:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	f013 0f02 	tst.w	r3, #2
 8001eaa:	d017      	beq.n	8001edc <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	f013 0f04 	tst.w	r3, #4
 8001eb0:	d004      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb2:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001eb4:	6853      	ldr	r3, [r2, #4]
 8001eb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eba:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	6803      	ldr	r3, [r0, #0]
 8001ebe:	f013 0f08 	tst.w	r3, #8
 8001ec2:	d004      	beq.n	8001ece <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001ec6:	6853      	ldr	r3, [r2, #4]
 8001ec8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ecc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ece:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001ed0:	6853      	ldr	r3, [r2, #4]
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed6:	6884      	ldr	r4, [r0, #8]
 8001ed8:	4323      	orrs	r3, r4
 8001eda:	6053      	str	r3, [r2, #4]
 8001edc:	460d      	mov	r5, r1
 8001ede:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	f013 0f01 	tst.w	r3, #1
 8001ee6:	d052      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee8:	6843      	ldr	r3, [r0, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d023      	beq.n	8001f36 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d028      	beq.n	8001f44 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4a46      	ldr	r2, [pc, #280]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	f012 0f02 	tst.w	r2, #2
 8001efa:	f000 8082 	beq.w	8002002 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	4943      	ldr	r1, [pc, #268]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001f00:	684a      	ldr	r2, [r1, #4]
 8001f02:	f022 0203 	bic.w	r2, r2, #3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001f0a:	f7ff fd25 	bl	8001958 <HAL_GetTick>
 8001f0e:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	6863      	ldr	r3, [r4, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d01d      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d02a      	beq.n	8001f70 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1a:	4b3c      	ldr	r3, [pc, #240]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f013 0f0c 	tst.w	r3, #12
 8001f22:	d034      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7ff fd18 	bl	8001958 <HAL_GetTick>
 8001f28:	1b80      	subs	r0, r0, r6
 8001f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f2e:	4298      	cmp	r0, r3
 8001f30:	d9f3      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8001f32:	2003      	movs	r0, #3
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4a35      	ldr	r2, [pc, #212]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001f3e:	d1de      	bne.n	8001efe <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f4c:	d1d7      	bne.n	8001efe <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001f4e:	2001      	movs	r0, #1
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d017      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7ff fcfb 	bl	8001958 <HAL_GetTick>
 8001f62:	1b80      	subs	r0, r0, r6
 8001f64:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	d9f2      	bls.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff fcec 	bl	8001958 <HAL_GetTick>
 8001f80:	1b80      	subs	r0, r0, r6
 8001f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f86:	4298      	cmp	r0, r3
 8001f88:	d9f2      	bls.n	8001f70 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_RCC_ClockConfig+0x18c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	429d      	cmp	r5, r3
 8001f98:	d20c      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_RCC_ClockConfig+0x18c>)
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	432b      	orrs	r3, r5
 8001fa4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa6:	6813      	ldr	r3, [r2, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	429d      	cmp	r5, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
}
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	f013 0f04 	tst.w	r3, #4
 8001fba:	d006      	beq.n	8001fca <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001fbe:	6853      	ldr	r3, [r2, #4]
 8001fc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fc4:	68e1      	ldr	r1, [r4, #12]
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	f013 0f08 	tst.w	r3, #8
 8001fd0:	d007      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001fd4:	6853      	ldr	r3, [r2, #4]
 8001fd6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fda:	6921      	ldr	r1, [r4, #16]
 8001fdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fe0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fe2:	f7ff ff15 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_ClockConfig+0x190>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_RCC_ClockConfig+0x194>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	40d8      	lsrs	r0, r3
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCC_ClockConfig+0x198>)
 8001ff6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f000 f9eb 	bl	80023d4 <HAL_InitTick>
  return HAL_OK;
 8001ffe:	2000      	movs	r0, #0
 8002000:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002002:	2001      	movs	r0, #1
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	bf00      	nop
 8002008:	40022000 	.word	0x40022000
 800200c:	40021000 	.word	0x40021000
 8002010:	080025c8 	.word	0x080025c8
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_RCC_GetHCLKFreq>:
}
 8002018:	4b01      	ldr	r3, [pc, #4]	; (8002020 <HAL_RCC_GetHCLKFreq+0x8>)
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_RCC_GetPCLK1Freq>:
{
 8002024:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002026:	f7ff fff7 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_RCC_GetPCLK1Freq+0x18>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002034:	5cd3      	ldrb	r3, [r2, r3]
}    
 8002036:	40d8      	lsrs	r0, r3
 8002038:	bd08      	pop	{r3, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	080025d8 	.word	0x080025d8

08002044 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002044:	230f      	movs	r3, #15
 8002046:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_GetClockConfig+0x34>)
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002058:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002060:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800206a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_GetClockConfig+0x38>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	600b      	str	r3, [r1, #0]
 8002076:	4770      	bx	lr
 8002078:	40021000 	.word	0x40021000
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002080:	4770      	bx	lr

08002082 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	68d3      	ldr	r3, [r2, #12]
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800208c:	6802      	ldr	r2, [r0, #0]
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8002096:	2000      	movs	r0, #0
 8002098:	4770      	bx	lr

0800209a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209c:	4770      	bx	lr

0800209e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	4770      	bx	lr

080020a2 <HAL_TIM_IRQHandler>:
{
 80020a2:	b510      	push	{r4, lr}
 80020a4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a6:	6803      	ldr	r3, [r0, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	f012 0f02 	tst.w	r2, #2
 80020ae:	d011      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	f012 0f02 	tst.w	r2, #2
 80020b6:	d00d      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b8:	f06f 0202 	mvn.w	r2, #2
 80020bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020be:	2301      	movs	r3, #1
 80020c0:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c2:	6803      	ldr	r3, [r0, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f013 0f03 	tst.w	r3, #3
 80020ca:	d070      	beq.n	80021ae <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80020cc:	f7ff ffe6 	bl	800209c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d0:	2300      	movs	r3, #0
 80020d2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	f012 0f04 	tst.w	r2, #4
 80020dc:	d012      	beq.n	8002104 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	f012 0f04 	tst.w	r2, #4
 80020e4:	d00e      	beq.n	8002104 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e6:	f06f 0204 	mvn.w	r2, #4
 80020ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ec:	2302      	movs	r3, #2
 80020ee:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020f8:	d05f      	beq.n	80021ba <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7ff ffce 	bl	800209c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002100:	2300      	movs	r3, #0
 8002102:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	f012 0f08 	tst.w	r2, #8
 800210c:	d012      	beq.n	8002134 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	f012 0f08 	tst.w	r2, #8
 8002114:	d00e      	beq.n	8002134 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002116:	f06f 0208 	mvn.w	r2, #8
 800211a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211c:	2304      	movs	r3, #4
 800211e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f013 0f03 	tst.w	r3, #3
 8002128:	d04e      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff ffb6 	bl	800209c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002130:	2300      	movs	r3, #0
 8002132:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	f012 0f10 	tst.w	r2, #16
 800213c:	d012      	beq.n	8002164 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	f012 0f10 	tst.w	r2, #16
 8002144:	d00e      	beq.n	8002164 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002146:	f06f 0210 	mvn.w	r2, #16
 800214a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214c:	2308      	movs	r3, #8
 800214e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002158:	d03d      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff ff9e 	bl	800209c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002160:	2300      	movs	r3, #0
 8002162:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	f012 0f01 	tst.w	r2, #1
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	f012 0f01 	tst.w	r2, #1
 8002174:	d136      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800217e:	d003      	beq.n	8002188 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002186:	d134      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002198:	d132      	bne.n	8002200 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	f012 0f20 	tst.w	r2, #32
 80021a2:	d003      	beq.n	80021ac <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	f012 0f20 	tst.w	r2, #32
 80021aa:	d130      	bne.n	800220e <HAL_TIM_IRQHandler+0x16c>
 80021ac:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	f7ff ff74 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff ff73 	bl	800209e <HAL_TIM_PWM_PulseFinishedCallback>
 80021b8:	e78a      	b.n	80020d0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7ff ff6d 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff ff6c 	bl	800209e <HAL_TIM_PWM_PulseFinishedCallback>
 80021c6:	e79b      	b.n	8002100 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff ff66 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff ff65 	bl	800209e <HAL_TIM_PWM_PulseFinishedCallback>
 80021d4:	e7ac      	b.n	8002130 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff ff5f 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ff5e 	bl	800209e <HAL_TIM_PWM_PulseFinishedCallback>
 80021e2:	e7bd      	b.n	8002160 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021e4:	f06f 0201 	mvn.w	r2, #1
 80021e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ea:	4620      	mov	r0, r4
 80021ec:	f000 f8c4 	bl	8002378 <HAL_TIM_PeriodElapsedCallback>
 80021f0:	e7c1      	b.n	8002176 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021f8:	4620      	mov	r0, r4
 80021fa:	f000 f865 	bl	80022c8 <HAL_TIMEx_BreakCallback>
 80021fe:	e7c3      	b.n	8002188 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002204:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff ff4a 	bl	80020a0 <HAL_TIM_TriggerCallback>
 800220c:	e7c5      	b.n	800219a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800220e:	f06f 0220 	mvn.w	r2, #32
 8002212:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002214:	4620      	mov	r0, r4
 8002216:	f000 f856 	bl	80022c6 <HAL_TIMEx_CommutationCallback>
}
 800221a:	e7c7      	b.n	80021ac <HAL_TIM_IRQHandler+0x10a>

0800221c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800221c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <TIM_Base_SetConfig+0x74>)
 8002220:	4290      	cmp	r0, r2
 8002222:	d027      	beq.n	8002274 <TIM_Base_SetConfig+0x58>
 8002224:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002228:	d024      	beq.n	8002274 <TIM_Base_SetConfig+0x58>
 800222a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800222e:	4290      	cmp	r0, r2
 8002230:	d020      	beq.n	8002274 <TIM_Base_SetConfig+0x58>
 8002232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002236:	4290      	cmp	r0, r2
 8002238:	d01c      	beq.n	8002274 <TIM_Base_SetConfig+0x58>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <TIM_Base_SetConfig+0x74>)
 800223c:	4290      	cmp	r0, r2
 800223e:	d01e      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 8002240:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002244:	d01b      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 8002246:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800224a:	4290      	cmp	r0, r2
 800224c:	d017      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 800224e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002252:	4290      	cmp	r0, r2
 8002254:	d013      	beq.n	800227e <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800225a:	694a      	ldr	r2, [r1, #20]
 800225c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800225e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002260:	688b      	ldr	r3, [r1, #8]
 8002262:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002264:	680b      	ldr	r3, [r1, #0]
 8002266:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <TIM_Base_SetConfig+0x74>)
 800226a:	4298      	cmp	r0, r3
 800226c:	d00c      	beq.n	8002288 <TIM_Base_SetConfig+0x6c>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800226e:	2301      	movs	r3, #1
 8002270:	6143      	str	r3, [r0, #20]
 8002272:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002278:	684a      	ldr	r2, [r1, #4]
 800227a:	4313      	orrs	r3, r2
 800227c:	e7dd      	b.n	800223a <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~TIM_CR1_CKD;
 800227e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002282:	68ca      	ldr	r2, [r1, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	e7e6      	b.n	8002256 <TIM_Base_SetConfig+0x3a>
    TIMx->RCR = Structure->RepetitionCounter;
 8002288:	690b      	ldr	r3, [r1, #16]
 800228a:	6303      	str	r3, [r0, #48]	; 0x30
 800228c:	e7ef      	b.n	800226e <TIM_Base_SetConfig+0x52>
 800228e:	bf00      	nop
 8002290:	40012c00 	.word	0x40012c00

08002294 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002294:	b1a8      	cbz	r0, 80022c2 <HAL_TIM_Base_Init+0x2e>
{
 8002296:	b510      	push	{r4, lr}
 8002298:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800229a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800229e:	b15b      	cbz	r3, 80022b8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80022a0:	2302      	movs	r3, #2
 80022a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a6:	1d21      	adds	r1, r4, #4
 80022a8:	6820      	ldr	r0, [r4, #0]
 80022aa:	f7ff ffb7 	bl	800221c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022b4:	2000      	movs	r0, #0
 80022b6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80022b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022bc:	f7ff fee0 	bl	8002080 <HAL_TIM_Base_MspInit>
 80022c0:	e7ee      	b.n	80022a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	4770      	bx	lr
	...

080022cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022cc:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <MX_GPIO_Init+0x40>)
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	f042 0210 	orr.w	r2, r2, #16
 80022d6:	619a      	str	r2, [r3, #24]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	f002 0210 	and.w	r2, r2, #16
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	619a      	str	r2, [r3, #24]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	f002 0220 	and.w	r2, r2, #32
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	f042 0204 	orr.w	r2, r2, #4
 80022fa:	619a      	str	r2, [r3, #24]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	9303      	str	r3, [sp, #12]
 8002304:	9b03      	ldr	r3, [sp, #12]

}
 8002306:	b004      	add	sp, #16
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <SystemClock_Config>:
{
 8002310:	b530      	push	{r4, r5, lr}
 8002312:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002314:	2228      	movs	r2, #40	; 0x28
 8002316:	2100      	movs	r1, #0
 8002318:	a806      	add	r0, sp, #24
 800231a:	f000 f924 	bl	8002566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800231e:	2400      	movs	r4, #0
 8002320:	9401      	str	r4, [sp, #4]
 8002322:	9402      	str	r4, [sp, #8]
 8002324:	9403      	str	r4, [sp, #12]
 8002326:	9404      	str	r4, [sp, #16]
 8002328:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800232a:	2201      	movs	r2, #1
 800232c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002334:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002336:	2502      	movs	r5, #2
 8002338:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800233a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800233c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002340:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002342:	a806      	add	r0, sp, #24
 8002344:	f7ff fb74 	bl	8001a30 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
 800234a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234c:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002354:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002356:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002358:	4629      	mov	r1, r5
 800235a:	a801      	add	r0, sp, #4
 800235c:	f7ff fd8e 	bl	8001e7c <HAL_RCC_ClockConfig>
}
 8002360:	b011      	add	sp, #68	; 0x44
 8002362:	bd30      	pop	{r4, r5, pc}

08002364 <main>:
{
 8002364:	b508      	push	{r3, lr}
  HAL_Init();
 8002366:	f7ff fad9 	bl	800191c <HAL_Init>
  SystemClock_Config();
 800236a:	f7ff ffd1 	bl	8002310 <SystemClock_Config>
  MX_GPIO_Init();
 800236e:	f7ff ffad 	bl	80022cc <MX_GPIO_Init>
  app_run();
 8002372:	f7ff f833 	bl	80013dc <app_run>
 8002376:	e7fe      	b.n	8002376 <main+0x12>

08002378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800237a:	6802      	ldr	r2, [r0, #0]
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800237e:	429a      	cmp	r2, r3
 8002380:	d000      	beq.n	8002384 <HAL_TIM_PeriodElapsedCallback+0xc>
 8002382:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002384:	f7ff fadc 	bl	8001940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002388:	e7fb      	b.n	8002382 <HAL_TIM_PeriodElapsedCallback+0xa>
 800238a:	bf00      	nop
 800238c:	40000800 	.word	0x40000800

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_MspInit+0x3c>)
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	f002 0201 	and.w	r2, r2, #1
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023ac:	61da      	str	r2, [r3, #28]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023b8:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <HAL_MspInit+0x40>)
 80023ba:	6853      	ldr	r3, [r2, #4]
 80023bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	b002      	add	sp, #8
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000

080023d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d4:	b500      	push	{lr}
 80023d6:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80023d8:	2200      	movs	r2, #0
 80023da:	4601      	mov	r1, r0
 80023dc:	201e      	movs	r0, #30
 80023de:	f7ff fad3 	bl	8001988 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80023e2:	201e      	movs	r0, #30
 80023e4:	f7ff fb02 	bl	80019ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_InitTick+0x6c>)
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	f042 0204 	orr.w	r2, r2, #4
 80023f0:	61da      	str	r2, [r3, #28]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023fc:	a902      	add	r1, sp, #8
 80023fe:	a803      	add	r0, sp, #12
 8002400:	f7ff fe20 	bl	8002044 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002404:	f7ff fe0e 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002408:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <HAL_InitTick+0x70>)
 800240c:	fba0 2303 	umull	r2, r3, r0, r3
 8002410:	0c9b      	lsrs	r3, r3, #18
 8002412:	3b01      	subs	r3, #1
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <HAL_InitTick+0x74>)
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_InitTick+0x78>)
 8002418:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800241a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800241e:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002420:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002428:	f7ff ff34 	bl	8002294 <HAL_TIM_Base_Init>
 800242c:	b118      	cbz	r0, 8002436 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
}
 8002430:	b009      	add	sp, #36	; 0x24
 8002432:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 8002436:	4804      	ldr	r0, [pc, #16]	; (8002448 <HAL_InitTick+0x74>)
 8002438:	f7ff fe23 	bl	8002082 <HAL_TIM_Base_Start_IT>
 800243c:	e7f8      	b.n	8002430 <HAL_InitTick+0x5c>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	431bde83 	.word	0x431bde83
 8002448:	20000b40 	.word	0x20000b40
 800244c:	40000800 	.word	0x40000800

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	4770      	bx	lr

08002452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	e7fe      	b.n	8002456 <BusFault_Handler>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler>

0800245a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245a:	4770      	bx	lr

0800245c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800245c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
    run_current_time();
 800245e:	f7ff fa43 	bl	80018e8 <run_current_time>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002462:	4802      	ldr	r0, [pc, #8]	; (800246c <TIM4_IRQHandler+0x10>)
 8002464:	f7ff fe1d 	bl	80020a2 <HAL_TIM_IRQHandler>
 8002468:	bd08      	pop	{r3, pc}
 800246a:	bf00      	nop
 800246c:	20000b40 	.word	0x20000b40

08002470 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <SystemInit+0x40>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <SystemInit+0x44>)
 800247e:	400a      	ands	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002488:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800248c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002494:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800249c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800249e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80024a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <SystemInit+0x48>)
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	f8ff0000 	.word	0xf8ff0000
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024be:	e003      	b.n	80024c8 <LoopCopyDataInit>

080024c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024c6:	3104      	adds	r1, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024c8:	480a      	ldr	r0, [pc, #40]	; (80024f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024d0:	d3f6      	bcc.n	80024c0 <CopyDataInit>
  ldr r2, =_sbss
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024d4:	e002      	b.n	80024dc <LoopFillZerobss>

080024d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024d8:	f842 3b04 	str.w	r3, [r2], #4

080024dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024e0:	d3f9      	bcc.n	80024d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e2:	f7ff ffc5 	bl	8002470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f000 f80f 	bl	8002508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7ff ff3b 	bl	8002364 <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r3, =_sidata
 80024f0:	080025e8 	.word	0x080025e8
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80024fc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002500:	20000b80 	.word	0x20000b80

08002504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>
	...

08002508 <__libc_init_array>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2500      	movs	r5, #0
 800250c:	4e0c      	ldr	r6, [pc, #48]	; (8002540 <__libc_init_array+0x38>)
 800250e:	4c0d      	ldr	r4, [pc, #52]	; (8002544 <__libc_init_array+0x3c>)
 8002510:	1ba4      	subs	r4, r4, r6
 8002512:	10a4      	asrs	r4, r4, #2
 8002514:	42a5      	cmp	r5, r4
 8002516:	d109      	bne.n	800252c <__libc_init_array+0x24>
 8002518:	f000 f82e 	bl	8002578 <_init>
 800251c:	2500      	movs	r5, #0
 800251e:	4e0a      	ldr	r6, [pc, #40]	; (8002548 <__libc_init_array+0x40>)
 8002520:	4c0a      	ldr	r4, [pc, #40]	; (800254c <__libc_init_array+0x44>)
 8002522:	1ba4      	subs	r4, r4, r6
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	42a5      	cmp	r5, r4
 8002528:	d105      	bne.n	8002536 <__libc_init_array+0x2e>
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002530:	4798      	blx	r3
 8002532:	3501      	adds	r5, #1
 8002534:	e7ee      	b.n	8002514 <__libc_init_array+0xc>
 8002536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800253a:	4798      	blx	r3
 800253c:	3501      	adds	r5, #1
 800253e:	e7f2      	b.n	8002526 <__libc_init_array+0x1e>
 8002540:	080025e0 	.word	0x080025e0
 8002544:	080025e0 	.word	0x080025e0
 8002548:	080025e0 	.word	0x080025e0
 800254c:	080025e4 	.word	0x080025e4

08002550 <memcpy>:
 8002550:	b510      	push	{r4, lr}
 8002552:	1e43      	subs	r3, r0, #1
 8002554:	440a      	add	r2, r1
 8002556:	4291      	cmp	r1, r2
 8002558:	d100      	bne.n	800255c <memcpy+0xc>
 800255a:	bd10      	pop	{r4, pc}
 800255c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002564:	e7f7      	b.n	8002556 <memcpy+0x6>

08002566 <memset>:
 8002566:	4603      	mov	r3, r0
 8002568:	4402      	add	r2, r0
 800256a:	4293      	cmp	r3, r2
 800256c:	d100      	bne.n	8002570 <memset+0xa>
 800256e:	4770      	bx	lr
 8002570:	f803 1b01 	strb.w	r1, [r3], #1
 8002574:	e7f9      	b.n	800256a <memset+0x4>
	...

08002578 <_init>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr

08002584 <_fini>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr
